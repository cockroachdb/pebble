build
apple       24   24    bp1
applied    141  112    bp2
atone      195   49    bp3
bacitracin 412  212
banana     632  215    bp5
bonifide   963  326    bp6
----
UnsafeSeparator(5) = "bonifide"
index-block-decoder
 └── index block header
      ├── columnar block header
      │    ├── 000-004: x 0a000000 # maximum sep length: 10
      │    ├── 004-005: x 01       # version 1
      │    ├── 005-007: x 0500     # 5 columns
      │    ├── 007-011: x 06000000 # 6 rows
      │    ├── 011-012: b 00000100 # col 0: prefixbytes
      │    ├── 012-016: x 24000000 # col 0: page start 36
      │    ├── 016-017: b 00000011 # col 1: bytes
      │    ├── 017-021: x 57000000 # col 1: page start 87
      │    ├── 021-022: b 00000010 # col 2: uint
      │    ├── 022-026: x 58000000 # col 2: page start 88
      │    ├── 026-027: b 00000010 # col 3: uint
      │    ├── 027-031: x 66000000 # col 3: page start 102
      │    ├── 031-032: b 00000011 # col 4: bytes
      │    └── 032-036: x 74000000 # col 4: page start 116
      ├── data for column 0 (prefixbytes)
      │    ├── 036-037: x 04 # bundle size: 16
      │    ├── offsets table
      │    │    ├── 037-038: x 01 # encoding: 1b
      │    │    ├── 038-039: x 00 # data[0] = 0 [46 overall]
      │    │    ├── 039-040: x 00 # data[1] = 0 [46 overall]
      │    │    ├── 040-041: x 05 # data[2] = 5 [51 overall]
      │    │    ├── 041-042: x 0c # data[3] = 12 [58 overall]
      │    │    ├── 042-043: x 11 # data[4] = 17 [63 overall]
      │    │    ├── 043-044: x 1b # data[5] = 27 [73 overall]
      │    │    ├── 044-045: x 21 # data[6] = 33 [79 overall]
      │    │    └── 045-046: x 29 # data[7] = 41 [87 overall]
      │    └── data
      │         ├── 046-046: x                      # data[00]:  (block prefix)
      │         ├── 046-046: x                      # data[01]:  (bundle prefix)
      │         ├── 046-051: x 6170706c65           # data[02]: apple
      │         ├── 051-058: x 6170706c696564       # data[03]: applied
      │         ├── 058-063: x 61746f6e65           # data[04]: atone
      │         ├── 063-073: x 6261636974726163696e # data[05]: bacitracin
      │         ├── 073-079: x 62616e616e61         # data[06]: banana
      │         └── 079-087: x 626f6e6966696465     # data[07]: bonifide
      ├── data for column 1 (bytes)
      │    ├── offsets table
      │    │    └── 087-088: x 00 # encoding: zero
      │    └── data
      │         ├── 088-088: x  # data[0]:
      │         ├── 088-088: x  # data[1]:
      │         ├── 088-088: x  # data[2]:
      │         ├── 088-088: x  # data[3]:
      │         ├── 088-088: x  # data[4]:
      │         └── 088-088: x  # data[5]:
      ├── data for column 2 (uint)
      │    ├── 088-089: x 02   # encoding: 2b
      │    ├── 089-090: x 00   # padding (aligning to 16-bit boundary)
      │    ├── 090-092: x 1800 # data[0] = 24
      │    ├── 092-094: x 8d00 # data[1] = 141
      │    ├── 094-096: x c300 # data[2] = 195
      │    ├── 096-098: x 9c01 # data[3] = 412
      │    ├── 098-100: x 7802 # data[4] = 632
      │    └── 100-102: x c303 # data[5] = 963
      ├── data for column 3 (uint)
      │    ├── 102-103: x 02   # encoding: 2b
      │    ├── 103-104: x 00   # padding (aligning to 16-bit boundary)
      │    ├── 104-106: x 1800 # data[0] = 24
      │    ├── 106-108: x 7000 # data[1] = 112
      │    ├── 108-110: x 3100 # data[2] = 49
      │    ├── 110-112: x d400 # data[3] = 212
      │    ├── 112-114: x d700 # data[4] = 215
      │    └── 114-116: x 4601 # data[5] = 326
      ├── data for column 4 (bytes)
      │    ├── offsets table
      │    │    ├── 116-117: x 01 # encoding: 1b
      │    │    ├── 117-118: x 00 # data[0] = 0 [124 overall]
      │    │    ├── 118-119: x 03 # data[1] = 3 [127 overall]
      │    │    ├── 119-120: x 06 # data[2] = 6 [130 overall]
      │    │    ├── 120-121: x 09 # data[3] = 9 [133 overall]
      │    │    ├── 121-122: x 09 # data[4] = 9 [133 overall]
      │    │    ├── 122-123: x 0c # data[5] = 12 [136 overall]
      │    │    └── 123-124: x 0f # data[6] = 15 [139 overall]
      │    └── data
      │         ├── 124-127: x 627031 # data[0]: bp1
      │         ├── 127-130: x 627032 # data[1]: bp2
      │         ├── 130-133: x 627033 # data[2]: bp3
      │         ├── 133-133: x        # data[3]:
      │         ├── 133-136: x 627035 # data[4]: bp5
      │         └── 136-139: x 627036 # data[5]: bp6
      └── 139-140: x 00 # block padding byte

iter
seek-ge zoo
seek-ge bitter
seek-ge abbey
seek-ge banana
seek-ge babble
seek-ge assumption
----
seek-ge zoo = .
seek-ge bitter = separator: bonifide  block 5: 963-1289 props="bp6"
seek-ge abbey = separator: apple  block 0: 24-48 props="bp1"
seek-ge banana = separator: banana  block 4: 632-847 props="bp5"
seek-ge babble = separator: bacitracin  block 3: 412-624
seek-ge assumption = separator: atone  block 2: 195-244 props="bp3"

iter
first
next
next
next
next
next
next
----
first = separator: apple  block 0: 24-48 props="bp1"
next = separator: applied  block 1: 141-253 props="bp2"
next = separator: atone  block 2: 195-244 props="bp3"
next = separator: bacitracin  block 3: 412-624
next = separator: banana  block 4: 632-847 props="bp5"
next = separator: bonifide  block 5: 963-1289 props="bp6"
next = .

iter
last
prev
prev
prev
prev
prev
prev
----
last = separator: bonifide  block 5: 963-1289 props="bp6"
prev = separator: banana  block 4: 632-847 props="bp5"
prev = separator: bacitracin  block 3: 412-624
prev = separator: atone  block 2: 195-244 props="bp3"
prev = separator: applied  block 1: 141-253 props="bp2"
prev = separator: apple  block 0: 24-48 props="bp1"
prev = .

# Test Next-ing an index iterator that's already exhausted in the forward
# direction. The sstable iterators do this in some circumstances. The Next
# should be a no-op and a subsequent Prev should still return to the last block
# handle in the block.

iter
last
next
next
prev
----
last = separator: bonifide  block 5: 963-1289 props="bp6"
next = .
next = .
prev = separator: bonifide  block 5: 963-1289 props="bp6"

# Test Prev-ing an index iterator that's already exhausted in the reverse
# direction. The sstable iterators do this in some circumstances. The Prev
# should be a no-op and a subsequent Next should still return to the first block
# handle in the block.

iter
first
prev
prev
next
----
first = separator: apple  block 0: 24-48 props="bp1"
prev = .
prev = .
next = separator: apple  block 0: 24-48 props="bp1"

# Test Invalidate() and ensure that Valid() and all positioning methods return
# false after it.

iter
first
invalidate
is-valid
next
prev
first
last
seek-ge a
----
first = separator: apple  block 0: 24-48 props="bp1"
invalidate = .
Valid()=false
next = .
prev = .
first = .
last = .
seek-ge a = .

# Rebuild the same index block, but excluding the last row during the final Finish().

build rows=5
apple       24   24    bp1
applied    141  112    bp2
atone      195   49    bp3
bacitracin 412  212
banana     632  215    bp5
bonifide   963  326    bp6
----
UnsafeSeparator(4) = "banana"
index-block-decoder
 └── index block header
      ├── columnar block header
      │    ├── 000-004: x 0a000000 # maximum sep length: 10
      │    ├── 004-005: x 01       # version 1
      │    ├── 005-007: x 0500     # 5 columns
      │    ├── 007-011: x 05000000 # 5 rows
      │    ├── 011-012: b 00000100 # col 0: prefixbytes
      │    ├── 012-016: x 24000000 # col 0: page start 36
      │    ├── 016-017: b 00000011 # col 1: bytes
      │    ├── 017-021: x 4e000000 # col 1: page start 78
      │    ├── 021-022: b 00000010 # col 2: uint
      │    ├── 022-026: x 4f000000 # col 2: page start 79
      │    ├── 026-027: b 00000010 # col 3: uint
      │    ├── 027-031: x 5a000000 # col 3: page start 90
      │    ├── 031-032: b 00000011 # col 4: bytes
      │    └── 032-036: x 60000000 # col 4: page start 96
      ├── data for column 0 (prefixbytes)
      │    ├── 036-037: x 04 # bundle size: 16
      │    ├── offsets table
      │    │    ├── 037-038: x 01 # encoding: 1b
      │    │    ├── 038-039: x 00 # data[0] = 0 [45 overall]
      │    │    ├── 039-040: x 00 # data[1] = 0 [45 overall]
      │    │    ├── 040-041: x 05 # data[2] = 5 [50 overall]
      │    │    ├── 041-042: x 0c # data[3] = 12 [57 overall]
      │    │    ├── 042-043: x 11 # data[4] = 17 [62 overall]
      │    │    ├── 043-044: x 1b # data[5] = 27 [72 overall]
      │    │    └── 044-045: x 21 # data[6] = 33 [78 overall]
      │    └── data
      │         ├── 045-045: x                      # data[00]:  (block prefix)
      │         ├── 045-045: x                      # data[01]:  (bundle prefix)
      │         ├── 045-050: x 6170706c65           # data[02]: apple
      │         ├── 050-057: x 6170706c696564       # data[03]: applied
      │         ├── 057-062: x 61746f6e65           # data[04]: atone
      │         ├── 062-072: x 6261636974726163696e # data[05]: bacitracin
      │         └── 072-078: x 62616e616e61         # data[06]: banana
      ├── data for column 1 (bytes)
      │    ├── offsets table
      │    │    └── 078-079: x 00 # encoding: zero
      │    └── data
      │         ├── 079-079: x  # data[0]:
      │         ├── 079-079: x  # data[1]:
      │         ├── 079-079: x  # data[2]:
      │         ├── 079-079: x  # data[3]:
      │         └── 079-079: x  # data[4]:
      ├── data for column 2 (uint)
      │    ├── 079-080: x 02   # encoding: 2b
      │    ├── 080-082: x 1800 # data[0] = 24
      │    ├── 082-084: x 8d00 # data[1] = 141
      │    ├── 084-086: x c300 # data[2] = 195
      │    ├── 086-088: x 9c01 # data[3] = 412
      │    └── 088-090: x 7802 # data[4] = 632
      ├── data for column 3 (uint)
      │    ├── 090-091: x 01 # encoding: 1b
      │    ├── 091-092: x 18 # data[0] = 24
      │    ├── 092-093: x 70 # data[1] = 112
      │    ├── 093-094: x 31 # data[2] = 49
      │    ├── 094-095: x d4 # data[3] = 212
      │    └── 095-096: x d7 # data[4] = 215
      ├── data for column 4 (bytes)
      │    ├── offsets table
      │    │    ├── 096-097: x 01 # encoding: 1b
      │    │    ├── 097-098: x 00 # data[0] = 0 [103 overall]
      │    │    ├── 098-099: x 03 # data[1] = 3 [106 overall]
      │    │    ├── 099-100: x 06 # data[2] = 6 [109 overall]
      │    │    ├── 100-101: x 09 # data[3] = 9 [112 overall]
      │    │    ├── 101-102: x 09 # data[4] = 9 [112 overall]
      │    │    └── 102-103: x 0c # data[5] = 12 [115 overall]
      │    └── data
      │         ├── 103-106: x 627031 # data[0]: bp1
      │         ├── 106-109: x 627032 # data[1]: bp2
      │         ├── 109-112: x 627033 # data[2]: bp3
      │         ├── 112-112: x        # data[3]:
      │         └── 112-115: x 627035 # data[4]: bp5
      └── 115-116: x 00 # block padding byte

build
cat           3021   2052   bp1
catastrophe  91251   1899
catatonic   102422  20442
cephalopod  122864   9104   bp4
coat        293128  32104
----
UnsafeSeparator(4) = "coat"
index-block-decoder
 └── index block header
      ├── columnar block header
      │    ├── 000-004: x 0b000000 # maximum sep length: 11
      │    ├── 004-005: x 01       # version 1
      │    ├── 005-007: x 0500     # 5 columns
      │    ├── 007-011: x 05000000 # 5 rows
      │    ├── 011-012: b 00000100 # col 0: prefixbytes
      │    ├── 012-016: x 24000000 # col 0: page start 36
      │    ├── 016-017: b 00000011 # col 1: bytes
      │    ├── 017-021: x 4e000000 # col 1: page start 78
      │    ├── 021-022: b 00000010 # col 2: uint
      │    ├── 022-026: x 4f000000 # col 2: page start 79
      │    ├── 026-027: b 00000010 # col 3: uint
      │    ├── 027-031: x 64000000 # col 3: page start 100
      │    ├── 031-032: b 00000011 # col 4: bytes
      │    └── 032-036: x 70000000 # col 4: page start 112
      ├── data for column 0 (prefixbytes)
      │    ├── 036-037: x 04 # bundle size: 16
      │    ├── offsets table
      │    │    ├── 037-038: x 01 # encoding: 1b
      │    │    ├── 038-039: x 01 # data[0] = 1 [46 overall]
      │    │    ├── 039-040: x 01 # data[1] = 1 [46 overall]
      │    │    ├── 040-041: x 03 # data[2] = 3 [48 overall]
      │    │    ├── 041-042: x 0d # data[3] = 13 [58 overall]
      │    │    ├── 042-043: x 15 # data[4] = 21 [66 overall]
      │    │    ├── 043-044: x 1e # data[5] = 30 [75 overall]
      │    │    └── 044-045: x 21 # data[6] = 33 [78 overall]
      │    └── data
      │         ├── 045-046: x 63                   # data[00]: c (block prefix)
      │         ├── 046-046: x                      # data[01]: . (bundle prefix)
      │         ├── 046-048: x 6174                 # data[02]: .at
      │         ├── 048-058: x 6174617374726f706865 # data[03]: .atastrophe
      │         ├── 058-066: x 617461746f6e6963     # data[04]: .atatonic
      │         ├── 066-075: x 657068616c6f706f64   # data[05]: .ephalopod
      │         └── 075-078: x 6f6174               # data[06]: .oat
      ├── data for column 1 (bytes)
      │    ├── offsets table
      │    │    └── 078-079: x 00 # encoding: zero
      │    └── data
      │         ├── 079-079: x  # data[0]:
      │         ├── 079-079: x  # data[1]:
      │         ├── 079-079: x  # data[2]:
      │         ├── 079-079: x  # data[3]:
      │         └── 079-079: x  # data[4]:
      ├── data for column 2 (uint)
      │    ├── 079-080: x 04       # encoding: 4b
      │    ├── 080-084: x cd0b0000 # data[0] = 3021
      │    ├── 084-088: x 73640100 # data[1] = 91251
      │    ├── 088-092: x 16900100 # data[2] = 102422
      │    ├── 092-096: x f0df0100 # data[3] = 122864
      │    └── 096-100: x 08790400 # data[4] = 293128
      ├── data for column 3 (uint)
      │    ├── 100-101: x 02   # encoding: 2b
      │    ├── 101-102: x 00   # padding (aligning to 16-bit boundary)
      │    ├── 102-104: x 0408 # data[0] = 2052
      │    ├── 104-106: x 6b07 # data[1] = 1899
      │    ├── 106-108: x da4f # data[2] = 20442
      │    ├── 108-110: x 9023 # data[3] = 9104
      │    └── 110-112: x 687d # data[4] = 32104
      ├── data for column 4 (bytes)
      │    ├── offsets table
      │    │    ├── 112-113: x 01 # encoding: 1b
      │    │    ├── 113-114: x 00 # data[0] = 0 [119 overall]
      │    │    ├── 114-115: x 03 # data[1] = 3 [122 overall]
      │    │    ├── 115-116: x 03 # data[2] = 3 [122 overall]
      │    │    ├── 116-117: x 03 # data[3] = 3 [122 overall]
      │    │    ├── 117-118: x 06 # data[4] = 6 [125 overall]
      │    │    └── 118-119: x 06 # data[5] = 6 [125 overall]
      │    └── data
      │         ├── 119-122: x 627031 # data[0]: bp1
      │         ├── 122-122: x        # data[1]:
      │         ├── 122-122: x        # data[2]:
      │         ├── 122-125: x 627034 # data[3]: bp4
      │         └── 125-125: x        # data[4]:
      └── 125-126: x 00 # block padding byte

iter
first
next
next
next
next
next
----
first = separator: cat  block 0: 3021-5073 props="bp1"
next = separator: catastrophe  block 1: 91251-93150
next = separator: catatonic  block 2: 102422-122864
next = separator: cephalopod  block 3: 122864-131968 props="bp4"
next = separator: coat  block 4: 293128-325232
next = .

iter
last
prev
prev
prev
prev
prev
----
last = separator: coat  block 4: 293128-325232
prev = separator: cephalopod  block 3: 122864-131968 props="bp4"
prev = separator: catatonic  block 2: 102422-122864
prev = separator: catastrophe  block 1: 91251-93150
prev = separator: cat  block 0: 3021-5073 props="bp1"
prev = .

# Rebuild the same index block but excluding the final row during Finish().

build rows=4
cat           3021   2052   bp1
catastrophe  91251   1899
catatonic   102422  20442
cephalopod  122864   9104   bp4
coat        293128  32104
----
UnsafeSeparator(3) = "cephalopod"
index-block-decoder
 └── index block header
      ├── columnar block header
      │    ├── 000-004: x 0b000000 # maximum sep length: 11
      │    ├── 004-005: x 01       # version 1
      │    ├── 005-007: x 0500     # 5 columns
      │    ├── 007-011: x 04000000 # 4 rows
      │    ├── 011-012: b 00000100 # col 0: prefixbytes
      │    ├── 012-016: x 24000000 # col 0: page start 36
      │    ├── 016-017: b 00000011 # col 1: bytes
      │    ├── 017-021: x 4a000000 # col 1: page start 74
      │    ├── 021-022: b 00000010 # col 2: uint
      │    ├── 022-026: x 4b000000 # col 2: page start 75
      │    ├── 026-027: b 00000010 # col 3: uint
      │    ├── 027-031: x 5c000000 # col 3: page start 92
      │    ├── 031-032: b 00000011 # col 4: bytes
      │    └── 032-036: x 66000000 # col 4: page start 102
      ├── data for column 0 (prefixbytes)
      │    ├── 036-037: x 04 # bundle size: 16
      │    ├── offsets table
      │    │    ├── 037-038: x 01 # encoding: 1b
      │    │    ├── 038-039: x 01 # data[0] = 1 [45 overall]
      │    │    ├── 039-040: x 01 # data[1] = 1 [45 overall]
      │    │    ├── 040-041: x 03 # data[2] = 3 [47 overall]
      │    │    ├── 041-042: x 0d # data[3] = 13 [57 overall]
      │    │    ├── 042-043: x 15 # data[4] = 21 [65 overall]
      │    │    └── 043-044: x 1e # data[5] = 30 [74 overall]
      │    └── data
      │         ├── 044-045: x 63                   # data[00]: c (block prefix)
      │         ├── 045-045: x                      # data[01]: . (bundle prefix)
      │         ├── 045-047: x 6174                 # data[02]: .at
      │         ├── 047-057: x 6174617374726f706865 # data[03]: .atastrophe
      │         ├── 057-065: x 617461746f6e6963     # data[04]: .atatonic
      │         └── 065-074: x 657068616c6f706f64   # data[05]: .ephalopod
      ├── data for column 1 (bytes)
      │    ├── offsets table
      │    │    └── 074-075: x 00 # encoding: zero
      │    └── data
      │         ├── 075-075: x  # data[0]:
      │         ├── 075-075: x  # data[1]:
      │         ├── 075-075: x  # data[2]:
      │         └── 075-075: x  # data[3]:
      ├── data for column 2 (uint)
      │    ├── 075-076: x 04       # encoding: 4b
      │    ├── 076-080: x cd0b0000 # data[0] = 3021
      │    ├── 080-084: x 73640100 # data[1] = 91251
      │    ├── 084-088: x 16900100 # data[2] = 102422
      │    └── 088-092: x f0df0100 # data[3] = 122864
      ├── data for column 3 (uint)
      │    ├── 092-093: x 02   # encoding: 2b
      │    ├── 093-094: x 00   # padding (aligning to 16-bit boundary)
      │    ├── 094-096: x 0408 # data[0] = 2052
      │    ├── 096-098: x 6b07 # data[1] = 1899
      │    ├── 098-100: x da4f # data[2] = 20442
      │    └── 100-102: x 9023 # data[3] = 9104
      ├── data for column 4 (bytes)
      │    ├── offsets table
      │    │    ├── 102-103: x 01 # encoding: 1b
      │    │    ├── 103-104: x 00 # data[0] = 0 [108 overall]
      │    │    ├── 104-105: x 03 # data[1] = 3 [111 overall]
      │    │    ├── 105-106: x 03 # data[2] = 3 [111 overall]
      │    │    ├── 106-107: x 03 # data[3] = 3 [111 overall]
      │    │    └── 107-108: x 06 # data[4] = 6 [114 overall]
      │    └── data
      │         ├── 108-111: x 627031 # data[0]: bp1
      │         ├── 111-111: x        # data[1]:
      │         ├── 111-111: x        # data[2]:
      │         └── 111-114: x 627034 # data[3]: bp4
      └── 114-115: x 00 # block padding byte

build
cat@20 3021  2052   bp1
cat@10 91251 1899
cat@5  91251 1899
----
UnsafeSeparator(2) = "cat@5"
index-block-decoder
 └── index block header
      ├── columnar block header
      │    ├── 00-04: x 06000000 # maximum sep length: 6
      │    ├── 04-05: x 01       # version 1
      │    ├── 05-07: x 0500     # 5 columns
      │    ├── 07-11: x 03000000 # 3 rows
      │    ├── 11-12: b 00000100 # col 0: prefixbytes
      │    ├── 12-16: x 24000000 # col 0: page start 36
      │    ├── 16-17: b 00000011 # col 1: bytes
      │    ├── 17-21: x 2e000000 # col 1: page start 46
      │    ├── 21-22: b 00000010 # col 2: uint
      │    ├── 22-26: x 3b000000 # col 2: page start 59
      │    ├── 26-27: b 00000010 # col 3: uint
      │    ├── 27-31: x 48000000 # col 3: page start 72
      │    ├── 31-32: b 00000011 # col 4: bytes
      │    └── 32-36: x 50000000 # col 4: page start 80
      ├── data for column 0 (prefixbytes)
      │    ├── 36-37: x 04 # bundle size: 16
      │    ├── offsets table
      │    │    ├── 37-38: x 01 # encoding: 1b
      │    │    ├── 38-39: x 03 # data[0] = 3 [46 overall]
      │    │    ├── 39-40: x 03 # data[1] = 3 [46 overall]
      │    │    ├── 40-41: x 03 # data[2] = 3 [46 overall]
      │    │    ├── 41-42: x 03 # data[3] = 3 [46 overall]
      │    │    └── 42-43: x 03 # data[4] = 3 [46 overall]
      │    └── data
      │         ├── 43-46: x 636174 # data[00]: cat (block prefix)
      │         ├── 46-46: x        # data[01]: ... (bundle prefix)
      │         ├── 46-46: x        # data[02]: ...
      │         ├── 46-46: x        # data[03]: ...
      │         └── 46-46: x        # data[04]: ...
      ├── data for column 1 (bytes)
      │    ├── offsets table
      │    │    ├── 46-47: x 01 # encoding: 1b
      │    │    ├── 47-48: x 00 # data[0] = 0 [51 overall]
      │    │    ├── 48-49: x 03 # data[1] = 3 [54 overall]
      │    │    ├── 49-50: x 06 # data[2] = 6 [57 overall]
      │    │    └── 50-51: x 08 # data[3] = 8 [59 overall]
      │    └── data
      │         ├── 51-54: x 403230 # data[0]: @20
      │         ├── 54-57: x 403130 # data[1]: @10
      │         └── 57-59: x 4035   # data[2]: @5
      ├── data for column 2 (uint)
      │    ├── 59-60: x 04       # encoding: 4b
      │    ├── 60-64: x cd0b0000 # data[0] = 3021
      │    ├── 64-68: x 73640100 # data[1] = 91251
      │    └── 68-72: x 73640100 # data[2] = 91251
      ├── data for column 3 (uint)
      │    ├── 72-73: x 02   # encoding: 2b
      │    ├── 73-74: x 00   # padding (aligning to 16-bit boundary)
      │    ├── 74-76: x 0408 # data[0] = 2052
      │    ├── 76-78: x 6b07 # data[1] = 1899
      │    └── 78-80: x 6b07 # data[2] = 1899
      ├── data for column 4 (bytes)
      │    ├── offsets table
      │    │    ├── 80-81: x 01 # encoding: 1b
      │    │    ├── 81-82: x 00 # data[0] = 0 [85 overall]
      │    │    ├── 82-83: x 03 # data[1] = 3 [88 overall]
      │    │    ├── 83-84: x 03 # data[2] = 3 [88 overall]
      │    │    └── 84-85: x 03 # data[3] = 3 [88 overall]
      │    └── data
      │         ├── 85-88: x 627031 # data[0]: bp1
      │         ├── 88-88: x        # data[1]:
      │         └── 88-88: x        # data[2]:
      └── 88-89: x 00 # block padding byte

iter
seek-ge cat
seek-ge cat@21
seek-ge cat@20
seek-ge cat@19
seek-ge cat@10
seek-ge cat@9
seek-ge cat@5
seek-ge cat@2
----
seek-ge cat = separator: cat@20  block 0: 3021-5073 props="bp1"
seek-ge cat@21 = separator: cat@20  block 0: 3021-5073 props="bp1"
seek-ge cat@20 = separator: cat@20  block 0: 3021-5073 props="bp1"
seek-ge cat@19 = separator: cat@10  block 1: 91251-93150
seek-ge cat@10 = separator: cat@10  block 1: 91251-93150
seek-ge cat@9 = separator: cat@5  block 2: 91251-93150
seek-ge cat@5 = separator: cat@5  block 2: 91251-93150
seek-ge cat@2 = .

build
aa       1   1    bp1
ab@10    2   1    bp2
abc      3   1    bp3
ad@5     4   1    bp4
----
UnsafeSeparator(3) = "ad@5"
index-block-decoder
 └── index block header
      ├── columnar block header
      │    ├── 00-04: x 05000000 # maximum sep length: 5
      │    ├── 04-05: x 01       # version 1
      │    ├── 05-07: x 0500     # 5 columns
      │    ├── 07-11: x 04000000 # 4 rows
      │    ├── 11-12: b 00000100 # col 0: prefixbytes
      │    ├── 12-16: x 24000000 # col 0: page start 36
      │    ├── 16-17: b 00000011 # col 1: bytes
      │    ├── 17-21: x 32000000 # col 1: page start 50
      │    ├── 21-22: b 00000010 # col 2: uint
      │    ├── 22-26: x 3d000000 # col 2: page start 61
      │    ├── 26-27: b 00000010 # col 3: uint
      │    ├── 27-31: x 42000000 # col 3: page start 66
      │    ├── 31-32: b 00000011 # col 4: bytes
      │    └── 32-36: x 47000000 # col 4: page start 71
      ├── data for column 0 (prefixbytes)
      │    ├── 36-37: x 04 # bundle size: 16
      │    ├── offsets table
      │    │    ├── 37-38: x 01 # encoding: 1b
      │    │    ├── 38-39: x 01 # data[0] = 1 [45 overall]
      │    │    ├── 39-40: x 01 # data[1] = 1 [45 overall]
      │    │    ├── 40-41: x 02 # data[2] = 2 [46 overall]
      │    │    ├── 41-42: x 03 # data[3] = 3 [47 overall]
      │    │    ├── 42-43: x 05 # data[4] = 5 [49 overall]
      │    │    └── 43-44: x 06 # data[5] = 6 [50 overall]
      │    └── data
      │         ├── 44-45: x 61   # data[00]: a (block prefix)
      │         ├── 45-45: x      # data[01]: . (bundle prefix)
      │         ├── 45-46: x 61   # data[02]: .a
      │         ├── 46-47: x 62   # data[03]: .b
      │         ├── 47-49: x 6263 # data[04]: .bc
      │         └── 49-50: x 64   # data[05]: .d
      ├── data for column 1 (bytes)
      │    ├── offsets table
      │    │    ├── 50-51: x 01 # encoding: 1b
      │    │    ├── 51-52: x 00 # data[0] = 0 [56 overall]
      │    │    ├── 52-53: x 00 # data[1] = 0 [56 overall]
      │    │    ├── 53-54: x 03 # data[2] = 3 [59 overall]
      │    │    ├── 54-55: x 03 # data[3] = 3 [59 overall]
      │    │    └── 55-56: x 05 # data[4] = 5 [61 overall]
      │    └── data
      │         ├── 56-56: x        # data[0]:
      │         ├── 56-59: x 403130 # data[1]: @10
      │         ├── 59-59: x        # data[2]:
      │         └── 59-61: x 4035   # data[3]: @5
      ├── data for column 2 (uint)
      │    ├── 61-62: x 01 # encoding: 1b
      │    ├── 62-63: x 01 # data[0] = 1
      │    ├── 63-64: x 02 # data[1] = 2
      │    ├── 64-65: x 03 # data[2] = 3
      │    └── 65-66: x 04 # data[3] = 4
      ├── data for column 3 (uint)
      │    ├── 66-67: x 01 # encoding: 1b
      │    ├── 67-68: x 01 # data[0] = 1
      │    ├── 68-69: x 01 # data[1] = 1
      │    ├── 69-70: x 01 # data[2] = 1
      │    └── 70-71: x 01 # data[3] = 1
      ├── data for column 4 (bytes)
      │    ├── offsets table
      │    │    ├── 71-72: x 01 # encoding: 1b
      │    │    ├── 72-73: x 00 # data[0] = 0 [77 overall]
      │    │    ├── 73-74: x 03 # data[1] = 3 [80 overall]
      │    │    ├── 74-75: x 06 # data[2] = 6 [83 overall]
      │    │    ├── 75-76: x 09 # data[3] = 9 [86 overall]
      │    │    └── 76-77: x 0c # data[4] = 12 [89 overall]
      │    └── data
      │         ├── 77-80: x 627031 # data[0]: bp1
      │         ├── 80-83: x 627032 # data[1]: bp2
      │         ├── 83-86: x 627033 # data[2]: bp3
      │         └── 86-89: x 627034 # data[3]: bp4
      └── 89-90: x 00 # block padding byte

iter synthetic-prefix=foo-
first
next
next
----
first = separator: foo-aa  block 0: 1-2 props="bp1"
next = separator: foo-ab@10  block 1: 2-3 props="bp2"
next = separator: foo-abc  block 2: 3-4 props="bp3"

iter synthetic-prefix=foo-
seek-ge aa
seek-ge foa
seek-ge foo-
seek-ge foo-a
seek-ge foo-aa
seek-ge foo-ab
seek-ge foo-ab@11
seek-ge foo-ab@5
seek-ge fop
prev
seek-ge z
prev
----
seek-ge aa = separator: foo-aa  block 0: 1-2 props="bp1"
seek-ge foa = separator: foo-aa  block 0: 1-2 props="bp1"
seek-ge foo- = separator: foo-aa  block 0: 1-2 props="bp1"
seek-ge foo-a = separator: foo-aa  block 0: 1-2 props="bp1"
seek-ge foo-aa = separator: foo-aa  block 0: 1-2 props="bp1"
seek-ge foo-ab = separator: foo-ab@10  block 1: 2-3 props="bp2"
seek-ge foo-ab@11 = separator: foo-ab@10  block 1: 2-3 props="bp2"
seek-ge foo-ab@5 = separator: foo-abc  block 2: 3-4 props="bp3"
seek-ge fop = .
prev = separator: foo-ad@5  block 3: 4-5 props="bp4"
seek-ge z = .
prev = separator: foo-ad@5  block 3: 4-5 props="bp4"

iter synthetic-suffix=@20
first
next
next
----
first = separator: aa@20  block 0: 1-2 props="bp1"
next = separator: ab@20  block 1: 2-3 props="bp2"
next = separator: abc@20  block 2: 3-4 props="bp3"

iter synthetic-suffix=@20
seek-ge aa
seek-ge ab
seek-ge ab@21
seek-ge ab@20
seek-ge ab@19
----
seek-ge aa = separator: aa@20  block 0: 1-2 props="bp1"
seek-ge ab = separator: ab@20  block 1: 2-3 props="bp2"
seek-ge ab@21 = separator: ab@20  block 1: 2-3 props="bp2"
seek-ge ab@20 = separator: ab@20  block 1: 2-3 props="bp2"
seek-ge ab@19 = separator: abc@20  block 2: 3-4 props="bp3"

iter synthetic-prefix=foo- synthetic-suffix=@20
first
next
next
----
first = separator: foo-aa@20  block 0: 1-2 props="bp1"
next = separator: foo-ab@20  block 1: 2-3 props="bp2"
next = separator: foo-abc@20  block 2: 3-4 props="bp3"

iter synthetic-prefix=foo- synthetic-suffix=@20
seek-ge foo-aa
seek-ge foo-ab@21
seek-ge foo-ab@20
seek-ge foo-ab@19
----
seek-ge foo-aa = separator: foo-aa@20  block 0: 1-2 props="bp1"
seek-ge foo-ab@21 = separator: foo-ab@20  block 1: 2-3 props="bp2"
seek-ge foo-ab@20 = separator: foo-ab@20  block 1: 2-3 props="bp2"
seek-ge foo-ab@19 = separator: foo-abc@20  block 2: 3-4 props="bp3"
