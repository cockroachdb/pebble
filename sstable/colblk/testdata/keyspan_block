init
----
size=1:
0: user keys:      bytes: 0 rows set; 0 bytes in data
1: start indices:  uint32: 0 rows
2: trailers:       uint64: 0 rows
3: suffixes:       bytes: 0 rows set; 0 bytes in data
4: values:         bytes: 0 rows set; 0 bytes in data

add
a-b:{(#0,RANGEDEL)}
----
size=73:
0: user keys:      bytes: 2 rows set; 2 bytes in data
1: start indices:  uint32: 2 rows
2: trailers:       uint64: 1 rows
3: suffixes:       bytes: 1 rows set; 0 bytes in data
4: values:         bytes: 1 rows set; 0 bytes in data

add
b-c:{(#100,RANGEDEL) (#20,RANGEDEL) (#0,RANGEDEL)}
----
size=85:
0: user keys:      bytes: 3 rows set; 3 bytes in data
1: start indices:  uint32: 3 rows
2: trailers:       uint64: 4 rows
3: suffixes:       bytes: 4 rows set; 0 bytes in data
4: values:         bytes: 4 rows set; 0 bytes in data

add
c-d:{(#100,RANGEDEL) (#0,RANGEDEL)}
----
size=91:
0: user keys:      bytes: 4 rows set; 4 bytes in data
1: start indices:  uint32: 4 rows
2: trailers:       uint64: 6 rows
3: suffixes:       bytes: 6 rows set; 0 bytes in data
4: values:         bytes: 6 rows set; 0 bytes in data

add
d-e:{(#0,RANGEDEL)}
----
size=97:
0: user keys:      bytes: 5 rows set; 5 bytes in data
1: start indices:  uint32: 5 rows
2: trailers:       uint64: 7 rows
3: suffixes:       bytes: 7 rows set; 0 bytes in data
4: values:         bytes: 7 rows set; 0 bytes in data

finish
----
# keyspan block header
00-04: x 05000000         # user key count: 5
# columnar block header
04-05: x 01               # version 1
05-07: x 0500             # 5 columns
07-11: x 07000000         # 7 rows
# column 0
11-12: b 00000110         # bytes
12-16: x 24000000         # page start 36
# column 1
16-17: b 00000100         # uint32
17-21: x 34000000         # page start 52
# column 2
21-22: b 00000101         # uint64
22-26: x 3e000000         # page start 62
# column 3
26-27: b 00000110         # bytes
27-31: x 56000000         # page start 86
# column 4
31-32: b 00000110         # bytes
32-36: x 5b000000         # page start 91
# data for column 0
# rawbytes
# offsets table
36-37: x 02               # delta encoding: delta8
37-41: x 00000000         # 32-bit constant: 0
41-42: x 00               # data[0] = 0 [47 overall]
42-43: x 01               # data[1] = 1 [48 overall]
43-44: x 02               # data[2] = 2 [49 overall]
44-45: x 03               # data[3] = 3 [50 overall]
45-46: x 04               # data[4] = 4 [51 overall]
46-47: x 05               # data[5] = 5 [52 overall]
# data
47-48: x 61               # data[0]: a
48-49: x 62               # data[1]: b
49-50: x 63               # data[2]: c
50-51: x 64               # data[3]: d
51-52: x 65               # data[4]: e
# data for column 1
52-53: x 02               # delta encoding: delta8
53-57: x 00000000         # 32-bit constant: 0
57-58: x 00               # data[0] = 0
58-59: x 01               # data[1] = 1
59-60: x 04               # data[2] = 4
60-61: x 06               # data[3] = 6
61-62: x 07               # data[4] = 7
# data for column 2
62-63: x 03               # delta encoding: delta16
63-71: x 0f00000000000000 # 64-bit constant: 15
# padding
71-72: x 00               # aligning to 16-bit boundary
72-74: x 0000             # data[0] = 0 + 15 = 15
74-76: x 0064             # data[1] = 25600 + 15 = 25615
76-78: x 0014             # data[2] = 5120 + 15 = 5135
78-80: x 0000             # data[3] = 0 + 15 = 15
80-82: x 0064             # data[4] = 25600 + 15 = 25615
82-84: x 0000             # data[5] = 0 + 15 = 15
84-86: x 0000             # data[6] = 0 + 15 = 15
# data for column 3
# rawbytes
# offsets table
86-87: x 01               # delta encoding: const
87-91: x 00000000         # 32-bit constant: 0
# data
91-91: x                  # data[0]:
91-91: x                  # data[1]:
91-91: x                  # data[2]:
91-91: x                  # data[3]:
91-91: x                  # data[4]:
91-91: x                  # data[5]:
91-91: x                  # data[6]:
# data for column 4
# rawbytes
# offsets table
91-92: x 01               # delta encoding: const
92-96: x 00000000         # 32-bit constant: 0
# data
96-96: x                  # data[0]:
96-96: x                  # data[1]:
96-96: x                  # data[2]:
96-96: x                  # data[3]:
96-96: x                  # data[4]:
96-96: x                  # data[5]:
96-96: x                  # data[6]:

# Test iterating over the block's spans.

iter
seek-ge a
seek-ge apple
seek-ge b
seek-ge banana
seek-ge c
seek-ge coconut
seek-ge d
seek-ge dragonfruit
seek-ge e
seek-ge z
----
a-b:{(#0,RANGEDEL)}
a-b:{(#0,RANGEDEL)}
b-c:{(#100,RANGEDEL) (#20,RANGEDEL) (#0,RANGEDEL)}
b-c:{(#100,RANGEDEL) (#20,RANGEDEL) (#0,RANGEDEL)}
c-d:{(#100,RANGEDEL) (#0,RANGEDEL)}
c-d:{(#100,RANGEDEL) (#0,RANGEDEL)}
d-e:{(#0,RANGEDEL)}
d-e:{(#0,RANGEDEL)}
.
.

iter
seek-lt z
seek-lt e
seek-lt dragonfruit
seek-lt d
----
d-e:{(#0,RANGEDEL)}
d-e:{(#0,RANGEDEL)}
d-e:{(#0,RANGEDEL)}
c-d:{(#100,RANGEDEL) (#0,RANGEDEL)}

iter
first
next
next
next
next
prev
prev
prev
prev
prev
----
a-b:{(#0,RANGEDEL)}
b-c:{(#100,RANGEDEL) (#20,RANGEDEL) (#0,RANGEDEL)}
c-d:{(#100,RANGEDEL) (#0,RANGEDEL)}
d-e:{(#0,RANGEDEL)}
.
d-e:{(#0,RANGEDEL)}
c-d:{(#100,RANGEDEL) (#0,RANGEDEL)}
b-c:{(#100,RANGEDEL) (#20,RANGEDEL) (#0,RANGEDEL)}
a-b:{(#0,RANGEDEL)}
.

iter
last
prev
prev
prev
prev
next
next
next
next
next
----
d-e:{(#0,RANGEDEL)}
c-d:{(#100,RANGEDEL) (#0,RANGEDEL)}
b-c:{(#100,RANGEDEL) (#20,RANGEDEL) (#0,RANGEDEL)}
a-b:{(#0,RANGEDEL)}
.
a-b:{(#0,RANGEDEL)}
b-c:{(#100,RANGEDEL) (#20,RANGEDEL) (#0,RANGEDEL)}
c-d:{(#100,RANGEDEL) (#0,RANGEDEL)}
d-e:{(#0,RANGEDEL)}
.

init
----
size=1:
0: user keys:      bytes: 0 rows set; 0 bytes in data
1: start indices:  uint32: 0 rows
2: trailers:       uint64: 0 rows
3: suffixes:       bytes: 0 rows set; 0 bytes in data
4: values:         bytes: 0 rows set; 0 bytes in data

add
b-d:{(#4,RANGEKEYSET,@3,coconut)}
----
size=86:
0: user keys:      bytes: 2 rows set; 2 bytes in data
1: start indices:  uint32: 2 rows
2: trailers:       uint64: 1 rows
3: suffixes:       bytes: 1 rows set; 2 bytes in data
4: values:         bytes: 1 rows set; 7 bytes in data

finish
----
# keyspan block header
00-04: x 02000000         # user key count: 2
# columnar block header
04-05: x 01               # version 1
05-07: x 0500             # 5 columns
07-11: x 01000000         # 1 rows
# column 0
11-12: b 00000110         # bytes
12-16: x 24000000         # page start 36
# column 1
16-17: b 00000100         # uint32
17-21: x 2e000000         # page start 46
# column 2
21-22: b 00000101         # uint64
22-26: x 35000000         # page start 53
# column 3
26-27: b 00000110         # bytes
27-31: x 3e000000         # page start 62
# column 4
31-32: b 00000110         # bytes
32-36: x 47000000         # page start 71
# data for column 0
# rawbytes
# offsets table
36-37: x 02               # delta encoding: delta8
37-41: x 00000000         # 32-bit constant: 0
41-42: x 00               # data[0] = 0 [44 overall]
42-43: x 01               # data[1] = 1 [45 overall]
43-44: x 02               # data[2] = 2 [46 overall]
# data
44-45: x 62               # data[0]: b
45-46: x 64               # data[1]: d
# data for column 1
46-47: x 02               # delta encoding: delta8
47-51: x 00000000         # 32-bit constant: 0
51-52: x 00               # data[0] = 0
52-53: x 01               # data[1] = 1
# data for column 2
53-54: x 01               # delta encoding: const
54-62: x 1504000000000000 # 64-bit constant: 1045
# data for column 3
# rawbytes
# offsets table
62-63: x 02               # delta encoding: delta8
63-67: x 00000000         # 32-bit constant: 0
67-68: x 00               # data[0] = 0 [69 overall]
68-69: x 02               # data[1] = 2 [71 overall]
# data
69-71: x 4033             # data[0]: @3
# data for column 4
# rawbytes
# offsets table
71-72: x 02               # delta encoding: delta8
72-76: x 00000000         # 32-bit constant: 0
76-77: x 00               # data[0] = 0 [78 overall]
77-78: x 07               # data[1] = 7 [85 overall]
# data
78-85: x 636f636f6e7574   # data[0]: coconut

iter
seek-ge a
next
prev
prev
next
----
b-d:{(#4,RANGEKEYSET,@3,coconut)}
.
b-d:{(#4,RANGEKEYSET,@3,coconut)}
.
b-d:{(#4,RANGEKEYSET,@3,coconut)}

reset
----
size=1:
0: user keys:      bytes: 0 rows set; 0 bytes in data
1: start indices:  uint32: 0 rows
2: trailers:       uint64: 0 rows
3: suffixes:       bytes: 0 rows set; 0 bytes in data
4: values:         bytes: 0 rows set; 0 bytes in data

add
b-d:{(#4,RANGEKEYSET,@3,coconut)}
e-g:{(#5,RANGEKEYSET,@1,tree)}
----
size=104:
0: user keys:      bytes: 4 rows set; 4 bytes in data
1: start indices:  uint32: 4 rows
2: trailers:       uint64: 2 rows
3: suffixes:       bytes: 2 rows set; 4 bytes in data
4: values:         bytes: 2 rows set; 11 bytes in data

finish
----
# keyspan block header
000-004: x 04000000         # user key count: 4
# columnar block header
004-005: x 01               # version 1
005-007: x 0500             # 5 columns
007-011: x 02000000         # 2 rows
# column 0
011-012: b 00000110         # bytes
012-016: x 24000000         # page start 36
# column 1
016-017: b 00000100         # uint32
017-021: x 32000000         # page start 50
# column 2
021-022: b 00000101         # uint64
022-026: x 3b000000         # page start 59
# column 3
026-027: b 00000110         # bytes
027-031: x 48000000         # page start 72
# column 4
031-032: b 00000110         # bytes
032-036: x 54000000         # page start 84
# data for column 0
# rawbytes
# offsets table
036-037: x 02               # delta encoding: delta8
037-041: x 00000000         # 32-bit constant: 0
041-042: x 00               # data[0] = 0 [46 overall]
042-043: x 01               # data[1] = 1 [47 overall]
043-044: x 02               # data[2] = 2 [48 overall]
044-045: x 03               # data[3] = 3 [49 overall]
045-046: x 04               # data[4] = 4 [50 overall]
# data
046-047: x 62               # data[0]: b
047-048: x 64               # data[1]: d
048-049: x 65               # data[2]: e
049-050: x 67               # data[3]: g
# data for column 1
050-051: x 02               # delta encoding: delta8
051-055: x 00000000         # 32-bit constant: 0
055-056: x 00               # data[0] = 0
056-057: x 01               # data[1] = 1
057-058: x 01               # data[2] = 1
058-059: x 02               # data[3] = 2
# data for column 2
059-060: x 03               # delta encoding: delta16
060-068: x 1504000000000000 # 64-bit constant: 1045
068-070: x 0000             # data[0] = 0 + 1045 = 1045
070-072: x 0001             # data[1] = 256 + 1045 = 1301
# data for column 3
# rawbytes
# offsets table
072-073: x 02               # delta encoding: delta8
073-077: x 00000000         # 32-bit constant: 0
077-078: x 00               # data[0] = 0 [80 overall]
078-079: x 02               # data[1] = 2 [82 overall]
079-080: x 04               # data[2] = 4 [84 overall]
# data
080-082: x 4033             # data[0]: @3
082-084: x 4031             # data[1]: @1
# data for column 4
# rawbytes
# offsets table
084-085: x 02               # delta encoding: delta8
085-089: x 00000000         # 32-bit constant: 0
089-090: x 00               # data[0] = 0 [92 overall]
090-091: x 07               # data[1] = 7 [99 overall]
091-092: x 0b               # data[2] = 11 [103 overall]
# data
092-099: x 636f636f6e7574   # data[0]: coconut
099-103: x 74726565         # data[1]: tree

iter
seek-ge dog
seek-ge g
seek-ge z
----
e-g:{(#5,RANGEKEYSET,@1,tree)}
.
.

iter
seek-lt dog
seek-lt g
seek-lt z
seek-lt e
----
e-g:{(#5,RANGEKEYSET,@1,tree)}
e-g:{(#5,RANGEKEYSET,@1,tree)}
e-g:{(#5,RANGEKEYSET,@1,tree)}
b-d:{(#4,RANGEKEYSET,@3,coconut)}
