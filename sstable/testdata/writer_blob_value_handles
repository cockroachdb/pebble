build table-format=(Pebble,v6)
a@2.SET.1:blobInlineHandle(0, blk1, 10, 100, 0x07)
b@5.SET.7:blobInlineHandle(0, blk2, 110, 200, 0x07)
b@4.DEL.3:
b@3.SET.2:blobInlineHandle(1, blk0, 0, 200, 0x07)
b@2.SET.1:blobInlineHandle(1, blk1, 294, 103, 0x07)
----
blob-separated-values: num-values 4

layout
----
sstable
 ├── data  offset: 0  length: 133
 │    ├── data block header
 │    │    ├── columnar block header
 │    │    │    ├── 000-004: x 03000000 # maximum key length: 3
 │    │    │    ├── 004-005: x 01       # version 1
 │    │    │    ├── 005-007: x 0700     # 7 columns
 │    │    │    ├── 007-011: x 05000000 # 5 rows
 │    │    │    ├── 011-012: b 00000100 # col 0: prefixbytes
 │    │    │    ├── 012-016: x 2e000000 # col 0: page start 46
 │    │    │    ├── 016-017: b 00000011 # col 1: bytes
 │    │    │    ├── 017-021: x 39000000 # col 1: page start 57
 │    │    │    ├── 021-022: b 00000010 # col 2: uint
 │    │    │    ├── 022-026: x 4a000000 # col 2: page start 74
 │    │    │    ├── 026-027: b 00000001 # col 3: bool
 │    │    │    ├── 027-031: x 56000000 # col 3: page start 86
 │    │    │    ├── 031-032: b 00000011 # col 4: bytes
 │    │    │    ├── 032-036: x 68000000 # col 4: page start 104
 │    │    │    ├── 036-037: b 00000001 # col 5: bool
 │    │    │    ├── 037-041: x 82000000 # col 5: page start 130
 │    │    │    ├── 041-042: b 00000001 # col 6: bool
 │    │    │    └── 042-046: x 83000000 # col 6: page start 131
 │    │    ├── data for column 0 (prefixbytes)
 │    │    │    ├── 046-047: x 04 # bundle size: 16
 │    │    │    ├── offsets table
 │    │    │    │    ├── 047-048: x 01 # encoding: 1b
 │    │    │    │    ├── 048-049: x 00 # data[0] = 0 [55 overall]
 │    │    │    │    ├── 049-050: x 00 # data[1] = 0 [55 overall]
 │    │    │    │    ├── 050-051: x 01 # data[2] = 1 [56 overall]
 │    │    │    │    ├── 051-052: x 02 # data[3] = 2 [57 overall]
 │    │    │    │    ├── 052-053: x 02 # data[4] = 2 [57 overall]
 │    │    │    │    ├── 053-054: x 02 # data[5] = 2 [57 overall]
 │    │    │    │    └── 054-055: x 02 # data[6] = 2 [57 overall]
 │    │    │    └── data
 │    │    │         ├── 055-055: x    # data[00]:  (block prefix)
 │    │    │         ├── 055-055: x    # data[01]:  (bundle prefix)
 │    │    │         ├── 055-056: x 61 # data[02]: a
 │    │    │         ├── 056-057: x 62 # data[03]: b
 │    │    │         ├── 057-057: x    # data[04]: .
 │    │    │         ├── 057-057: x    # data[05]: .
 │    │    │         └── 057-057: x    # data[06]: .
 │    │    ├── data for column 1 (bytes)
 │    │    │    ├── offsets table
 │    │    │    │    ├── 057-058: x 01 # encoding: 1b
 │    │    │    │    ├── 058-059: x 00 # data[0] = 0 [64 overall]
 │    │    │    │    ├── 059-060: x 02 # data[1] = 2 [66 overall]
 │    │    │    │    ├── 060-061: x 04 # data[2] = 4 [68 overall]
 │    │    │    │    ├── 061-062: x 06 # data[3] = 6 [70 overall]
 │    │    │    │    ├── 062-063: x 08 # data[4] = 8 [72 overall]
 │    │    │    │    └── 063-064: x 0a # data[5] = 10 [74 overall]
 │    │    │    └── data
 │    │    │         ├── 064-066: x 4032 # data[0]: @2
 │    │    │         ├── 066-068: x 4035 # data[1]: @5
 │    │    │         ├── 068-070: x 4034 # data[2]: @4
 │    │    │         ├── 070-072: x 4033 # data[3]: @3
 │    │    │         └── 072-074: x 4032 # data[4]: @2
 │    │    ├── data for column 2 (uint)
 │    │    │    ├── 074-075: x 02   # encoding: 2b
 │    │    │    ├── 075-076: x 00   # padding (aligning to 16-bit boundary)
 │    │    │    ├── 076-078: x 0101 # data[0] = 257
 │    │    │    ├── 078-080: x 0107 # data[1] = 1793
 │    │    │    ├── 080-082: x 0003 # data[2] = 768
 │    │    │    ├── 082-084: x 0102 # data[3] = 513
 │    │    │    └── 084-086: x 0101 # data[4] = 257
 │    │    ├── data for column 3 (bool)
 │    │    │    ├── 086-087: x 00                                                               # default bitmap encoding
 │    │    │    ├── 087-088: x 00                                                               # padding to align to 64-bit boundary
 │    │    │    ├── 088-096: b 0000001100000000000000000000000000000000000000000000000000000000 # bitmap word 0
 │    │    │    └── 096-104: b 0000000100000000000000000000000000000000000000000000000000000000 # bitmap summary word 0-63
 │    │    ├── data for column 4 (bytes)
 │    │    │    ├── offsets table
 │    │    │    │    ├── 104-105: x 01 # encoding: 1b
 │    │    │    │    ├── 105-106: x 00 # data[0] = 0 [111 overall]
 │    │    │    │    ├── 106-107: x 04 # data[1] = 4 [115 overall]
 │    │    │    │    ├── 107-108: x 09 # data[2] = 9 [120 overall]
 │    │    │    │    ├── 108-109: x 09 # data[3] = 9 [120 overall]
 │    │    │    │    ├── 109-110: x 0e # data[4] = 14 [125 overall]
 │    │    │    │    └── 110-111: x 13 # data[5] = 19 [130 overall]
 │    │    │    └── data
 │    │    │         ├── 111-115: x 0064010a   # data[0]: "\x00d\x01\n"
 │    │    │         ├── 115-120: x 00c801026e # data[1]: "\x00\xc8\x01\x02n"
 │    │    │         ├── 120-120: x            # data[2]:
 │    │    │         ├── 120-125: x 01c8010000 # data[3]: "\x01\xc8\x01\x00\x00"
 │    │    │         └── 125-130: x 016701a602 # data[4]: "\x01g\x01\xa6\x02"
 │    │    ├── data for column 5 (bool)
 │    │    │    └── 130-131: x 01 # zero bitmap encoding
 │    │    ├── data for column 6 (bool)
 │    │    │    └── 131-132: x 01 # zero bitmap encoding
 │    │    └── 132-133: x 00 # block padding byte
 │    ├── a@2#1,SET:hex:0064010a
 │    ├── b@5#7,SET:hex:00c801026e
 │    ├── b@4#3,DEL:
 │    ├── b@3#2,SET:hex:01c8010000
 │    ├── b@2#1,SET:hex:016701a602
 │    └── trailer [compression=none checksum=0x8f109d09]
 ├── index  offset: 138  length: 36
 │    ├── 00000    block:0/133
 │    │   
 │    └── trailer [compression=none checksum=0x863e7ff6]
 ├── properties  offset: 179  length: 570
 │    ├── 00000    obsolete-key (16) [restart]
 │    ├── 00016    pebble.colblk.schema (68)
 │    ├── 00084    pebble.num.values.in.blob-files (28)
 │    ├── 00112    pebble.raw.point-tombstone.key.size (32)
 │    ├── 00144    rocksdb.block.based.table.index.type (43)
 │    ├── 00187    rocksdb.comparator (37)
 │    ├── 00224    rocksdb.compression (16)
 │    ├── 00240    rocksdb.compression_options (106)
 │    ├── 00346    rocksdb.data.size (14)
 │    ├── 00360    rocksdb.deleted.keys (15)
 │    ├── 00375    rocksdb.filter.size (15)
 │    ├── 00390    rocksdb.index.size (14)
 │    ├── 00404    rocksdb.merge.operands (18)
 │    ├── 00422    rocksdb.merge.operator (24)
 │    ├── 00446    rocksdb.num.data.blocks (19)
 │    ├── 00465    rocksdb.num.entries (11)
 │    ├── 00476    rocksdb.num.range-deletions (19)
 │    ├── 00495    rocksdb.property.collectors (36)
 │    ├── 00531    rocksdb.raw.key.size (16)
 │    ├── 00547    rocksdb.raw.value.size (15)
 │    ├── restart points
 │    │    └── 00562 [restart 0]
 │    └── trailer [compression=none checksum=0x5aee2759]
 ├── meta-index  offset: 754  length: 33
 │    ├── 0000    rocksdb.properties block:179/570 [restart]
 │    ├── restart points
 │    │    └── 00025 [restart 0]
 │    └── trailer [compression=none checksum=0x336f39a9]
 └── footer  offset: 792  length: 57
      ├── 000  checksum type: crc32c
      ├── 001  meta: offset=754, length=33
      ├── 004  index: offset=138, length=36
      ├── 041  footer checksum: 0x7c352f7a
      ├── 045  version: 6
      └── 049  magic number: 0xf09faab3f09faab3

# TODO(jackson): Test iteration over the blob-separated values when that's
# supported.
