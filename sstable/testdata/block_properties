# The following collectors are available:
# - value-first - uses the first character of the value to construct an interval
# - value-last - uses the last character of the value to construct an interval
# - suffix - constructs an interval from the '@timestamp' suffix of each key
# - suffix-point-keys-only - same as "suffix", but only applies to point keys
# - suffix-range-keys-only - same as "suffix", but only applies to range keys
# - nil-points-and-ranges - a trivial collector with neither a point nor range collector

# Single collector.

build collectors=(value-first)
a.SET.1:10
b.SET.2:20
c.SET.3:30
----
point:    [a#1,1,c#3,1]
rangedel: [#0,0,#0,0]
rangekey: [#0,0,#0,0]
seqnums:  [1,3]

# collectors returns the collectors used when writing the table, keyed by the
# shortID of the collector.
collectors
----
0: value-first

# table-props returns the table-level properties, keyed by the shortID.
table-props
----
0: [1, 4)

# block-props returns the block-level properties. For each block, the separator
# is printed, along with the properties for the block, keyed by the shortID.
block-props
----
d#72057594037927935,17:
  0: [1, 4)

# Multiple collectors.

build collectors=(value-first,value-last)
a.SET.1:17
b.SET.2:29
c.SET.3:38
----
point:    [a#1,1,c#3,1]
rangedel: [#0,0,#0,0]
rangekey: [#0,0,#0,0]
seqnums:  [1,3]

collectors
----
0: value-first
1: value-last

table-props
----
0: [1, 4)
1: [7, 10)

block-props
----
d#72057594037927935,17:
  0: [1, 4)
  1: [7, 10)

# Reduce the block size to a value such that each block has at most two KV
# pairs.

build block-size=25 collectors=(value-first,value-last)
a.SET.1:15
b.SET.2:86
c.SET.3:72
d.SET.4:21
e.SET.5:47
f.SET.6:54
g.SET.7:63
h.SET.8:38
----
point:    [a#1,1,h#8,1]
rangedel: [#0,0,#0,0]
rangekey: [#0,0,#0,0]
seqnums:  [1,8]

collectors
----
0: value-first
1: value-last

table-props
----
0: [1, 9)
1: [1, 9)

block-props
----
b#2,1:
  0: [1, 9)
  1: [5, 7)
d#4,1:
  0: [2, 8)
  1: [1, 3)
f#6,1:
  0: [4, 6)
  1: [4, 8)
i#72057594037927935,17:
  0: [3, 7)
  1: [3, 9)

# Range keys contribute to the table-level property but do not affect point key
# data blocks.

build collectors=(suffix)
a@5.SET.1:foo
b@10.SET.2:bar
c@15.SET.3:baz
d@10.RANGEKEYSET.4: e@15 [(@20=foo)]
e@15.RANGEKEYUNSET.5: f@20 [@25]
f@20.RANGEKEYDEL.6: z@25
----
point:    [a@5#1,1,c@15#3,1]
rangedel: [#0,0,#0,0]
rangekey: [d@10#4,21,z@25#72057594037927935,19]
seqnums:  [1,6]

collectors
----
0: suffix

block-props
----
d#72057594037927935,17:
  0: [5, 16)

table-props
----
0: [5, 26)

# Same as the above, but only collect point key properties.

build collectors=(suffix-point-keys-only)
a@5.SET.1:foo
b@10.SET.2:bar
c@15.SET.3:baz
d@10.RANGEKEYSET.4: e@15 [(@20=foo)]
e@15.RANGEKEYUNSET.5: f@20 [@25]
f@20.RANGEKEYDEL.6: z@25
----
point:    [a@5#1,1,c@15#3,1]
rangedel: [#0,0,#0,0]
rangekey: [d@10#4,21,z@25#72057594037927935,19]
seqnums:  [1,6]

collectors
----
0: suffix-point-keys-only

block-props
----
d#72057594037927935,17:
  0: [5, 16)

table-props
----
0: [5, 16)

# Same as the above, but only collect range key properties.

build collectors=(suffix-range-keys-only)
a@5.SET.1:foo
b@10.SET.2:bar
c@15.SET.3:baz
d@10.RANGEKEYSET.4: e@15 [(@20=foo)]
e@15.RANGEKEYUNSET.5: f@20 [@25]
f@20.RANGEKEYDEL.6: z@25
----
point:    [a@5#1,1,c@15#3,1]
rangedel: [#0,0,#0,0]
rangekey: [d@10#4,21,z@25#72057594037927935,19]
seqnums:  [1,6]

collectors
----
0: suffix-range-keys-only

block-props
----
d#72057594037927935,17:

table-props
----
0: [20, 26)

# Create a table with multiple data blocks and a range key block. Two block
# property collectors are used, one for range keys and one for point keys, each
# acting independently.

build block-size=1 collectors=(suffix-point-keys-only,suffix-range-keys-only)
a@5.SET.1:foo
b@10.SET.2:bar
c@15.SET.3:baz
d@10.RANGEKEYSET.4: e@15 [(@20=foo)]
e@15.RANGEKEYUNSET.5: f@20 [@25]
f@20.RANGEKEYDEL.6: z@25
----
point:    [a@5#1,1,c@15#3,1]
rangedel: [#0,0,#0,0]
rangekey: [d@10#4,21,z@25#72057594037927935,19]
seqnums:  [1,6]

collectors
----
0: suffix-point-keys-only
1: suffix-range-keys-only

block-props
----
b#72057594037927935,17:
  0: [5, 6)
c#72057594037927935,17:
  0: [10, 11)
d#72057594037927935,17:
  0: [15, 16)

table-props
----
0: [5, 16)
1: [20, 26)

# Partially matching point key filter.

filter point-filter=(suffix-point-keys-only,10,20)
----
points: true, blocks=[1,2]
ranges: true (no filters provided)

# Non-matching point key filter.

filter point-filter=(suffix-point-keys-only,100,200)
----
points: false
ranges: true (no filters provided)

# Partially matching range key filter.

filter range-filter=(suffix-range-keys-only,10,25)
----
points: true (no filters provided)
ranges: true

# Non-matching range key filter.

filter range-filter=(suffix-range-keys-only,100,200)
----
points: true (no filters provided)
ranges: false

# Matching point and range key filter.

filter point-filter=(suffix-point-keys-only,10,20) range-filter=(suffix-range-keys-only,10,25)
----
points: true, blocks=[1,2]
ranges: true

# Matching point key filter and non-matching range key filter.

filter point-filter=(suffix-point-keys-only,10,20) range-filter=(suffix-range-keys-only,100,200)
----
points: true, blocks=[1,2]
ranges: false

# Non-matching point key filter and matching range key filter.

filter point-filter=(suffix-point-keys-only,100,200) range-filter=(suffix-range-keys-only,10,25)
----
points: false
ranges: true

# Non-matching point and range key filter.

filter point-filter=(suffix-point-keys-only,100,200) range-filter=(suffix-range-keys-only,100,100)
----
points: false
ranges: false

# Providing a nil collector for both points and ranges is a user-error.

build collectors=(nil-points-and-ranges)
----
sstable: at least one interval collector must be provided
