// Copyright 2024 The LevelDB-Go and Pebble Authors. All rights reserved. Use
// of this source code is governed by a BSD-style license that can be found in
// the LICENSE file.

package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"os"
	"strings"
)

var methods = map[string]struct{}{
	"First":        {},
	"Last":         {},
	"SeekGE":       {},
	"SeekLT":       {},
	"Prev":         {},
	"Next":         {},
	"NextPrefix":   {},
	"nextPrefixV3": {},
	"readEntry":    {},
	"readFirstKey": {},
}

func rename(methodName string) string {
	if methodName[0] >= 'A' && methodName[0] <= 'Z' {
		return "Streamlined" + methodName
	}
	return "streamlined" + strings.ToUpper(methodName[:1]) + methodName[1:]
}

func main() {
	// Read the source file.
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, "block_iter.go", nil, parser.ParseComments|parser.SkipObjectResolution)
	if err != nil {
		panic(err)
	}

	// Rename streamlinedBlockIter ot streamlinedBlockIterTrue.
	ast.Inspect(node, func(n ast.Node) bool {
		switch n := n.(type) {
		case *ast.Ident:
			// Rename uses of the constant.
			if n.Name == "streamlinedBlockIter" {
				// Kind of hacky, since true would not be an identifier; but it prints
				// out correctly.
				n.Name = "true"
			}
		case *ast.FuncDecl:
			// Rename method declarations.
			if _, ok := methods[n.Name.Name]; ok {
				n.Name.Name = rename(n.Name.Name)
			}
		case *ast.CallExpr:
			// Rename method calls.
			if s, ok := n.Fun.(*ast.SelectorExpr); ok {
				if _, ok := methods[s.Sel.Name]; ok {
					s.Sel.Name = rename(s.Sel.Name)
				}
			}
		}
		return true
	})

	var buf bytes.Buffer
	fmt.Fprintf(&buf,
		`// Code generated by block-iter-codegen; DO NOT EDIT.

package sstable

import (
	"bytes"
	"encoding/binary"
	"slices"
	"unsafe"

	"github.com/cockroachdb/errors"
	"github.com/cockroachdb/pebble/internal/base"
	"github.com/cockroachdb/pebble/internal/invariants"
	"github.com/cockroachdb/pebble/internal/manual"
)
`)

	ast.Inspect(node, func(n ast.Node) bool {
		if f, ok := n.(*ast.FuncDecl); ok {
			if strings.HasPrefix(strings.ToLower(f.Name.Name), "streamlined") {
				fmt.Fprintln(&buf)
				printer.Fprint(&buf, fset, n)
				fmt.Fprintln(&buf)
			}
		}
		return true
	})
	if err := os.WriteFile("block_iter_streamlined.gen.go", buf.Bytes(), 0666); err != nil {
		panic(err)
	}
}
