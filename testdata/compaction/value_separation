# Test a simple sequence of flushes and compactions where all values are
# separated.

define value-separation=(true, 0, 3)
----

batch
set a 1
set b 2
----

compact a-b
----
L6:
  000005:[a#10,SET-b#11,SET] seqnums:[10-11] points:[a#10,SET-b#11,SET] size:766 blobrefs:[(000006: 2); depth:1]
Blob files:
  000006: 58 physical bytes, 2 value bytes

batch
set c 3
set d 4
----

compact c-d
----
L6:
  000005:[a#10,SET-b#11,SET] seqnums:[10-11] points:[a#10,SET-b#11,SET] size:766 blobrefs:[(000006: 2); depth:1]
  000008:[c#12,SET-d#13,SET] seqnums:[12-13] points:[c#12,SET-d#13,SET] size:766 blobrefs:[(000009: 2); depth:1]
Blob files:
  000006: 58 physical bytes, 2 value bytes
  000009: 58 physical bytes, 2 value bytes

batch
set b 5
set c 6
----

compact a-d
----
L6:
  000013:[a#0,SET-d#0,SET] seqnums:[0-0] points:[a#0,SET-d#0,SET] size:793 blobrefs:[(000006: 1), (000012: 2), (000009: 1); depth:2]
Blob files:
  000006: 58 physical bytes, 2 value bytes
  000009: 58 physical bytes, 2 value bytes
  000012: 58 physical bytes, 2 value bytes

batch
del-range a e
----

compact a-d
----

# Set up a scenario where there's a L6 sstable with a blob reference depth of 3,
# and the value separation policy is configured to limit the blob reference
# depth to 3.

define verbose value-separation=(true, 3, 3)
L6 blob-depth=3
  a.SET.0:a
  b.SET.0:blob{fileNum=100002 value=bar}
  f.SET.0:blob{fileNum=100003 value=foo}
  k.SET.0:k
  z.SET.0:blob{fileNum=100004 value=zoo}
----
L6:
  000004:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:795 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]

batch
set d hello
set e world
----

# Flush should write flushed values to a new blob file.

flush
----
L0.0:
  000006:[d#10,SET-e#11,SET] seqnums:[10-11] points:[d#10,SET-e#11,SET] size:765 blobrefs:[(000007: 10); depth:1]
L6:
  000004:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:795 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]
Blob files:
  000007: 66 physical bytes, 10 value bytes
  100002: 59 physical bytes, 3 value bytes
  100003: 59 physical bytes, 3 value bytes
  100004: 59 physical bytes, 3 value bytes

# Compacting these two sstables should result in writing the values to a new
# blob file and the removal of the no longer referenced blob files.

compact a-z
----
L6:
  000008:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:815 blobrefs:[(000009: 19); depth:1]
Blob files:
  000009: 75 physical bytes, 19 value bytes

# Ensure we can read the separated values by iterating over the database.

iter
first
next
next
next
next
next
next
----
a: (a, .)
b: (bar, .)
d: (hello, .)
e: (world, .)
f: (foo, .)
k: (k, .)
z: (zoo, .)

# Set the minimum size for a separated value to 5.

define value-separation=(true, 5, 3)
----

batch
set bar bar
set foo foo
set fuzz fuzz
set yaya yaya
----

# The flush should not write a blob file because none of the keys have a
# sufficiently long value to be separated.

flush
----
L0.0:
  000005:[bar#10,SET-yaya#13,SET] seqnums:[10-13] points:[bar#10,SET-yaya#13,SET] size:768

batch
set a a
set b b
set h hello
set w world
----

# This flush *should* write a blob file, containing 2 values: "hello" and
# "world" totalling 10 bytes of logical values.

flush
----
L0.1:
  000007:[a#14,SET-w#17,SET] seqnums:[14-17] points:[a#14,SET-w#17,SET] size:811 blobrefs:[(000008: 10); depth:1]
L0.0:
  000005:[bar#10,SET-yaya#13,SET] seqnums:[10-13] points:[bar#10,SET-yaya#13,SET] size:768
Blob files:
  000008: 66 physical bytes, 10 value bytes

get
a
b
h
w
----
a:a
b:b
h:hello
w:world

# Configure the database to require keys in the range [a,m) to be in-place.

define required-in-place=(a,m) value-separation=(true,1,3)
----

batch
set a apple
set b banana
set c coconut
set d dragonfruit
set m mango
----

# The flush should write two sst files, and only "mango" should be separated. This
# should be reflected in the 5-byte value bytes of the blob file and the table's
# blob reference value size.

flush
----
L0.0:
  000005:[a#10,SET-d#13,SET] seqnums:[10-13] points:[a#10,SET-d#13,SET] size:798
  000006:[m#14,SET-m#14,SET] seqnums:[14-14] points:[m#14,SET-m#14,SET] size:762 blobrefs:[(000007: 5); depth:1]
Blob files:
  000007: 61 physical bytes, 5 value bytes

# Construct an initial state with two overlapping files in L0, both with blob
# references. Because these files overlap and are in separate sublevels, a
# compaction that preserves blob references should sum their depths.

define value-separation=(true,1,5) l0-compaction-threshold=2
L0 blob-depth=1
  a.SET.9:a
  d.SET.9:blob{fileNum=100001 value=d}
L0 blob-depth=3
  a.SET.1:a
  b.SET.1:blob{fileNum=100002 value=bar}
  f.SET.1:blob{fileNum=100003 value=foo}
  k.SET.1:k
  z.SET.1:blob{fileNum=100004 value=zoo}
----
L0.1:
  000004:[a#9,SET-d#9,SET] seqnums:[9-9] points:[a#9,SET-d#9,SET] size:775 blobrefs:[(100001: 1); depth:1]
L0.0:
  000005:[a#1,SET-z#1,SET] seqnums:[1-1] points:[a#1,SET-z#1,SET] size:795 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]

compact a-z
----
L1:
  000006:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:819 blobrefs:[(100002: 3), (100001: 1), (100003: 3), (100004: 3); depth:4]
Blob files:
  100001: 57 physical bytes, 1 value bytes
  100002: 59 physical bytes, 3 value bytes
  100003: 59 physical bytes, 3 value bytes
  100004: 59 physical bytes, 3 value bytes

# Construct an initial state with two non-overlapping files in L0, both with
# blob references. Because these files do NOT overlap and are in the same
# sublevel, a compaction that preserves blob references should take the MAX of
# their depths.

define value-separation=(true,1,5) l0-compaction-threshold=2
L0 blob-depth=1
  a.SET.9:a
  d.SET.9:blob{fileNum=100001 value=d}
L0 blob-depth=3
  e.SET.1:a
  f.SET.1:blob{fileNum=100002 value=bar}
  g.SET.1:blob{fileNum=100003 value=foo}
  k.SET.1:k
  z.SET.1:blob{fileNum=100004 value=zoo}
----
L0.0:
  000004:[a#9,SET-d#9,SET] seqnums:[9-9] points:[a#9,SET-d#9,SET] size:775 blobrefs:[(100001: 1); depth:1]
  000005:[e#1,SET-z#1,SET] seqnums:[1-1] points:[e#1,SET-z#1,SET] size:795 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]

compact a-z
----
L1:
  000006:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:813 blobrefs:[(100001: 1), (100002: 3), (100003: 3), (100004: 3); depth:3]
Blob files:
  100001: 57 physical bytes, 1 value bytes
  100002: 59 physical bytes, 3 value bytes
  100003: 59 physical bytes, 3 value bytes
  100004: 59 physical bytes, 3 value bytes

define value-separation=(true,5,5) l0-compaction-threshold=1
----

# Test writing a non-trivial amount of data. With a key length of 4, we'll write
# 475254 keys each with a 64-byte value, totalling ~30MB of value data.

populate keylen=4 timestamps=(1) vallen=64
----
wrote 475254 keys

# Flush the memtable. The resulting L0 sstables should be relatively small, but
# when their sizes are summed with their corresponding blob files, the sum
# should be around the target file size of 2MB.

flush
----
L0.0:
  000005:[a@1#10,SET-blpb@1#26431,SET] seqnums:[10-26431] points:[a@1#10,SET-blpb@1#26431,SET] size:402940 blobrefs:[(000006: 1691008); depth:1]
  000007:[blpc@1#26432,SET-cxas@1#52758,SET] seqnums:[26432-52758] points:[blpc@1#26432,SET-cxas@1#52758,SET] size:408586 blobrefs:[(000008: 1684928); depth:1]
  000009:[cxat@1#52759,SET-eioh@1#79138,SET] seqnums:[52759-79138] points:[cxat@1#52759,SET-eioh@1#79138,SET] size:405712 blobrefs:[(000010: 1688320); depth:1]
  000011:[eioi@1#79139,SET-fudg@1#105555,SET] seqnums:[79139-105555] points:[eioi@1#79139,SET-fudg@1#105555,SET] size:403207 blobrefs:[(000012: 1690688); depth:1]
  000013:[fudh@1#105556,SET-hfow@1#131881,SET] seqnums:[105556-131881] points:[fudh@1#105556,SET-hfow@1#131881,SET] size:408676 blobrefs:[(000014: 1684864); depth:1]
  000015:[hfox@1#131882,SET-iqxw@1#158136,SET] seqnums:[131882-158136] points:[hfox@1#131882,SET-iqxw@1#158136,SET] size:413729 blobrefs:[(000016: 1680320); depth:1]
  000017:[iqxx@1#158137,SET-kclm@1#184518,SET] seqnums:[158137-184518] points:[iqxx@1#158137,SET-kclm@1#184518,SET] size:405586 blobrefs:[(000018: 1688448); depth:1]
  000019:[kcln@1#184519,SET-lnvf@1#210793,SET] seqnums:[184519-210793] points:[kcln@1#184519,SET-lnvf@1#210793,SET] size:412111 blobrefs:[(000020: 1681600); depth:1]
  000021:[lnvg@1#210794,SET-mzgl@1#237109,SET] seqnums:[210794-237109] points:[lnvg@1#210794,SET-mzgl@1#237109,SET] size:409827 blobrefs:[(000022: 1684224); depth:1]
  000023:[mzgm@1#237110,SET-okrw@1#263430,SET] seqnums:[237110-263430] points:[mzgm@1#237110,SET-okrw@1#263430,SET] size:409485 blobrefs:[(000024: 1684544); depth:1]
  000025:[okrx@1#263431,SET-pwem@1#289784,SET] seqnums:[263431-289784] points:[okrx@1#263431,SET-pwem@1#289784,SET] size:406675 blobrefs:[(000026: 1686656); depth:1]
  000027:[pwen@1#289785,SET-rhsi@1#316171,SET] seqnums:[289785-316171] points:[pwen@1#289785,SET-rhsi@1#316171,SET] size:405265 blobrefs:[(000028: 1688768); depth:1]
  000029:[rhsj@1#316172,SET-steo@1#342514,SET] seqnums:[316172-342514] points:[rhsj@1#316172,SET-steo@1#342514,SET] size:407571 blobrefs:[(000030: 1685952); depth:1]
  000031:[step@1#342515,SET-ueqq@1#368853,SET] seqnums:[342515-368853] points:[step@1#342515,SET-ueqq@1#368853,SET] size:408382 blobrefs:[(000032: 1685696); depth:1]
  000033:[ueqr@1#368854,SET-vqbp@1#395162,SET] seqnums:[368854-395162] points:[ueqr@1#368854,SET-vqbp@1#395162,SET] size:409894 blobrefs:[(000034: 1683776); depth:1]
  000035:[vqbq@1#395163,SET-xbnl@1#421495,SET] seqnums:[395163-421495] points:[vqbq@1#395163,SET-xbnl@1#421495,SET] size:408224 blobrefs:[(000036: 1685312); depth:1]
  000037:[xbnm@1#421496,SET-ynac@1#447850,SET] seqnums:[421496-447850] points:[xbnm@1#421496,SET-ynac@1#447850,SET] size:407352 blobrefs:[(000038: 1686720); depth:1]
  000039:[ynad@1#447851,SET-zylq@1#474173,SET] seqnums:[447851-474173] points:[ynad@1#447851,SET-zylq@1#474173,SET] size:409408 blobrefs:[(000040: 1684672); depth:1]
  000041:[zylr@1#474174,SET-zzzz@1#475263,SET] seqnums:[474174-475263] points:[zylr@1#474174,SET-zzzz@1#475263,SET] size:17514 blobrefs:[(000042: 69760); depth:1]
Blob files:
  000006: 1694781 physical bytes, 1691008 value bytes
  000008: 1688692 physical bytes, 1684928 value bytes
  000010: 1692093 physical bytes, 1688320 value bytes
  000012: 1694461 physical bytes, 1690688 value bytes
  000014: 1688628 physical bytes, 1684864 value bytes
  000016: 1684075 physical bytes, 1680320 value bytes
  000018: 1692221 physical bytes, 1688448 value bytes
  000020: 1685355 physical bytes, 1681600 value bytes
  000022: 1687988 physical bytes, 1684224 value bytes
  000024: 1688308 physical bytes, 1684544 value bytes
  000026: 1690420 physical bytes, 1686656 value bytes
  000028: 1692541 physical bytes, 1688768 value bytes
  000030: 1689716 physical bytes, 1685952 value bytes
  000032: 1689460 physical bytes, 1685696 value bytes
  000034: 1687540 physical bytes, 1683776 value bytes
  000036: 1689076 physical bytes, 1685312 value bytes
  000038: 1690484 physical bytes, 1686720 value bytes
  000040: 1688436 physical bytes, 1684672 value bytes
  000042: 69978 physical bytes, 69760 value bytes

# Schedule automatic compactions. These compactions should write data to L6. The
# resulting sstables will reference multiple blob files but maintain a blob
# reference depth of 1 because L6 has no referenced blob files and all the L0
# input tables have a reference depth of 1.

auto-compact
----
L6:
  000044:[a@1#0,SET-cznh@1#0,SET] seqnums:[0-0] points:[a@1#0,SET-cznh@1#0,SET] size:707281 blobrefs:[(000006: 1691008), (000008: 1684928), (000010: 111744); depth:1]
  000045:[czni@1#0,SET-fyyl@1#0,SET] seqnums:[0-0] points:[czni@1#0,SET-fyyl@1#0,SET] size:711117 blobrefs:[(000010: 1576576), (000012: 1690688), (000014: 216576); depth:1]
  000046:[fyym@1#0,SET-iyii@1#0,SET] seqnums:[0-0] points:[fyym@1#0,SET-iyii@1#0,SET] size:713014 blobrefs:[(000014: 1468288), (000016: 1680320), (000018: 333120); depth:1]
  000047:[iyij@1#0,SET-lxpz@1#0,SET] seqnums:[0-0] points:[iyij@1#0,SET-lxpz@1#0,SET] size:717137 blobrefs:[(000018: 1355328), (000020: 1681600), (000022: 440832); depth:1]
  000048:[lxq@1#0,SET-oxbm@1#0,SET] seqnums:[0-0] points:[lxq@1#0,SET-oxbm@1#0,SET] size:709905 blobrefs:[(000022: 1243392), (000024: 1684544), (000026: 556608); depth:1]
  000049:[oxbn@1#0,SET-rwou@1#0,SET] seqnums:[0-0] points:[oxbn@1#0,SET-rwou@1#0,SET] size:707343 blobrefs:[(000026: 1130048), (000028: 1688768), (000030: 668736); depth:1]
  000050:[rwov@1#0,SET-uwap@1#0,SET] seqnums:[0-0] points:[rwov@1#0,SET-uwap@1#0,SET] size:709047 blobrefs:[(000030: 1017216), (000032: 1685696), (000034: 782144); depth:1]
  000051:[uwaq@1#0,SET-xvmq@1#0,SET] seqnums:[0-0] points:[uwaq@1#0,SET-xvmq@1#0,SET] size:709566 blobrefs:[(000034: 901632), (000036: 1685312), (000038: 898432); depth:1]
  000052:[xvmr@1#0,SET-zzzz@1#0,SET] seqnums:[0-0] points:[xvmr@1#0,SET-zzzz@1#0,SET] size:524953 blobrefs:[(000038: 788288), (000040: 1684672), (000042: 69760); depth:1]
Blob files:
  000006: 1694781 physical bytes, 1691008 value bytes
  000008: 1688692 physical bytes, 1684928 value bytes
  000010: 1692093 physical bytes, 1688320 value bytes
  000012: 1694461 physical bytes, 1690688 value bytes
  000014: 1688628 physical bytes, 1684864 value bytes
  000016: 1684075 physical bytes, 1680320 value bytes
  000018: 1692221 physical bytes, 1688448 value bytes
  000020: 1685355 physical bytes, 1681600 value bytes
  000022: 1687988 physical bytes, 1684224 value bytes
  000024: 1688308 physical bytes, 1684544 value bytes
  000026: 1690420 physical bytes, 1686656 value bytes
  000028: 1692541 physical bytes, 1688768 value bytes
  000030: 1689716 physical bytes, 1685952 value bytes
  000032: 1689460 physical bytes, 1685696 value bytes
  000034: 1687540 physical bytes, 1683776 value bytes
  000036: 1689076 physical bytes, 1685312 value bytes
  000038: 1690484 physical bytes, 1686720 value bytes
  000040: 1688436 physical bytes, 1684672 value bytes
  000042: 69978 physical bytes, 69760 value bytes


excise-dryrun b c
----
would excise 1 files.
  del-table:     L6 000044
  add-table:     L6 000053(000044):[a@1#0,SET-azzz@1#0,SET] seqnums:[0-0] points:[a@1#0,SET-azzz@1#0,SET] size:238596(707281) blobrefs:[(000006: 570449), (000008: 568397), (000010: 37696); depth:1]
  add-table:     L6 000054(000044):[c@1#0,SET-cznh@1#0,SET] seqnums:[0-0] points:[c@1#0,SET-cznh@1#0,SET] size:239142(707281) blobrefs:[(000006: 571754), (000008: 569698), (000010: 37782); depth:1]
  add-backing:   000044
