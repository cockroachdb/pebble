# Test a simple sequence of flushes and compactions where all values are
# separated.

define value-separation=(true, 0, 3)
----

batch
set a 1
set b 2
----

compact a-b
----
L6:
  000005:[a#10,SET-b#11,SET] seqnums:[10-11] points:[a#10,SET-b#11,SET] size:766 blobrefs:[(000006: 2); depth:1]
Blob files:
  000006: 48 physical bytes, 2 value bytes

batch
set c 3
set d 4
----

compact c-d
----
L6:
  000005:[a#10,SET-b#11,SET] seqnums:[10-11] points:[a#10,SET-b#11,SET] size:766 blobrefs:[(000006: 2); depth:1]
  000008:[c#12,SET-d#13,SET] seqnums:[12-13] points:[c#12,SET-d#13,SET] size:766 blobrefs:[(000009: 2); depth:1]
Blob files:
  000006: 48 physical bytes, 2 value bytes
  000009: 48 physical bytes, 2 value bytes

batch
set b 5
set c 6
----

compact a-d
----
L6:
  000013:[a#0,SET-d#0,SET] seqnums:[0-0] points:[a#0,SET-d#0,SET] size:793 blobrefs:[(000006: 1), (000012: 2), (000009: 1); depth:2]
Blob files:
  000006: 48 physical bytes, 2 value bytes
  000009: 48 physical bytes, 2 value bytes
  000012: 48 physical bytes, 2 value bytes

batch
del-range a e
----

compact a-d
----

# Set up a scenario where there's a L6 sstable with a blob reference depth of 3,
# and the value separation policy is configured to limit the blob reference
# depth to 3.

define verbose value-separation=(true, 3, 3)
L6 blob-depth=3
  a.SET.0:a
  b.SET.0:blob{fileNum=100002 value=bar}
  f.SET.0:blob{fileNum=100003 value=foo}
  k.SET.0:k
  z.SET.0:blob{fileNum=100004 value=zoo}
----
L6:
  000004:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:795 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]

batch
set d hello
set e world
----

# Flush should write flushed values to a new blob file.

flush
----
L0.0:
  000006:[d#10,SET-e#11,SET] seqnums:[10-11] points:[d#10,SET-e#11,SET] size:765 blobrefs:[(000007: 10); depth:1]
L6:
  000004:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:795 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]
Blob files:
  000007: 56 physical bytes, 10 value bytes
  100002: 49 physical bytes, 3 value bytes
  100003: 49 physical bytes, 3 value bytes
  100004: 49 physical bytes, 3 value bytes

# Compacting these two sstables should result in writing the values to a new
# blob file and the removal of the no longer referenced blob files.

compact a-z
----
L6:
  000008:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:815 blobrefs:[(000009: 19); depth:1]
Blob files:
  000009: 65 physical bytes, 19 value bytes

# Ensure we can read the separated values by iterating over the database.

iter
first
next
next
next
next
next
next
----
a: (a, .)
b: (bar, .)
d: (hello, .)
e: (world, .)
f: (foo, .)
k: (k, .)
z: (zoo, .)

# Set the minimum size for a separated value to 5.

define value-separation=(true, 5, 3)
----

batch
set bar bar
set foo foo
set fuzz fuzz
set yaya yaya
----

# The flush should not write a blob file because none of the keys have a
# sufficiently long value to be separated.

flush
----
L0.0:
  000005:[bar#10,SET-yaya#13,SET] seqnums:[10-13] points:[bar#10,SET-yaya#13,SET] size:768

batch
set a a
set b b
set h hello
set w world
----

# This flush *should* write a blob file, containing 2 values: "hello" and
# "world" totalling 10 bytes of logical values.

flush
----
L0.1:
  000007:[a#14,SET-w#17,SET] seqnums:[14-17] points:[a#14,SET-w#17,SET] size:811 blobrefs:[(000008: 10); depth:1]
L0.0:
  000005:[bar#10,SET-yaya#13,SET] seqnums:[10-13] points:[bar#10,SET-yaya#13,SET] size:768
Blob files:
  000008: 56 physical bytes, 10 value bytes

get
a
b
h
w
----
a:a
b:b
h:hello
w:world

# Configure the database to require keys in the range [a,m) to be in-place.

define required-in-place=(a,m) value-separation=(true,1,3)
----

batch
set a apple
set b banana
set c coconut
set d dragonfruit
set m mango
----

# The flush should write two sst files, and only "mango" should be separated. This
# should be reflected in the 5-byte value bytes of the blob file and the table's
# blob reference value size.

flush
----
L0.0:
  000005:[a#10,SET-d#13,SET] seqnums:[10-13] points:[a#10,SET-d#13,SET] size:798
  000006:[m#14,SET-m#14,SET] seqnums:[14-14] points:[m#14,SET-m#14,SET] size:762 blobrefs:[(000007: 5); depth:1]
Blob files:
  000007: 51 physical bytes, 5 value bytes

# Construct an initial state with two overlapping files in L0, both with blob
# references. Because these files overlap and are in separate sublevels, a
# compaction that preserves blob references should sum their depths.

define value-separation=(true,1,5) l0-compaction-threshold=2
L0 blob-depth=1
  a.SET.9:a
  d.SET.9:blob{fileNum=100001 value=d}
L0 blob-depth=3
  a.SET.1:a
  b.SET.1:blob{fileNum=100002 value=bar}
  f.SET.1:blob{fileNum=100003 value=foo}
  k.SET.1:k
  z.SET.1:blob{fileNum=100004 value=zoo}
----
L0.1:
  000004:[a#9,SET-d#9,SET] seqnums:[9-9] points:[a#9,SET-d#9,SET] size:775 blobrefs:[(100001: 1); depth:1]
L0.0:
  000005:[a#1,SET-z#1,SET] seqnums:[1-1] points:[a#1,SET-z#1,SET] size:795 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]

compact a-z
----
L1:
  000006:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:819 blobrefs:[(100002: 3), (100001: 1), (100003: 3), (100004: 3); depth:4]
Blob files:
  100001: 47 physical bytes, 1 value bytes
  100002: 49 physical bytes, 3 value bytes
  100003: 49 physical bytes, 3 value bytes
  100004: 49 physical bytes, 3 value bytes

# Construct an initial state with two non-overlapping files in L0, both with
# blob references. Because these files do NOT overlap and are in the same
# sublevel, a compaction that preserves blob references should take the MAX of
# their depths.

define value-separation=(true,1,5) l0-compaction-threshold=2
L0 blob-depth=1
  a.SET.9:a
  d.SET.9:blob{fileNum=100001 value=d}
L0 blob-depth=3
  e.SET.1:a
  f.SET.1:blob{fileNum=100002 value=bar}
  g.SET.1:blob{fileNum=100003 value=foo}
  k.SET.1:k
  z.SET.1:blob{fileNum=100004 value=zoo}
----
L0.0:
  000004:[a#9,SET-d#9,SET] seqnums:[9-9] points:[a#9,SET-d#9,SET] size:775 blobrefs:[(100001: 1); depth:1]
  000005:[e#1,SET-z#1,SET] seqnums:[1-1] points:[e#1,SET-z#1,SET] size:795 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]

compact a-z
----
L1:
  000006:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:813 blobrefs:[(100001: 1), (100002: 3), (100003: 3), (100004: 3); depth:3]
Blob files:
  100001: 47 physical bytes, 1 value bytes
  100002: 49 physical bytes, 3 value bytes
  100003: 49 physical bytes, 3 value bytes
  100004: 49 physical bytes, 3 value bytes

define value-separation=(true,5,5) l0-compaction-threshold=1
----

# Test writing a non-trivial amount of data. With a key length of 4, we'll write
# 475254 keys each with a 64-byte value, totalling ~30MB of value data.

populate keylen=4 timestamps=(1) vallen=64
----
wrote 475254 keys

# Flush the memtable. The resulting L0 sstables should be relatively small, but
# when their sizes are summed with their corresponding blob files, the sum
# should be around the target file size of 2MB.

flush
----
L0.0:
  000005:[a@1#10,SET-blnp@1#26391,SET] seqnums:[10-26391] points:[a@1#10,SET-blnp@1#26391,SET] size:401455 blobrefs:[(000006: 1688448); depth:1]
  000007:[blnq@1#26392,SET-cwxx@1#52681,SET] seqnums:[26392-52681] points:[blnq@1#26392,SET-cwxx@1#52681,SET] size:408199 blobrefs:[(000008: 1682560); depth:1]
  000009:[cwxy@1#52682,SET-eijb@1#78997,SET] seqnums:[52682-78997] points:[cwxy@1#52682,SET-eijb@1#78997,SET] size:406091 blobrefs:[(000010: 1684224); depth:1]
  000011:[eijc@1#78998,SET-ftuk@1#105315,SET] seqnums:[78998-105315] points:[eijc@1#78998,SET-ftuk@1#105315,SET] size:406439 blobrefs:[(000012: 1684352); depth:1]
  000013:[ftul@1#105316,SET-hfdy@1#131586,SET] seqnums:[105316-131586] points:[ftul@1#105316,SET-hfdy@1#131586,SET] size:409052 blobrefs:[(000014: 1681344); depth:1]
  000015:[hfdz@1#131587,SET-iqps@1#157916,SET] seqnums:[131587-157916] points:[hfdz@1#131587,SET-iqps@1#157916,SET] size:405662 blobrefs:[(000016: 1685120); depth:1]
  000017:[iqpt@1#157917,SET-kbyh@1#184161,SET] seqnums:[157917-184161] points:[iqpt@1#157917,SET-kbyh@1#184161,SET] size:410750 blobrefs:[(000018: 1679680); depth:1]
  000019:[kbyi@1#184162,SET-lniy@1#210461,SET] seqnums:[184162-210461] points:[kbyi@1#184162,SET-lniy@1#210461,SET] size:407160 blobrefs:[(000020: 1683200); depth:1]
  000021:[lniz@1#210462,SET-myto@1#236760,SET] seqnums:[210462-236760] points:[lniz@1#210462,SET-myto@1#236760,SET] size:407072 blobrefs:[(000022: 1683136); depth:1]
  000023:[mytp@1#236761,SET-okdt@1#263049,SET] seqnums:[236761-263049] points:[mytp@1#236761,SET-okdt@1#263049,SET] size:407864 blobrefs:[(000024: 1682496); depth:1]
  000025:[okdu@1#263050,SET-pvrc@1#289422,SET] seqnums:[263050-289422] points:[okdu@1#263050,SET-pvrc@1#289422,SET] size:402863 blobrefs:[(000026: 1687872); depth:1]
  000027:[pvrd@1#289423,SET-rhcn@1#315744,SET] seqnums:[289423-315744] points:[pvrd@1#289423,SET-rhcn@1#315744,SET] size:405669 blobrefs:[(000028: 1684608); depth:1]
  000029:[rhco@1#315745,SET-ssmh@1#342020,SET] seqnums:[315745-342020] points:[rhco@1#315745,SET-ssmh@1#342020,SET] size:408791 blobrefs:[(000030: 1681664); depth:1]
  000031:[ssmi@1#342021,SET-udu@1#368241,SET] seqnums:[342021-368241] points:[ssmi@1#342021,SET-udu@1#368241,SET] size:412544 blobrefs:[(000032: 1678144); depth:1]
  000033:[udua@1#368242,SET-vpea@1#394525,SET] seqnums:[368242-394525] points:[udua@1#368242,SET-vpea@1#394525,SET] size:408211 blobrefs:[(000034: 1682176); depth:1]
  000035:[vpeb@1#394526,SET-xaqb@1#420863,SET] seqnums:[394526-420863] points:[vpeb@1#394526,SET-xaqb@1#420863,SET] size:404561 blobrefs:[(000036: 1685632); depth:1]
  000037:[xaqc@1#420864,SET-ylzx@1#447140,SET] seqnums:[420864-447140] points:[xaqc@1#420864,SET-ylzx@1#447140,SET] size:408711 blobrefs:[(000038: 1681728); depth:1]
  000039:[ylzy@1#447141,SET-zxmm@1#473493,SET] seqnums:[447141-473493] points:[ylzy@1#447141,SET-zxmm@1#473493,SET] size:404164 blobrefs:[(000040: 1686592); depth:1]
  000041:[zxmn@1#473494,SET-zzzz@1#475263,SET] seqnums:[473494-475263] points:[zxmn@1#473494,SET-zzzz@1#475263,SET] size:28413 blobrefs:[(000042: 113280); depth:1]
Blob files:
  000006: 1693442 physical bytes, 1688448 value bytes
  000008: 1687530 physical bytes, 1682560 value bytes
  000010: 1689206 physical bytes, 1684224 value bytes
  000012: 1689334 physical bytes, 1684352 value bytes
  000014: 1686314 physical bytes, 1681344 value bytes
  000016: 1690102 physical bytes, 1685120 value bytes
  000018: 1684650 physical bytes, 1679680 value bytes
  000020: 1688170 physical bytes, 1683200 value bytes
  000022: 1688106 physical bytes, 1683136 value bytes
  000024: 1687466 physical bytes, 1682496 value bytes
  000026: 1692866 physical bytes, 1687872 value bytes
  000028: 1689590 physical bytes, 1684608 value bytes
  000030: 1686634 physical bytes, 1681664 value bytes
  000032: 1683102 physical bytes, 1678144 value bytes
  000034: 1687146 physical bytes, 1682176 value bytes
  000036: 1690614 physical bytes, 1685632 value bytes
  000038: 1686698 physical bytes, 1681728 value bytes
  000040: 1691574 physical bytes, 1686592 value bytes
  000042: 113626 physical bytes, 113280 value bytes

# Schedule automatic compactions. These compactions should write data to L6. The
# resulting sstables will reference multiple blob files but maintain a blob
# reference depth of 1 because L6 has no referenced blob files and all the L0
# input tables have a reference depth of 1.

auto-compact
----
L6:
  000044:[a@1#0,SET-czks@1#0,SET] seqnums:[0-0] points:[a@1#0,SET-czks@1#0,SET] size:711466 blobrefs:[(000006: 1688448), (000008: 1682560), (000010: 112192); depth:1]
  000045:[czkt@1#0,SET-fytv@1#0,SET] seqnums:[0-0] points:[czkt@1#0,SET-fytv@1#0,SET] size:714446 blobrefs:[(000010: 1572032), (000012: 1684352), (000014: 223936); depth:1]
  000046:[fytw@1#0,SET-iyfv@1#0,SET] seqnums:[0-0] points:[fytw@1#0,SET-iyfv@1#0,SET] size:709232 blobrefs:[(000014: 1457408), (000016: 1685120), (000018: 342848); depth:1]
  000047:[iyfw@1#0,SET-lxqc@1#0,SET] seqnums:[0-0] points:[iyfw@1#0,SET-lxqc@1#0,SET] size:712611 blobrefs:[(000018: 1336832), (000020: 1683200), (000022: 462336); depth:1]
  000048:[lxqd@1#0,SET-owzk@1#0,SET] seqnums:[0-0] points:[lxqd@1#0,SET-owzk@1#0,SET] size:714339 blobrefs:[(000022: 1220800), (000024: 1682496), (000026: 577344); depth:1]
  000049:[owzl@1#0,SET-rwhd@1#0,SET] seqnums:[0-0] points:[owzl@1#0,SET-rwhd@1#0,SET] size:716618 blobrefs:[(000026: 1110528), (000028: 1684608), (000030: 682880); depth:1]
  000050:[rwhe@1#0,SET-uvp@1#0,SET] seqnums:[0-0] points:[rwhe@1#0,SET-uvp@1#0,SET] size:716297 blobrefs:[(000030: 998784), (000032: 1678144), (000034: 801216); depth:1]
  000051:[uvpa@1#0,SET-xuza@1#0,SET] seqnums:[0-0] points:[uvpa@1#0,SET-xuza@1#0,SET] size:712319 blobrefs:[(000034: 880960), (000036: 1685632), (000038: 915328); depth:1]
  000052:[xuzb@1#0,SET-zzzz@1#0,SET] seqnums:[0-0] points:[xuzb@1#0,SET-zzzz@1#0,SET] size:530353 blobrefs:[(000038: 766400), (000040: 1686592), (000042: 113280); depth:1]
Blob files:
  000006: 1693442 physical bytes, 1688448 value bytes
  000008: 1687530 physical bytes, 1682560 value bytes
  000010: 1689206 physical bytes, 1684224 value bytes
  000012: 1689334 physical bytes, 1684352 value bytes
  000014: 1686314 physical bytes, 1681344 value bytes
  000016: 1690102 physical bytes, 1685120 value bytes
  000018: 1684650 physical bytes, 1679680 value bytes
  000020: 1688170 physical bytes, 1683200 value bytes
  000022: 1688106 physical bytes, 1683136 value bytes
  000024: 1687466 physical bytes, 1682496 value bytes
  000026: 1692866 physical bytes, 1687872 value bytes
  000028: 1689590 physical bytes, 1684608 value bytes
  000030: 1686634 physical bytes, 1681664 value bytes
  000032: 1683102 physical bytes, 1678144 value bytes
  000034: 1687146 physical bytes, 1682176 value bytes
  000036: 1690614 physical bytes, 1685632 value bytes
  000038: 1686698 physical bytes, 1681728 value bytes
  000040: 1691574 physical bytes, 1686592 value bytes
  000042: 113626 physical bytes, 113280 value bytes


excise-dryrun b c
----
would excise 1 files.
  del-table:     L6 000044
  add-table:     L6 000053(000044):[a@1#0,SET-azzz@1#0,SET] seqnums:[0-0] points:[a@1#0,SET-azzz@1#0,SET] size:238596 blobrefs:[(000006: 566234), (000008: 564260), (000010: 37624); depth:1]
  add-table:     L6 000054(000044):[c@1#0,SET-czks@1#0,SET] seqnums:[0-0] points:[c@1#0,SET-czks@1#0,SET] size:235737 blobrefs:[(000006: 559450), (000008: 557499), (000010: 37173); depth:1]
  add-backing:   000044
