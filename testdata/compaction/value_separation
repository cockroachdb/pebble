# Test a simple sequence of flushes and compactions where all values are
# separated.

define value-separation=(true, 0, 3)
----

batch
set a 1
set b 2
----

compact a-b
----
L6:
  000005:[a#10,SET-b#11,SET] seqnums:[10-11] points:[a#10,SET-b#11,SET] size:785 blobrefs:[(000006: 2); depth:1]
Blob files:
  000006: 92 physical bytes, 2 value bytes

batch
set c 3
set d 4
----

compact c-d
----
L6:
  000005:[a#10,SET-b#11,SET] seqnums:[10-11] points:[a#10,SET-b#11,SET] size:785 blobrefs:[(000006: 2); depth:1]
  000008:[c#12,SET-d#13,SET] seqnums:[12-13] points:[c#12,SET-d#13,SET] size:785 blobrefs:[(000009: 2); depth:1]
Blob files:
  000006: 92 physical bytes, 2 value bytes
  000009: 92 physical bytes, 2 value bytes

batch
set b 5
set c 6
----

compact a-d
----
L6:
  000013:[a#0,SET-d#0,SET] seqnums:[0-0] points:[a#0,SET-d#0,SET] size:812 blobrefs:[(000006: 1), (000012: 2), (000009: 1); depth:2]
Blob files:
  000006: 92 physical bytes, 2 value bytes
  000009: 92 physical bytes, 2 value bytes
  000012: 92 physical bytes, 2 value bytes

batch
del-range a e
----

compact a-d
----

# Set up a scenario where there's a L6 sstable with a blob reference depth of 3,
# and the value separation policy is configured to limit the blob reference
# depth to 3.

define verbose value-separation=(true, 3, 3)
L6 blob-depth=3
  a.SET.0:a
  b.SET.0:blob{fileNum=100002 value=bar}
  f.SET.0:blob{fileNum=100003 value=foo}
  k.SET.0:k
  z.SET.0:blob{fileNum=100004 value=zoo}
----
L6:
  000004:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:814 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]

batch
set d hello
set e world
----

# Flush should write flushed values to a new blob file.

flush
----
L0.0:
  000006:[d#10,SET-e#11,SET] seqnums:[10-11] points:[d#10,SET-e#11,SET] size:784 blobrefs:[(000007: 10); depth:1]
L6:
  000004:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:814 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]
Blob files:
  000007: 100 physical bytes, 10 value bytes
  100002: 92 physical bytes, 3 value bytes
  100003: 92 physical bytes, 3 value bytes
  100004: 92 physical bytes, 3 value bytes

# Compacting these two sstables should result in writing the values to a new
# blob file and the removal of the no longer referenced blob files.

compact a-z
----
L6:
  000008:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:834 blobrefs:[(000009: 19); depth:1]
Blob files:
  000009: 112 physical bytes, 19 value bytes

# Ensure we can read the separated values by iterating over the database.

iter
first
next
next
next
next
next
next
----
a: (a, .)
b: (bar, .)
d: (hello, .)
e: (world, .)
f: (foo, .)
k: (k, .)
z: (zoo, .)

metrics
----
      |                             |                |       |   ingested   |     moved    |    written   |       |    amp   |     multilevel
level | tables  size val-bl vtables | score  ff  cff |   in  | tables  size | tables  size | tables  size |  read |   r   w  |    top   in  read
------+-----------------------------+----------------+-------+--------------+--------------+--------------+-------+----------+------------------
    0 |     0     0B     0B       0 |    -    0    0 |   41B |     0     0B |     0     0B |     1   784B |    0B |   0 24.0 |    0B    0B    0B
    1 |     0     0B     0B       0 |    -    0    0 |    0B |     0     0B |     1   784B |     0     0B |    0B |   0    0 |    0B    0B    0B
    2 |     0     0B     0B       0 |    -    0    0 |    0B |     0     0B |     0     0B |     0     0B |    0B |   0    0 |    0B    0B    0B
    3 |     0     0B     0B       0 |    -    0    0 |    0B |     0     0B |     1   784B |     0     0B |    0B |   0    0 |    0B    0B    0B
    4 |     0     0B     0B       0 |    -    0    0 |    0B |     0     0B |     0     0B |     0     0B |    0B |   0    0 |    0B    0B    0B
    5 |     0     0B     0B       0 |    -    0    0 |    0B |     0     0B |     1   784B |     0     0B |    0B |   0    0 |    0B    0B    0B
    6 |     1   834B     0B       0 |    - 0.00 0.00 |  784B |     0     0B |     0     0B |     1   834B | 1.6KB |   1 1.21 |    0B    0B    0B
total |     1   834B     0B       0 |    -    -    - |   41B |     0     0B |     3  2.3KB |     2  1.6KB | 1.6KB |   1 48.1 |    0B    0B    0B
------------------------------------------------------------------------------------------------------------------------------------------------
WAL: 1 files (0B)  in: 30B  written: 41B (37% overhead)
Flushes: 1
Compactions: 4  estimated debt: 0B  in progress: 0 (0B)  canceled: 0 (0B)  failed: 0  problem spans: 0
             default: 1  delete: 0  elision: 0  move: 3  read: 0  tombstone-density: 0  rewrite: 0  copy: 0  multi-level: 2
MemTables: 1 (256KB)  zombie: 1 (256KB)
Zombie tables: 0 (0B, local: 0B)
Backing tables: 0 (0B)
Virtual tables: 0 (0B)
Local tables size: 834B
Compression types: snappy: 1
Table stats: all loaded
Block cache: 4 entries (1.6KB)  hit rate: 70.3%
Table cache: 2 entries (1.1KB)  hit rate: 82.2%
Range key sets: 0  Tombstones: 0  Total missized tombstones encountered: 0
Snapshots: 0  earliest seq num: 0
Table iters: 0
Filter utility: 0.0%
Ingestions: 0  as flushable: 0 (0B in 0 tables)
Cgo memory usage: 0B  block cache: 0B (data: 0B, maps: 0B, entries: 0B)  memtables: 0B

# Set the minimum size for a separated value to 5.

define value-separation=(true, 5, 3)
----

batch
set bar bar
set foo foo
set fuzz fuzz
set yaya yaya
----

# The flush should not write a blob file because none of the keys have a
# sufficiently long value to be separated.

flush
----
L0.0:
  000005:[bar#10,SET-yaya#13,SET] seqnums:[10-13] points:[bar#10,SET-yaya#13,SET] size:768

batch
set a a
set b b
set h hello
set w world
----

# This flush *should* write a blob file, containing 2 values: "hello" and
# "world" totalling 10 bytes of logical values.

flush
----
L0.1:
  000007:[a#14,SET-w#17,SET] seqnums:[14-17] points:[a#14,SET-w#17,SET] size:812 blobrefs:[(000008: 10); depth:1]
L0.0:
  000005:[bar#10,SET-yaya#13,SET] seqnums:[10-13] points:[bar#10,SET-yaya#13,SET] size:768
Blob files:
  000008: 100 physical bytes, 10 value bytes

get
a
b
h
w
----
a:a
b:b
h:hello
w:world

# Configure the database to require keys in the range [a,m) to be in-place.

define required-in-place=(a,m) value-separation=(true,1,3)
----

batch
set a apple
set b banana
set c coconut
set d dragonfruit
set m mango
----

# The flush should write two sst files, and only "mango" should be separated. This
# should be reflected in the 5-byte value bytes of the blob file and the table's
# blob reference value size.

flush
----
L0.0:
  000005:[a#10,SET-d#13,SET] seqnums:[10-13] points:[a#10,SET-d#13,SET] size:798
  000006:[m#14,SET-m#14,SET] seqnums:[14-14] points:[m#14,SET-m#14,SET] size:781 blobrefs:[(000007: 5); depth:1]
Blob files:
  000007: 94 physical bytes, 5 value bytes

# Construct an initial state with two overlapping files in L0, both with blob
# references. Because these files overlap and are in separate sublevels, a
# compaction that preserves blob references should sum their depths.

define value-separation=(true,1,5) l0-compaction-threshold=2
L0 blob-depth=1
  a.SET.9:a
  d.SET.9:blob{fileNum=100001 value=d}
L0 blob-depth=3
  a.SET.1:a
  b.SET.1:blob{fileNum=100002 value=bar}
  f.SET.1:blob{fileNum=100003 value=foo}
  k.SET.1:k
  z.SET.1:blob{fileNum=100004 value=zoo}
----
L0.1:
  000004:[a#9,SET-d#9,SET] seqnums:[9-9] points:[a#9,SET-d#9,SET] size:794 blobrefs:[(100001: 1); depth:1]
L0.0:
  000005:[a#1,SET-z#1,SET] seqnums:[1-1] points:[a#1,SET-z#1,SET] size:814 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]

compact a-z
----
L1:
  000006:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:838 blobrefs:[(100002: 3), (100001: 1), (100003: 3), (100004: 3); depth:4]
Blob files:
  100001: 90 physical bytes, 1 value bytes
  100002: 92 physical bytes, 3 value bytes
  100003: 92 physical bytes, 3 value bytes
  100004: 92 physical bytes, 3 value bytes

# Construct an initial state with two non-overlapping files in L0, both with
# blob references. Because these files do NOT overlap and are in the same
# sublevel, a compaction that preserves blob references should take the MAX of
# their depths.

define value-separation=(true,1,5) l0-compaction-threshold=2
L0 blob-depth=1
  a.SET.9:a
  d.SET.9:blob{fileNum=100001 value=d}
L0 blob-depth=3
  e.SET.1:a
  f.SET.1:blob{fileNum=100002 value=bar}
  g.SET.1:blob{fileNum=100003 value=foo}
  k.SET.1:k
  z.SET.1:blob{fileNum=100004 value=zoo}
----
L0.0:
  000004:[a#9,SET-d#9,SET] seqnums:[9-9] points:[a#9,SET-d#9,SET] size:794 blobrefs:[(100001: 1); depth:1]
  000005:[e#1,SET-z#1,SET] seqnums:[1-1] points:[e#1,SET-z#1,SET] size:814 blobrefs:[(100002: 3), (100003: 3), (100004: 3); depth:3]

compact a-z
----
L1:
  000006:[a#0,SET-z#0,SET] seqnums:[0-0] points:[a#0,SET-z#0,SET] size:832 blobrefs:[(100001: 1), (100002: 3), (100003: 3), (100004: 3); depth:3]
Blob files:
  100001: 90 physical bytes, 1 value bytes
  100002: 92 physical bytes, 3 value bytes
  100003: 92 physical bytes, 3 value bytes
  100004: 92 physical bytes, 3 value bytes

define value-separation=(true,5,5) l0-compaction-threshold=1
----

# Test writing a non-trivial amount of data. With a key length of 4, we'll write
# 475254 keys each with a 64-byte value, totalling ~30MB of value data.

populate keylen=4 timestamps=(1) vallen=64
----
wrote 475254 keys

# Flush the memtable. The resulting L0 sstables should be relatively small, but
# when their sizes are summed with their corresponding blob files, the sum
# should be around the target file size of 2MB.

flush
----
L0.0:
  000005:[a@1#10,SET-bkmx@1#25669,SET] seqnums:[10-25669] points:[a@1#10,SET-bkmx@1#25669,SET] size:393292 blobrefs:[(000006: 1642240); depth:1]
  000007:[bkmy@1#25670,SET-cv@1#51332,SET] seqnums:[25670-51332] points:[bkmy@1#25670,SET-cv@1#51332,SET] size:393118 blobrefs:[(000008: 1642432); depth:1]
  000009:[cva@1#51333,SET-efnb@1#76996,SET] seqnums:[51333-76996] points:[cva@1#51333,SET-efnb@1#76996,SET] size:392991 blobrefs:[(000010: 1642496); depth:1]
  000011:[efnc@1#76997,SET-fpym@1#102613,SET] seqnums:[76997-102613] points:[efnc@1#76997,SET-fpym@1#102613,SET] size:396117 blobrefs:[(000012: 1639488); depth:1]
  000013:[fpyn@1#102614,SET-hakf@1#128241,SET] seqnums:[102614-128241] points:[fpyn@1#102614,SET-hakf@1#128241,SET] size:395371 blobrefs:[(000014: 1640192); depth:1]
  000015:[hakg@1#128242,SET-ikvv@1#153863,SET] seqnums:[128242-153863] points:[hakg@1#128242,SET-ikvv@1#153863,SET] size:395249 blobrefs:[(000016: 1639808); depth:1]
  000017:[ikvw@1#153864,SET-jvjf@1#179535,SET] seqnums:[153864-179535] points:[ikvw@1#153864,SET-jvjf@1#179535,SET] size:392474 blobrefs:[(000018: 1643008); depth:1]
  000019:[jvjg@1#179536,SET-lfwu@1#205211,SET] seqnums:[179536-205211] points:[jvjg@1#179536,SET-lfwu@1#205211,SET] size:392194 blobrefs:[(000020: 1643264); depth:1]
  000021:[lfwv@1#205212,SET-mqja@1#230852,SET] seqnums:[205212-230852] points:[lfwv@1#205212,SET-mqja@1#230852,SET] size:394503 blobrefs:[(000022: 1641024); depth:1]
  000023:[mqjb@1#230853,SET-oavm@1#256498,SET] seqnums:[230853-256498] points:[mqjb@1#230853,SET-oavm@1#256498,SET] size:393645 blobrefs:[(000024: 1641344); depth:1]
  000025:[oavn@1#256499,SET-plib@1#282148,SET] seqnums:[256499-282148] points:[oavn@1#256499,SET-plib@1#282148,SET] size:393936 blobrefs:[(000026: 1641600); depth:1]
  000027:[plic@1#282149,SET-qvvp@1#307822,SET] seqnums:[282149-307822] points:[plic@1#282149,SET-qvvp@1#307822,SET] size:391860 blobrefs:[(000028: 1643136); depth:1]
  000029:[qvvq@1#307823,SET-sgia@1#333469,SET] seqnums:[307823-333469] points:[qvvq@1#307823,SET-sgia@1#333469,SET] size:394095 blobrefs:[(000030: 1641408); depth:1]
  000031:[sgib@1#333470,SET-tqvx@1#359152,SET] seqnums:[333470-359152] points:[sgib@1#333470,SET-tqvx@1#359152,SET] size:391215 blobrefs:[(000032: 1643712); depth:1]
  000033:[tqvy@1#359153,SET-vbir@1#384808,SET] seqnums:[359153-384808] points:[tqvy@1#359153,SET-vbir@1#384808,SET] size:393506 blobrefs:[(000034: 1641984); depth:1]
  000035:[vbis@1#384809,SET-wlwm@1#410490,SET] seqnums:[384809-410490] points:[vbis@1#384809,SET-wlwm@1#410490,SET] size:391822 blobrefs:[(000036: 1643648); depth:1]
  000037:[wlwn@1#410491,SET-xwjv@1#436160,SET] seqnums:[410491-436160] points:[wlwn@1#410491,SET-xwjv@1#436160,SET] size:392623 blobrefs:[(000038: 1642880); depth:1]
  000039:[xwjw@1#436161,SET-zgyc@1#461856,SET] seqnums:[436161-461856] points:[xwjw@1#436161,SET-zgyc@1#461856,SET] size:390801 blobrefs:[(000040: 1644544); depth:1]
  000041:[zgyd@1#461857,SET-zzzz@1#475263,SET] seqnums:[461857-475263] points:[zgyd@1#461857,SET-zzzz@1#475263,SET] size:206828 blobrefs:[(000042: 858048); depth:1]
Blob files:
  000006: 1704578 physical bytes, 1642240 value bytes
  000008: 1704776 physical bytes, 1642432 value bytes
  000010: 1704842 physical bytes, 1642496 value bytes
  000012: 1701714 physical bytes, 1639488 value bytes
  000014: 1702466 physical bytes, 1640192 value bytes
  000016: 1702066 physical bytes, 1639808 value bytes
  000018: 1705370 physical bytes, 1643008 value bytes
  000020: 1705634 physical bytes, 1643264 value bytes
  000022: 1703324 physical bytes, 1641024 value bytes
  000024: 1703654 physical bytes, 1641344 value bytes
  000026: 1703918 physical bytes, 1641600 value bytes
  000028: 1705502 physical bytes, 1643136 value bytes
  000030: 1703720 physical bytes, 1641408 value bytes
  000032: 1706118 physical bytes, 1643712 value bytes
  000034: 1704314 physical bytes, 1641984 value bytes
  000036: 1706053 physical bytes, 1643648 value bytes
  000038: 1705238 physical bytes, 1642880 value bytes
  000040: 1706980 physical bytes, 1644544 value bytes
  000042: 890654 physical bytes, 858048 value bytes

# Schedule automatic compactions. These compactions should write data to L6. The
# resulting sstables will reference multiple blob files but maintain a blob
# reference depth of 1 because L6 has no referenced blob files and all the L0
# input tables have a reference depth of 1.

auto-compact
----
L6:
  000044:[a@1#0,SET-czms@1#0,SET] seqnums:[0-0] points:[a@1#0,SET-czms@1#0,SET] size:708336 blobrefs:[(000006: 1642240), (000008: 1642432), (000010: 201984); depth:1]
  000045:[czmt@1#0,SET-fyy@1#0,SET] seqnums:[0-0] points:[czmt@1#0,SET-fyy@1#0,SET] size:710902 blobrefs:[(000010: 1440512), (000012: 1639488), (000014: 404096); depth:1]
  000046:[fyya@1#0,SET-iyjj@1#0,SET] seqnums:[0-0] points:[fyya@1#0,SET-iyjj@1#0,SET] size:710675 blobrefs:[(000014: 1236096), (000016: 1639808), (000018: 608384); depth:1]
  000047:[iyjk@1#0,SET-lxvy@1#0,SET] seqnums:[0-0] points:[iyjk@1#0,SET-lxvy@1#0,SET] size:708141 blobrefs:[(000018: 1034624), (000020: 1643264), (000022: 808384); depth:1]
  000048:[lxvz@1#0,SET-oxhc@1#0,SET] seqnums:[0-0] points:[lxvz@1#0,SET-oxhc@1#0,SET] size:710423 blobrefs:[(000022: 832640), (000024: 1641344), (000026: 1009984); depth:1]
  000049:[oxhd@1#0,SET-rwtr@1#0,SET] seqnums:[0-0] points:[oxhd@1#0,SET-rwtr@1#0,SET] size:707955 blobrefs:[(000026: 631616), (000028: 1643136), (000030: 1211520); depth:1]
  000050:[rwts@1#0,SET-uwea@1#0,SET] seqnums:[0-0] points:[rwts@1#0,SET-uwea@1#0,SET] size:711842 blobrefs:[(000030: 429888), (000032: 1643712), (000034: 1408960); depth:1]
  000051:[uweb@1#0,SET-xvsc@1#0,SET] seqnums:[0-0] points:[uweb@1#0,SET-xvsc@1#0,SET] size:706029 blobrefs:[(000034: 233024), (000036: 1643648), (000038: 1612224); depth:1]
  000052:[xvsd@1#0,SET-zzzz@1#0,SET] seqnums:[0-0] points:[xvsd@1#0,SET-zzzz@1#0,SET] size:516163 blobrefs:[(000038: 30656), (000040: 1644544), (000042: 858048); depth:1]
Blob files:
  000006: 1704578 physical bytes, 1642240 value bytes
  000008: 1704776 physical bytes, 1642432 value bytes
  000010: 1704842 physical bytes, 1642496 value bytes
  000012: 1701714 physical bytes, 1639488 value bytes
  000014: 1702466 physical bytes, 1640192 value bytes
  000016: 1702066 physical bytes, 1639808 value bytes
  000018: 1705370 physical bytes, 1643008 value bytes
  000020: 1705634 physical bytes, 1643264 value bytes
  000022: 1703324 physical bytes, 1641024 value bytes
  000024: 1703654 physical bytes, 1641344 value bytes
  000026: 1703918 physical bytes, 1641600 value bytes
  000028: 1705502 physical bytes, 1643136 value bytes
  000030: 1703720 physical bytes, 1641408 value bytes
  000032: 1706118 physical bytes, 1643712 value bytes
  000034: 1704314 physical bytes, 1641984 value bytes
  000036: 1706053 physical bytes, 1643648 value bytes
  000038: 1705238 physical bytes, 1642880 value bytes
  000040: 1706980 physical bytes, 1644544 value bytes
  000042: 890654 physical bytes, 858048 value bytes


excise-dryrun b c
----
would excise 1 files.
  del-table:     L6 000044
  add-table:     L6 000053(000044):[a@1#0,SET-azzz@1#0,SET] seqnums:[0-0] points:[a@1#0,SET-azzz@1#0,SET] size:242560(708336) blobrefs:[(000006: 562362), (000008: 562428), (000010: 69166); depth:1]
  add-table:     L6 000054(000044):[c@1#0,SET-czms@1#0,SET] seqnums:[0-0] points:[c@1#0,SET-czms@1#0,SET] size:230320(708336) blobrefs:[(000006: 533984), (000008: 534047), (000010: 65676); depth:1]
  add-backing:   000044
