batch
set a 1
set b 2
del c
----

flush
----
0.0:
  000005:[a#1,SET-c#3,DEL]

wait-pending-table-stats
000005
----
num-entries: 3
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0

compact a-c
----
6:
  000005:[a#1,SET-c#3,DEL]

batch
del-range a c
----

flush
----
0.0:
  000007:[a#4,RANGEDEL-c#72057594037927935,RANGEDEL]
6:
  000005:[a#1,SET-c#3,DEL]

wait-pending-table-stats
000007
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 51

reopen
----

# After re-opening the database, the table stats collector should eventually
# load 000007's stats.

wait-loaded-initial
----
[JOB 2] all initial table stats loaded

wait-pending-table-stats
000007
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 51

compact a-c
----

# Test a file that is moved by a compaction before its table stats are
# collected. The stats collector should silently skip the first pending file,
# but the second entry from the move compaction should cause the file's stats
# to be loaded.

disable
----

batch
set a 1
set b 2
----

flush
----
0.0:
  000012:[a#5,SET-b#6,SET]

compact a-c
----
6:
  000012:[a#5,SET-b#6,SET]

enable
----

wait-pending-table-stats
000012
----
num-entries: 2
num-deletions: 0
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0

# Test a file that is deleted by a compaction before its table stats are
# collected. The stats collector should just silently skip the pending file.

disable
----

batch
del-range a c
----

flush
----
0.0:
  000014:[a#7,RANGEDEL-c#72057594037927935,RANGEDEL]
6:
  000012:[a#5,SET-b#6,SET]

compact a-c
----

enable
----

wait-pending-table-stats
000014
----
(not found)

# Test range tombstones that need to be truncated to file bounds. The
# grandparent limit and small target file size ensures that our manual
# compaction of L4->L5 will split the range tombstone across several files.

define target-file-sizes=(100, 1)
L4
  a.RANGEDEL.8:f
L5
  b.SET.7:v
L6
  a.SET.1:v
L6
  b.SET.2:v
L6
  c.SET.3:v
L6
  d.SET.4:v
L6
  e.SET.5:v
----
4:
  000004:[a#8,RANGEDEL-f#72057594037927935,RANGEDEL]
5:
  000005:[b#7,SET-b#7,SET]
6:
  000006:[a#1,SET-a#1,SET]
  000007:[b#2,SET-b#2,SET]
  000008:[c#3,SET-c#3,SET]
  000009:[d#4,SET-d#4,SET]
  000010:[e#5,SET-e#5,SET]

compact a-b L4
----
5:
  000011:[a#8,RANGEDEL-b#72057594037927935,RANGEDEL]
  000012:[b#8,RANGEDEL-c#72057594037927935,RANGEDEL]
  000013:[c#8,RANGEDEL-d#72057594037927935,RANGEDEL]
  000014:[d#8,RANGEDEL-e#72057594037927935,RANGEDEL]
  000015:[e#8,RANGEDEL-f#72057594037927935,RANGEDEL]
6:
  000006:[a#1,SET-a#1,SET]
  000007:[b#2,SET-b#2,SET]
  000008:[c#3,SET-c#3,SET]
  000009:[d#4,SET-d#4,SET]
  000010:[e#5,SET-e#5,SET]

wait-pending-table-stats
000011
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 769

wait-pending-table-stats
000012
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 769

define snapshots=(10)
L6
  e.SET.5:5 a.RANGEDEL.15:z
----
6:
  000004:[a#15,RANGEDEL-z#72057594037927935,RANGEDEL]

wait-pending-table-stats
000004
----
num-entries: 2
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 26

# Ingest a table with range keys.
# TODO(travers): Once range keys in batches are flushed to tables, this testcase
# can be updated to use the batch / flush combination.

ingest ext0
range-key-set a b @1 foo
range-key-unset a b @2
range-key-del a b
----
5:
  000005:[a#1,RANGEKEYSET-b#72057594037927935,RANGEKEYDEL]
6:
  000004:[a#15,RANGEDEL-z#72057594037927935,RANGEDEL]

wait-pending-table-stats
000005
----
num-entries: 0
num-deletions: 0
num-range-keys: 3
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0
