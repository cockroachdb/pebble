batch
set a 1
set b 2
del c
----

flush
----
0.0:
  000005:[a#1,SET-c#3,DEL]

wait-pending-table-stats
000005
----
num-entries: 3
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0

compact a-c
----
6:
  000005:[a#1,SET-c#3,DEL]

batch
del-range a c
----

flush
----
0.0:
  000007:[a#4,RANGEDEL-c#72057594037927935,RANGEDEL]
6:
  000005:[a#1,SET-c#3,DEL]

wait-pending-table-stats
000007
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 51

reopen
----

# After re-opening the database, the table stats collector should eventually
# load 000007's stats.

wait-loaded-initial
----
[JOB 2] all initial table stats loaded

wait-pending-table-stats
000007
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 51

compact a-c
----

# Test a file that is moved by a compaction before its table stats are
# collected. The stats collector should silently skip the first pending file,
# but the second entry from the move compaction should cause the file's stats
# to be loaded.

disable
----

batch
set a 1
set b 2
----

flush
----
0.0:
  000012:[a#5,SET-b#6,SET]

compact a-c
----
6:
  000012:[a#5,SET-b#6,SET]

enable
----

wait-pending-table-stats
000012
----
num-entries: 2
num-deletions: 0
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0

# Test a file that is deleted by a compaction before its table stats are
# collected. The stats collector should just silently skip the pending file.

disable
----

batch
del-range a c
----

flush
----
0.0:
  000014:[a#7,RANGEDEL-c#72057594037927935,RANGEDEL]
6:
  000012:[a#5,SET-b#6,SET]

compact a-c
----

enable
----

wait-pending-table-stats
000014
----
(not found)

# Test range tombstones that need to be truncated to file bounds. The
# grandparent limit and small target file size ensures that our manual
# compaction of L4->L5 will split the range tombstone across several files.

define target-file-sizes=(100, 1)
L4
  a.RANGEDEL.8:f
L5
  b.SET.7:v
L6
  a.SET.1:v
L6
  b.SET.2:v
L6
  c.SET.3:v
L6
  d.SET.4:v
L6
  e.SET.5:v
----
4:
  000004:[a#8,RANGEDEL-f#72057594037927935,RANGEDEL]
5:
  000005:[b#7,SET-b#7,SET]
6:
  000006:[a#1,SET-a#1,SET]
  000007:[b#2,SET-b#2,SET]
  000008:[c#3,SET-c#3,SET]
  000009:[d#4,SET-d#4,SET]
  000010:[e#5,SET-e#5,SET]

compact a-b L4
----
5:
  000011:[a#8,RANGEDEL-b#72057594037927935,RANGEDEL]
  000012:[b#8,RANGEDEL-c#72057594037927935,RANGEDEL]
  000013:[c#8,RANGEDEL-d#72057594037927935,RANGEDEL]
  000014:[d#8,RANGEDEL-e#72057594037927935,RANGEDEL]
  000015:[e#8,RANGEDEL-f#72057594037927935,RANGEDEL]
6:
  000006:[a#1,SET-a#1,SET]
  000007:[b#2,SET-b#2,SET]
  000008:[c#3,SET-c#3,SET]
  000009:[d#4,SET-d#4,SET]
  000010:[e#5,SET-e#5,SET]

wait-pending-table-stats
000011
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 769

wait-pending-table-stats
000012
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 769

# A table in L6 with two point keys blocks, each covered by distinct range dels.
# The deletion estimate takes into account the contribution from both deleted
# blocks. Note that the snapshot is required to allow the hint to be computed.
define block-size=1 snapshots=(10)
L6
  e.SET.5:e a.RANGEDEL.15:f m.SET.5:m g.RANGEDEL.15:z
----
6:
  000004:[a#15,RANGEDEL-z#72057594037927935,RANGEDEL]

wait-pending-table-stats
000004
----
num-entries: 4
num-deletions: 2
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 68

# Hints that partially overlap tables in lower levels only count blocks that are
# contained within the hint.
#
#  L0 |-|              000004: a.RANGEDEL:b
#  L1        |---|     000005: d.RANGEDEL:f
#  L2  x     x         000006: Two blocks [a, d]
#  L2          x     x 000007: Two blocks [e, h]
#  -------------------
#      a b c d e f g h

define block-size=1
L0
  a.RANGEDEL.2:b
L1
  d.RANGEDEL.1:f
L2
  a.SET.0:a d.SET.0:d
L2
  e.SET.0:e h.SET.0:h
----
0.0:
  000004:[a#2,RANGEDEL-b#72057594037927935,RANGEDEL]
1:
  000005:[d#1,RANGEDEL-f#72057594037927935,RANGEDEL]
2:
  000006:[a#0,SET-d#0,SET]
  000007:[e#0,SET-h#0,SET]

# Table 000004 deletes the first block in table 000006.
wait-pending-table-stats
000004
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 33

# Table 000005 deletes the second block in table 000006 (containing 'd') and the
# first block in table 000007 (containing 'e').
wait-pending-table-stats
000005
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 66

# Test the interaction between point and range key deletions.

define
----

# Start with a table that contains point and range keys, but no range dels or
# range key dels.
# TODO(travers): Once range keys in batches are flushed to tables, this testcase
# can be updated to use the batch / flush combination.
ingest ext0
set a a
range-key-set a b @1 foo
range-key-unset a b @2
----
6:
  000004:[a#1,RANGEKEYSET-b#72057594037927935,RANGEKEYUNSET]

# Add a table that contains a RANGEKEYDEL.
ingest ext1
range-key-del a b
----
0.0:
  000005:[a#2,RANGEKEYDEL-b#72057594037927935,RANGEKEYDEL]
6:
  000004:[a#1,RANGEKEYSET-b#72057594037927935,RANGEKEYUNSET]

# Add one more table containing a RANGEDEL.
batch
del-range a c
----

flush
----
0.1:
  000007:[a#3,RANGEDEL-c#72057594037927935,RANGEDEL]
0.0:
  000005:[a#2,RANGEKEYDEL-b#72057594037927935,RANGEKEYDEL]
6:
  000004:[a#1,RANGEKEYSET-b#72057594037927935,RANGEKEYUNSET]

# Compute stats on the table containing range key del. It should not show an
# estimate for deleted point keys.
wait-pending-table-stats
000005
----
num-entries: 0
num-deletions: 0
num-range-keys: 1
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0

# Compute stats on the table containing the range del. It should show an
# estimate for deleted point keys.
wait-pending-table-stats
000007
----
num-entries: 1
num-deletions: 1
num-range-keys: 0
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 991

# A hint for exclusively range key deletions that covers a table with point keys
# should not contain an estimate for point keys.
# TODO(travers): Once range keys in batches are flushed to tables, this testcase
# can be updated to use the batch / flush combination.

define
----

# A table with point keys.
batch
set b b
----

flush
----
0.0:
  000005:[b#1,SET-b#1,SET]

# A table with a mixture of point and range keys.
ingest ext0
set c c
range-key-set d d @1 foo
----
0.0:
  000005:[b#1,SET-b#1,SET]
6:
  000006:[c#2,SET-c#2,SET]

# The table with the range key del, that spans the previous two tables.
ingest ext0
range-key-del a z
----
0.1:
  000007:[a#3,RANGEKEYDEL-z#72057594037927935,RANGEKEYDEL]
0.0:
  000005:[b#1,SET-b#1,SET]
6:
  000006:[c#2,SET-c#2,SET]

# The hint on table 000007 does estimates zero size for range deleted point
# keys.
wait-pending-table-stats
000007
----
num-entries: 0
num-deletions: 0
num-range-keys: 1
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0
