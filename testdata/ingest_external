
# Simple case.

build-remote f1
set a foo
set b bar
set c foobar
----

ingest-external
f1 bounds=(a,cc)
----

lsm
----
6:
  000004(000004):[a#10,DELSIZED-cc#inf,RANGEDEL]

iter
first
next
next
next
----
a: (foo, .)
b: (bar, .)
c: (foobar, .)
.

# Above case but with c left out at ingestion time.

reset
----

build-remote f2
set a foo
set b bar
set c foobar
----

ingest-external
f2 bounds=(a,c)
----

lsm
----
6:
  000004(000004):[a#10,DELSIZED-c#inf,RANGEDEL]

iter
first
next
next
next
----
a: (foo, .)
b: (bar, .)
.
.

build-remote f3
set c foobarbaz
set d haha
set e something
----

build-remote f4
set f foo
set g foo
set h foo
----

# This ingestion should error out due to the overlap between file spans.

ingest-external
f3 bounds=(c,f)
f4 bounds=(e,h)
----
pebble: external sstables have overlapping ranges

ingest-external
f3 bounds=(c,f)
f4 bounds=(f,hh)
----

lsm
----
6:
  000004(000004):[a#10,DELSIZED-c#inf,RANGEDEL]
  000007(000007):[c#11,DELSIZED-f#inf,RANGEDEL]
  000008(000008):[f#12,DELSIZED-hh#inf,RANGEDEL]

iter
first
next
next
next
next
next
next
next
next
----
a: (foo, .)
b: (bar, .)
c: (foobarbaz, .)
d: (haha, .)
e: (something, .)
f: (foo, .)
g: (foo, .)
h: (foo, .)
.

compact a z
----

lsm
----
6:
  000004(000004):[a#10,DELSIZED-c#inf,RANGEDEL]
  000007(000007):[c#11,DELSIZED-f#inf,RANGEDEL]
  000008(000008):[f#12,DELSIZED-hh#inf,RANGEDEL]

download a j
----
ok

lsm
----
6:
  000009:[a#0,SET-b#0,SET]
  000010:[c#0,SET-e#0,SET]
  000011:[f#0,SET-h#0,SET]

iter
first
next
next
next
next
next
next
next
next
----
a: (foo, .)
b: (bar, .)
c: (foobarbaz, .)
d: (haha, .)
e: (something, .)
f: (foo, .)
g: (foo, .)
h: (foo, .)
.

build-remote f5
set f foo
set g foo
set h foo
----

ingest-external
f5 bounds=(ff,fi) synthetic-prefix=f
----

build-remote f6
set bf foo
set bg foo
set bh foo
----

ingest-external
f6 bounds=(cf,ci) prefix-replace=(b,c)
----

iter
first
next
next
next
next
next
next
next
next
next
next
next
next
next
next
----
a: (foo, .)
b: (bar, .)
c: (foobarbaz, .)
cf: (foo, .)
cg: (foo, .)
ch: (foo, .)
d: (haha, .)
e: (something, .)
f: (foo, .)
ff: (foo, .)
fg: (foo, .)
fh: (foo, .)
g: (foo, .)
h: (foo, .)
.

# Test that ingestion with a prefix or suffix replacement rule fails on older
# major versions

reset format-major-version=16
----

build-remote f5
set ef foo
set eg foo
set eh foo
----

ingest-external
f5 bounds=(ff,fi) prefix-replace=(e,f)
----
pebble: format major version too old for synthetic prefix ingestion


ingest-external
f5 bounds=(ff,fi) synthetic-prefix=(f)
----
pebble: format major version too old for synthetic prefix ingestion


ingest-external
f5 bounds=(ff,fi) synthetic-suffix=@5
----
pebble: format major version too old for synthetic suffix ingestion


# Test plumbing for ingestion with suffix replacement
reset
----

build-remote f1
set a@1 foo
set b@2 foo
set c@1 foo
----

ingest-external
f1 bounds=(a,d) synthetic-suffix=@5
----

iter
first
next
next
----
a@5: (foo, .)
b@5: (foo, .)
c@5: (foo, .)

# Verify that we require bounds without suffix.
ingest-external
f6 bounds=(a@1,z)
----
pebble: external file bounds start key "a@1" has suffix

ingest-external
f6 bounds=(a,z@10)
----
pebble: external file bounds end key "z@10" has suffix

# Verify that we require valid bounds.
ingest-external
f6 bounds=(c,a)
----
pebble: external file bounds ["c", "a") are invalid

# Test the case when we are ingesting part of a RANGEDEL.
reset
----

batch
set i bar
----

build-remote f6
set b foo
del-range f u
----

ingest-external
f6 bounds=(a,c)
f6 bounds=(g,v)
----

# The previous element cannot be i, because it is inside the [g, v) portion of
# the [f, u) RANGEDEL.
iter
prev
----
b: (foo, .)

# Test the case where the input files need to be reordered during ingest.
reset
----

build-remote f7
set a foo
----

build-remote f8
set x bar
----

ingest-external
f8 bounds=(x,y)
f7 bounds=(a,b)
----

iter
first
next
----
a: (foo, .)
x: (bar, .)

# Test ViaBackingFileDownload.

reset
----

build-remote f7
set c foo
set d haha
set e something
----

build-remote f8
set g foo
set h foo
set i foo
----

ingest-external
f7 bounds=(gc,gf) synthetic-prefix=g
f8 bounds=(gg,gj) synthetic-prefix=g
----

iter
seek-ge g
next
next
next
next
next
----
gc: (foo, .)
gd: (haha, .)
ge: (something, .)
gg: (foo, .)
gh: (foo, .)
gi: (foo, .)

lsm
----
6:
  000004(000004):[gc#10,DELSIZED-gf#inf,RANGEDEL]
  000005(000005):[gg#11,DELSIZED-gj#inf,RANGEDEL]

download g h via-backing-file-download
----
ok

lsm
----
6:
  000006(000006):[gc#10,DELSIZED-gf#inf,RANGEDEL]
  000007(000007):[gg#11,DELSIZED-gj#inf,RANGEDEL]

iter
seek-ge g
next
next
next
next
next
----
gc: (foo, .)
gd: (haha, .)
ge: (something, .)
gg: (foo, .)
gh: (foo, .)
gi: (foo, .)

# Test seeks with keys outside of the synthetic prefix range.
reset
----

build-remote f9
set i foo
----

ingest-external
f9 bounds=(cg,ck) synthetic-prefix=c
----

iter
seek-ge bp
----
ci: (foo, .)

iter
seek-prefix-ge bp
----
.

iter
seek-lt de
----
ci: (foo, .)

reset
----


# Test compactions with synthetic prefix replacement.
reset
----

build-remote ext
set ax ax
set da da
set db db
set dc dc
set ux ux
----

# Replace prefix with one greater than the original one.
ingest-external
ext bounds=(ea,ed) prefix-replace=(d,e)
----

# Replace prefix with one smaller than the original one.
ingest-external
ext bounds=(ba,bd) prefix-replace=(d,b)
----

# Write some keys so we actually perform a compaction.
batch
set a a
set c c
set f f
----

compact a z
----

lsm
----
6:
  000008:[a#0,SET-f#0,SET]

# Make sure we see both ba..bc and ea..ec.
iter
first
next
next
next
next
next
next
next
next
next
----
a: (a, .)
ba: (da, .)
bb: (db, .)
bc: (dc, .)
c: (c, .)
ea: (da, .)
eb: (db, .)
ec: (dc, .)
f: (f, .)
.

# Test compactions with prefix synthesis.
reset
----

build-remote ext
set a a
set b b
set c c
----

ingest-external 
ext bounds=(ea,ed) synthetic-prefix=e
----

ingest-external
ext bounds=(ba,bd) synthetic-prefix=b
----

# Write some keys so we actually perform a compaction.
batch
set a a
set c c
set f f
----

compact a z
----

lsm
----
6:
  000008:[a#0,SET-f#0,SET]

# Make sure we see both ba..bc and ea..ec.
iter
first
next
next
next
next
next
next
next
next
next
----
a: (a, .)
ba: (a, .)
bb: (b, .)
bc: (c, .)
c: (c, .)
ea: (a, .)
eb: (b, .)
ec: (c, .)
f: (f, .)
.
