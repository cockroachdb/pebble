# Test an L6 file that contains range tombstones, but whose keys are not in
# the last snapshot stripe. The tombstones wouldn't be elided, so no
# compaction is pursued.
define snapshots=(70, 100, 180, 210)
L6
b.RANGEDEL.230:h h.RANGEDEL.200:r
----
6:
  000004:[b#230,RANGEDEL-r#72057594037927935,RANGEDEL]

wait-pending-table-stats
000004
----
num-entries: 2
num-deletions: 2
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0

maybe-compact
----
(none)

# Test the same scenario, but the file is in the last stripe. Since the file
# only contains deletes, no new sstable is written.
define snapshots=(270, 300, 380, 410)
L6
b.RANGEDEL.230:h h.RANGEDEL.200:r
----
6:
  000004:[b#230,RANGEDEL-r#72057594037927935,RANGEDEL]

wait-pending-table-stats
000004
----
num-entries: 2
num-deletions: 2
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0

maybe-compact
----
[JOB 100] compacted(elision-only) L6 [000004] (853 B) + L6 [] (0 B) -> L6 [] (0 B), in 1.0s, output rate 0 B/s

# Test a table that straddles a snapshot. It should not be compacted.
define snapshots=(50)
L6
a.SET.55:a b.RANGEDEL.5:h
----
6:
  000004:[a#55,SET-h#72057594037927935,RANGEDEL]

wait-pending-table-stats
000004
----
num-entries: 2
num-deletions: 1
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 26

maybe-compact
----
(none)

# Test a table with a point deletion and a non-deletion entry. The table
# should be compacted, and a new table with the point tombstone should be
# written.
define
L6
a.SET.55:a b.DEL.5:
----
6:
  000004:[a#55,SET-b#5,DEL]

wait-pending-table-stats
000004
----
num-entries: 2
num-deletions: 1
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 0

maybe-compact
----
[JOB 100] compacted(elision-only) L6 [000004] (783 B) + L6 [] (0 B) -> L6 [000005] (771 B), in 1.0s, output rate 771 B/s

version
----
6:
  000005:[a#0,SET-a#0,SET]

# Checking for a compaction again should not trigger a compaction, because
# 000005 does not contain deletions.

maybe-compact
----
(none)

maybe-compact
----
(none)

# Test a table that contains both deletions and non-deletions, but whose
# deletions remove the non-deletions. The compaction should not create a new
# table, but shouldn't happen until the snapshots are removed.
define snapshots=(59, 103)
L6
a.DEL.60: a.SET.55:a b.SET.100:b c.SET.101:c d.SET.102:d b.RANGEDEL.103:z
----
6:
  000004:[a#60,DEL-z#72057594037927935,RANGEDEL]

wait-pending-table-stats
000004
----
num-entries: 6
num-deletions: 2
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 76

maybe-compact
----
(none)

close-snapshot
59
----
(none)

close-snapshot
103
----
[JOB 100] compacted(elision-only) L6 [000004] (901 B) + L6 [] (0 B) -> L6 [] (0 B), in 1.0s, output rate 0 B/s

# Test a table that contains both deletions and non-deletions, but whose
# non-deletions well outnumber its deletions. The table should not be
# compacted because it falls beneath the threshold.
define snapshots=(15)
L6
a.DEL.20: a.SET.1:a b.SET.2:b c.SET.3:c d.SET.4:d e.SET.5:e f.SET.6:f g.SET.7:g h.SET.8:h i.SET.9:i j.SET.10:j
----
6:
  000004:[a#20,DEL-j#10,SET]

wait-pending-table-stats
000004
----
num-entries: 11
num-deletions: 1
point-deletions-bytes-estimate: 149
range-deletions-bytes-estimate: 0

close-snapshot
15
----
(none)

# Test a table that contains both deletions and non-deletions, but whose
# deletions remove the non-deletions. Set L5's max bytes low so that an
# automatic compaction will be pursued when we call maybe-compact.
# Automatic compactions need to be disabled to prevent a race where an
# automatic compaction compacts before we've closen the snapshot.
define snapshots=(103) level-max-bytes=(L5 : 1000) auto-compactions=off
L5
b.SET.200:<largeval> bb.SET.203:<largeval> cc.SET.204:<largeval>
L5
d.SET.302:<largeval> dd.SET.303:<largeval> de.SET.303:<largeval>
L5
m.SET.320:<largeval> n.SET.330:<largeval> o.SET.340:<largeval>
L6
a.SET.55:<largeval> b.SET.100:<largeval> c.SET.101:<largeval> d.SET.102:<largeval> a.RANGEDEL.103:e
L6
f.SET.30:<largeval> z.SET.31:<largeval>
----
5:
  000004:[b#200,SET-cc#204,SET]
  000005:[d#302,SET-de#303,SET]
  000006:[m#320,SET-o#340,SET]
6:
  000007:[a#103,RANGEDEL-e#72057594037927935,RANGEDEL]
  000008:[f#30,SET-z#31,SET]

close-snapshot
103
----
(none)

wait-pending-table-stats
000007
----
num-entries: 5
num-deletions: 1
point-deletions-bytes-estimate: 0
range-deletions-bytes-estimate: 16488

# Because we set max bytes low, maybe-compact will trigger an automatic
# compaction in preference over an elision-only compaction.
# By plain file size, 000006 should be picked because it overlaps
# significantly less data in L6. However, 000007 has significant obsolete
# data. The compaction picker should recognize that it's more efficient to
# compact (000004 + 000005) into 000007.

maybe-compact
----
[JOB 100] compacted(default) L5 [000004 000005] (26 K) + L6 [000007] (17 K) -> L6 [000009] (25 K), in 1.0s, output rate 25 K/s

define level-max-bytes=(L5 : 1000) auto-compactions=off
L5
a.DEL.101: b.DEL.102: c.DEL.103:
L5
m.SET.107:<largeval>
L6
a.SET.001:<largeval> b.SET.002:<largeval> c.SET.003:<largeval>
L6
f.SET.007:<largeval> x.SET.008:<largeval> z.SET.009:<largeval>
----
5:
  000004:[a#101,DEL-c#103,DEL]
  000005:[m#107,SET-m#107,SET]
6:
  000006:[a#1,SET-c#3,SET]
  000007:[f#7,SET-z#9,SET]

wait-pending-table-stats
000004
----
num-entries: 3
num-deletions: 3
point-deletions-bytes-estimate: 13167
range-deletions-bytes-estimate: 0

# By plain file size, 000005 should be picked because it is larger and
# overlaps the same amount of data in L6. However, 000004 has a high
# point-deletions-bytes-estimate, and the compaction picker should pick 000004
# instead.

maybe-compact
----
[JOB 100] compacted(default) L5 [000004] (794 B) + L6 [000006] (13 K) -> L6 [] (0 B), in 1.0s, output rate 0 B/s
