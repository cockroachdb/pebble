
reset
----

batch commit
range-key-set a c @5 boop
range-key-set c e @5 beep
----
committed 2 keys

snapshot name=foo
----

batch commit
set b d
set e foo
----
committed 2 keys

flush
----

scan-internal
----
a-c:{(#1,RANGEKEYSET,@5,boop)}
b#3,1 (d)
c-e:{(#2,RANGEKEYSET,@5,beep)}
e#4,1 (foo)

# Keys deleted by rangedels are elided.

batch commit
del-range b d
----
committed 1 keys

scan-internal
----
a-c:{(#1,RANGEKEYSET,@5,boop)}
b-d#5,RANGEDEL
c-e:{(#2,RANGEKEYSET,@5,beep)}
e#4,1 (foo)

flush
----

scan-internal
----
a-c:{(#1,RANGEKEYSET,@5,boop)}
b-d#5,RANGEDEL
c-e:{(#2,RANGEKEYSET,@5,beep)}
e#4,1 (foo)

# Snapshots work with internal iters.

scan-internal snapshot=foo
----
a-c:{(#1,RANGEKEYSET,@5,boop)}
c-e:{(#2,RANGEKEYSET,@5,beep)}

# Range keys and range dels are truncated to [lower,upper).

scan-internal lower=bb upper=dd
----
bb-c:{(#1,RANGEKEYSET,@5,boop)}
bb-d#5,RANGEDEL
c-dd:{(#2,RANGEKEYSET,@5,beep)}

scan-internal lower=b upper=cc
----
b-c:{(#1,RANGEKEYSET,@5,boop)}
b-cc#5,RANGEDEL
c-cc:{(#2,RANGEKEYSET,@5,beep)}

reset
----

# Range key unsets and dels are allowed to delete keys they observe, however
# the unset/del must also be returned to the user.

batch commit
range-key-set a c @8 foo
range-key-set b e @6 bar
----
committed 2 keys

flush
----

compact a-z
----
6:
  000005:[a#1,RANGEKEYSET-e#inf,RANGEKEYSET]

batch commit
range-key-unset b d @6
----
committed 1 keys

flush
----

batch commit
range-key-del a b
----
committed 1 keys

scan-internal
----
a-b:{(#4,RANGEKEYDEL)}
b-c:{(#1,RANGEKEYSET,@8,foo) (#3,RANGEKEYUNSET,@6)}
c-d:{(#3,RANGEKEYUNSET,@6)}
d-e:{(#2,RANGEKEYSET,@6,bar)}

flush
----

lsm
----
0.0:
  000009:[a#4,RANGEKEYDEL-b#inf,RANGEKEYDEL]
  000007:[b#3,RANGEKEYUNSET-d#inf,RANGEKEYUNSET]
6:
  000005:[a#1,RANGEKEYSET-e#inf,RANGEKEYSET]

scan-internal
----
a-b:{(#4,RANGEKEYDEL)}
b-c:{(#1,RANGEKEYSET,@8,foo) (#3,RANGEKEYUNSET,@6)}
c-d:{(#3,RANGEKEYUNSET,@6)}
d-e:{(#2,RANGEKEYSET,@6,bar)}

# Range key masking is not exercised, with range keys that could mask point
# keys being returned alongside point keys.

reset
----

batch commit
set b@3 bar
----
committed 1 keys

batch commit
range-key-set a c @5 boop
range-key-set c e @5 beep
----
committed 2 keys

scan-internal
----
a-c:{(#2,RANGEKEYSET,@5,boop)}
b@3#1,1 (bar)
c-e:{(#3,RANGEKEYSET,@5,beep)}

# Point keys are collapsed in a way similar to a compaction.

reset
----

batch commit
set b@3 bar
set c foo
----
committed 2 keys

scan-internal
----
b@3#1,1 (bar)
c#2,1 (foo)

batch commit
merge b@3 foo
singledel c
----
committed 2 keys

scan-internal
----
b@3#3,1 (barfoo)

batch commit
set b@3 baz
del c
merge d@4 bar
----
committed 3 keys

scan-internal
----
b@3#5,1 (baz)
c#6,0 ()
d@4#7,2 (bar)

batch commit
singledel e@5
set f barbaz
----
committed 2 keys

scan-internal
----
b@3#5,1 (baz)
c#6,0 ()
d@4#7,2 (bar)
e@5#8,7 ()
f#9,1 (barbaz)

# Skip-shared iteration mode. Test truncation of range key at scan bounds.

reset
----

batch commit
set b@3 bar
----
committed 1 keys

batch commit
range-key-set a c @5 boop
del-range c e
----
committed 2 keys

flush
----

compact a-z
----
6:
  000005:[a#2,RANGEKEYSET-e#inf,RANGEDEL]

batch commit
set f@8 baz
----
committed 1 keys

lsm
----
6:
  000005:[a#2,RANGEKEYSET-e#inf,RANGEDEL]

scan-internal
----
a-c:{(#2,RANGEKEYSET,@5,boop)}
b@3#1,1 (bar)
c-e#3,RANGEDEL
f@8#4,1 (baz)

scan-internal skip-shared lower=a upper=z
----
shared file: 000005 [a#2,21-e#72057594037927935,15]
f@8#4,1 (baz)

scan-internal skip-shared lower=a upper=e
----
shared file: 000005 [a#2,21-e#72057594037927935,15]

scan-internal skip-shared lower=a upper=d
----
shared file: 000005 [a#2,21-d#72057594037927935,15]

scan-internal skip-shared lower=a upper=c
----
shared file: 000005 [a#2,21-c#72057594037927935,21]

scan-internal skip-shared lower=a upper=b
----
shared file: 000005 [a#2,21-b#72057594037927935,21]

scan-internal skip-shared lower=b upper=z
----
shared file: 000005 [b#2,21-e#72057594037927935,15]
f@8#4,1 (baz)

scan-internal skip-shared lower=b upper=bb
----
shared file: 000005 [b#2,21-bb#72057594037927935,21]

scan-internal skip-shared lower=e upper=ff
----
f@8#4,1 (baz)

# Shared files that don't have any keys in [lower, upper) are ignored.

reset
----

batch commit
set a foo
set f bar
del-range b c
range-key-set e ee @5 boop
----
committed 4 keys

flush
----

compact a-z
----
6:
  000005:[a#1,SET-f#2,SET]

lsm
----
6:
  000005:[a#1,SET-f#2,SET]

scan-internal skip-shared lower=c upper=d
----

scan-internal skip-shared lower=bb upper=d
----
shared file: 000005 [bb#3,15-c#72057594037927935,15]

scan-internal skip-shared lower=c upper=ea
----
shared file: 000005 [e#4,21-ea#72057594037927935,21]

scan-internal skip-shared lower=c upper=z
----
shared file: 000005 [e#4,21-f#2,1]

# An upper bound equalling a file's Largest user key should be reason enough to
# truncate that file's bounds.

scan-internal skip-shared lower=c upper=f
----
shared file: 000005 [e#4,21-ee#72057594037927935,21]

# Construct a file with an exclusive sentinel as the largest key. Verify that
# scan-internal with skip-shared and an upper bound at that exclusive sentinel
# does not truncate that file.

reset
----

batch commit
set a foo
del-range b c
range-key-set e ee @5 boop
----
committed 3 keys

flush
----

compact a-z
----
6:
  000005:[a#1,SET-ee#inf,RANGEKEYSET]

scan-internal skip-shared lower=a upper=ee
----
shared file: 000005 [a#1,1-ee#72057594037927935,21]

scan-internal skip-shared lower=b upper=ee
----
shared file: 000005 [b#2,15-ee#72057594037927935,21]
