init 1
----

init_cp
----
base: 6

queue
----

init 1
6: 1
----

init_cp
----
base: 6

queue
----

init 1
6: 1000000
----

init_cp
----
base: 1

queue
----

init 1
5: 1
6: 10
----

init_cp
----
base: 5

queue
----
L5->L6: 1.0

init 1
5: 2
6: 10
----

init_cp
----
base: 5

queue
----
L5->L6: 2.0

# Smoothing multiplier is
# `(size(Lbottom)/size(Lbase))^(Lbottom-Lbase) = (30/1)^(1/(6-4)) = 30^(1/2)`
#
# size(L4) = size(Lbase) = 1
# size(L5) = size(L4) * 30^(1/2) ~= 5
# size(L6) = size(L5) * 30^(1/2) = 30

init 1
5: 2
6: 30
----

init_cp
----
base: 4

queue
----

init 1
4: 2
5: 2
6: 100
----

init_cp
----
base: 4

queue
----
L4->L5: 2.0

init 1
4: 1
5: 2
6: 100
----

init_cp
----
base: 4

queue
----
L4->L5: 1.0

init 1
4: 1
5: 11
6: 100
----

init_cp
----
base: 4

queue
----
L5->L6: 1.1

init 1
4: 2
5: 11
6: 100
----

init_cp
----
base: 4

queue
----
L4->L5: 2.0

init 1
0: 4
----

init_cp
----
base: 6

queue
----
L0->L6: 1.0

init 1
0: 5
----

init_cp
----
base: 6

queue
----
L0->L6: 1.2

init 1
0: 5
5: 2
6: 10
----

init_cp
----
base: 5

queue
----
L5->L6: 2.0

pick
----
L5->L6: 2.0

pick ongoing=(5,6)
----
no compaction

init 1
0: 10
4: 10
5: 6
6: 10
----

init_cp
----
base: 4

queue
----
L4->L5: 10.0
L4->L5: 9.0
L4->L5: 8.0
L4->L5: 7.0
L4->L5: 6.0
L4->L5: 5.0
L4->L5: 4.0
L4->L5: 3.0
L4->L5: 2.0

pick ongoing=(5,6)
----
L0->L4: 2.5

pick ongoing=(0,4)
----
L0->L0: 2.2

pick ongoing=(0,0,0,4)
----
L0->L0: 2.0

init_cp
----
base: 4

pick ongoing=(0,5)
----
L0->L0: 2.2

init 1
0: 10
6: 10
----

init_cp ongoing=(0,5)
----
base: 5

queue
----
L0->L5: 2.5
L0->L0: 2.2

pick
----
L0->L5: 2.5

pick ongoing=(0,5)
----
L0->L0: 2.2

# An intra-L0 compaction is only queued if there is an in-progress
# L0->Lbase compaction.

pick ongoing=(0,0)
----
L0->L5: 2.2

# Pick another intra-L0 compaction even if there is one already in
# progress.

pick ongoing=(0,0,0,5)
----
L0->L0: 2.0

# We'll only pick a concurrent compaction if it is "high" priority
# (i.e. has a score >= 1.5).

init 1
0: 7
5: 1
6: 10
----

init_cp ongoing=(0,5)
----
base: 5

queue
----
L0->L5: 1.8
L0->L0: 1.5

pick ongoing=(0,5,5,6)
----
L0->L0: 1.5

pick ongoing=(5,6)
----
no compaction

# Verify we can start concurrent Ln->Ln+1 compactions given sufficient
# priority.

init 1
5: 4
6: 10
----

init_cp
----
base: 5

queue
----
L5->L6: 4.0
L5->L6: 3.0
L5->L6: 2.0

pick
----
L5->L6: 4.0

pick ongoing=(5,6)
----
L5->L6: 3.0

pick ongoing=(5,6,5,6)
----
L5->L6: 2.0

pick ongoing=(5,6,5,6,5,6)
----
no compaction

# Verify that successive manual compactions interleaved with an automatic
# compaction does not trigger an error.

init 5
0: 7
5: 10
6: 5
----

init_cp
----
base: 5

queue
----
L5->L6: 2.0
L5->L6: 1.8
L5->L6: 1.6

pick_manual level=0 start=0 end=12
----
L0->L5, retryLater = false

pick
----
L5->L6: 2.0

# Assume the above two compactions (one manual L0 -> L5 and one automatic
# L5 -> L6) have run, and Lbase = L6 now, but the manual compaction code is
# still going to try running a manual compaction from L5 -> L6 since L5 was the
# output of the last manual compaction. No compaction should be picked.

init 5
0: 7
6: 5
----

init_cp
----
base: 6

pick_manual level=5 start=0 end=12
----
nil, retryLater = false
