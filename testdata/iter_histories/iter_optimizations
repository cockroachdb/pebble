# Test repeated seeks into the same range key, while TrySeekUsingNext=true.
# Test for regression fixed in #1849.

reset
----

batch commit
range-key-set a c @5 boop
range-key-set c e @5 beep
----
committed 2 keys

combined-iter
seek-ge a
seek-ge b
----
a: (., [a-c) @5=boop UPDATED)
b: (., [a-c) @5=boop)

# Ensure that no-op optimizations do not reuse range key iterator state across
# SetOptions calls. No-op optimizations have the potential to fail to update
# RangeKeyChanged().

reset
----

batch commit
range-key-set p s @1 foo
----
committed 1 keys

combined-iter lower=n@9 upper=x@5
seek-lt y@3
set-options lower=n@9 upper=x@5
seek-lt-limit t o
----
p: (., [p-s) @1=foo UPDATED)
.
p: valid (., [p-s) @1=foo UPDATED)

combined-iter lower=n@9 upper=x@5
seek-ge o
set-options lower=n@9 upper=x@5
seek-ge oat
----
p: (., [p-s) @1=foo UPDATED)
.
p: (., [p-s) @1=foo UPDATED)

combined-iter lower=n@9 upper=x@5
seek-prefix-ge p@5
set-options lower=n@9 upper=x@5
seek-prefix-ge p
----
p@5: (., [p-"p\x00") @1=foo UPDATED)
.
p: (., [p-"p\x00") @1=foo UPDATED)

# Regression test for #1963 / cockroachdb/cockroach#88296.
#
# The iterators in this test move their bounds monotonically forward
# [a,b)â†’[b,e). This enables the sstable iterator optimization for monotonically
# moving bounds (see boundsCmp in sstable/reader.go). With this optimization,
# the first seek after the SetBounds may use the fact that the bounds moved
# forward monotonically to avoid re-seeking within the index.
#
# The test cases below exercise a seek to a key, followed by a seek to a smaller
# key. The second seek should not make use of the bounds optimization because
# doing so may incorrectly skip all keys between the lower bound and the first
# seek key. Previously, the code paths that handled block-property filtering on
# a two-level iterator could leave the iterator in a state such that the second
# seek would improperly also exercise the monotonic bounds optimization. In the
# test cases below, this would result in the key 'b' not being found. Each test
# case exercises a different combination of seek-ge and seek-prefix-ge.

reset block-size=1 index-block-size=1
----

batch commit
set a a
set b b
set b@4 b@4
set z@6 z@6
----
committed 4 keys

flush
----

combined-iter lower=a upper=b point-key-filter=(1,4)
seek-ge a
set-bounds lower=b upper=e
seek-prefix-ge d@5
seek-prefix-ge b
----
a: (a, .)
.
.
b: (b, .)

combined-iter lower=a upper=b point-key-filter=(1,4)
seek-ge a
set-bounds lower=b upper=e
seek-ge d@5
seek-prefix-ge b
----
a: (a, .)
.
.
b: (b, .)

combined-iter lower=a upper=b point-key-filter=(1,4)
seek-ge a
set-bounds lower=b upper=e
seek-ge d@5
seek-ge b
----
a: (a, .)
.
.
b: (b, .)

combined-iter lower=a upper=b point-key-filter=(1,4)
seek-ge a
set-bounds lower=b upper=e
seek-prefix-ge d@5
seek-ge b
----
a: (a, .)
.
.
b: (b, .)

# Test a similar case with range key masking. The previous bug did not apply to
# this case, because range-key masking never skips blocks on a seek.

reset block-size=1 index-block-size=1
----

batch commit
set a a
set b b
set b@4 b@4
set z@6 z@6
range-key-set a z @9 v
----
committed 5 keys

flush
----

combined-iter lower=a upper=b mask-suffix=@10 mask-filter
seek-ge a
set-bounds lower=b upper=e
seek-prefix-ge d@5
seek-ge b
----
a: (a, [a-b) @9=v UPDATED)
.
d@5: (., [d-"d\x00") @9=v UPDATED)
b: (b, [b-e) @9=v UPDATED)

# Test TrySeekUsingNext across no-op SetOptions when reading through an indexed
# batch with modifications. The seek-prefix-ges after the first should make use
# of the TrySeekUsingNext optimization.
#
# TODO(jackson): The iterator stats don't signal the use of try-seek-using-next,
# so we inspect lastPositioningOp as a proxy since that's the
# try-seek-using-next prerequisite that previously regressed. Is there a way to
# adapt to this test so that the absence of the try-seek-using-next optimization
# is visible in the iterator statistics?
#
# Regression test for cockroachdb/cockroach#88819.

reset
----

batch commit
set b@5 b@5
set c@3 c@3
set d@9 d@9
set e@8 e@8
set f@8 f@8
----
committed 5 keys

flush
----

batch name=foo
set g@4 g@4
----
wrote 1 keys to batch "foo"

combined-iter reader=foo name=fooiter
inspect lastPositioningOp
seek-prefix-ge b@10
stats
----
lastPositioningOp="unknown"
b@5: (b@5, .)
stats: (interface (dir, seek, step): (fwd, 1, 0), (rev, 0, 0)), (internal (dir, seek, step): (fwd, 1, 0), (rev, 0, 0)),
(internal-stats: (block-bytes: (total 119 B, cached 0 B)), (points: (count 1, key-bytes 3, value-bytes 3, tombstoned: 0))

mutate batch=foo
set h@2 h@2
----

iter iter=fooiter
set-options
inspect lastPositioningOp
seek-prefix-ge c@10
stats
----
.
lastPositioningOp="seekprefixge"
c@3: (c@3, .)
stats: (interface (dir, seek, step): (fwd, 2, 0), (rev, 0, 0)), (internal (dir, seek, step): (fwd, 2, 0), (rev, 0, 0)),
(internal-stats: (block-bytes: (total 119 B, cached 0 B)), (points: (count 2, key-bytes 6, value-bytes 6, tombstoned: 0))

mutate batch=foo
set i@1 i@1
----

iter iter=fooiter
set-options
inspect lastPositioningOp
seek-prefix-ge d@10
stats
----
.
lastPositioningOp="seekprefixge"
d@9: (d@9, .)
stats: (interface (dir, seek, step): (fwd, 3, 0), (rev, 0, 0)), (internal (dir, seek, step): (fwd, 3, 0), (rev, 0, 0)),
(internal-stats: (block-bytes: (total 119 B, cached 0 B)), (points: (count 3, key-bytes 9, value-bytes 9, tombstoned: 0))

mutate batch=foo
set j@6 j@6
----

iter iter=fooiter
set-options
inspect lastPositioningOp
seek-prefix-ge e@10
stats
----
.
lastPositioningOp="seekprefixge"
e@8: (e@8, .)
stats: (interface (dir, seek, step): (fwd, 4, 0), (rev, 0, 0)), (internal (dir, seek, step): (fwd, 4, 0), (rev, 0, 0)),
(internal-stats: (block-bytes: (total 119 B, cached 0 B)), (points: (count 4, key-bytes 12, value-bytes 12, tombstoned: 0))

# Ensure that a case eligible for TrySeekUsingNext across a SetOptions correctly
# sees new batch mutations. The batch iterator should ignore the
# TrySeekUsingNext designation.

reset
----

batch commit
set b@3 b@3
set c@3 c@3
----
committed 2 keys

batch name=b1
----
wrote 0 keys to batch "b1"

combined-iter name=i1 reader=b1
seek-prefix-ge b@6
----
b@3: (b@3, .)

mutate batch=b1
set b@4 b@4
----

iter iter=i1
set-options
inspect lastPositioningOp
seek-prefix-ge b@5
----
.
lastPositioningOp="seekprefixge"
b@4: (b@4, .)

# Similar case with SeekGE.

iter iter=i1
seek-ge b@2
----
c@3: (c@3, .)

mutate batch=b1
set c@9 c@9
----

iter iter=i1
set-options
inspect lastPositioningOp
seek-ge b@1
----
.
lastPositioningOp="seekge"
c@9: (c@9, .)

# Test a case similar to the above, but with an intermediate switch to
# range-key-only iteration, so that the batchIter is not re-seeked.

reset
----

batch commit
set b@5 b@5
set c@3 c@3
----
committed 2 keys

batch name=b1
----
wrote 0 keys to batch "b1"

combined-iter name=i1 reader=b1
seek-ge b@9
----
b@5: (b@5, .)

mutate batch=b1
set b@6 b@6
----

iter iter=i1
set-options key-types=range
seek-ge b@8
set-options key-types=both
inspect lastPositioningOp
seek-ge b@7
----
.
.
.
lastPositioningOp="invalidate"
b@6: (b@6, .)

reset
----

batch commit
set b@2 b@2
set c@3 c@3
----
committed 2 keys

batch name=b1
----
wrote 0 keys to batch "b1"

combined-iter name=i1 reader=b1
seek-prefix-ge b@1
----
.

mutate batch=b1
set c@4 c@4
----

iter iter=i1
set-options
inspect lastPositioningOp
seek-prefix-ge c@8
----
.
lastPositioningOp="seekprefixge"
c@4: (c@4, .)

# Regression test for #2084.
#
# The optimization added in #2058 began using an enabled TrySeekUsingNext flag
# to avoid re-seeking within a level's file metadata. This optimization was
# dependent on the invariant that the iterator remained positioned at the
# previous seek key, so that a subsequent seek to a larger key does not need to
# backtrack.
#
# This invariant wasn't strictly preserved by the levelIter during SeekPrefixGE
# calls. During a SeekPrefixGE, the sstable iterator may return nil despite the
# existence of sstable keys greater than the seek key if the sstable's bloom
# filter excludes the seek prefix. If the sstable DOES NOT contain any range
# tombstones, the levelIter does not advance to the next file if the file's
# largest bound has a prefix larger than the seek prefix, returning nil, else it
# does advance since the next file could contain the seek prefix.
#
# However, if the file DOES contain range tombstones, the levelIter returns a
# synthetic largest boundary key so that the file remains open until the merging
# iterator passes beyond its bounds. This ensures the file's range deletions'
# effects on other keys are observed. If another level returned a key greater
# than this largest boundary key (eg, because the other level doesn't restrict
# results to the seek prefix), the merging iterator could step beyond the
# level's synthetic boundary key.  This step could advance the levelIter to the
# next file, despite its irrelevance to the current prefix. This step would also
# break the invariant that the level iterator remained positioned at the seek
# key.
#
# The bug was fixed by comparing the synthetic boundary key to the seek prefix,
# avoiding ever Next-ing the level iterator beyond the seek prefix.

# Set 100 bloom-filter bits per key to ensure the bloom-filter exclusivity
# checks successfully exclude prefixes that aren't present.
reset bloom-bits-per-key=100
----

# [a           -d)
#    b@3          d@1
batch commit
del-range a d
set b@3 b@3
set d@1 d@1
----
committed 3 keys

flush
----

# c@0 e@0
batch commit
del c@0
set e@0 e@0
----
committed 2 keys

flush
----

lsm
----
0.1:
  000007:[c@0#4,DEL-e@0#5,SET]
0.0:
  000005:[a#1,RANGEDEL-d@1#3,SET]

# The first SeekPrefixGE(b@3) positions each level iterator over their
# respective files and correctly finds b@3.
#
# The second SeekPrefixGE(c@5) seeks in both files. The 0.0 level iterator finds
# that its file does not contain the prefix 'c', so it returns nil. Since the file
# contains a range deletion, it returns a synthetic boundary key with user key
# d@1 to ensure the file stays open until the iterator has moved beyond the
# file's bounds. The seek in level 0.1 finds a key with the prefix 'c': a point
# tombstone c@0#4,DEL. This gets bubbled up to the Iterator, which skips it
# because it's a point tombstone, nexting within 000007 to e@0#5.
#
# Previously, in the bug highlighted by #2084, the merging iterator would then
# see that level 0.0's synthetic boundary key at d@1 was at the top of the heap
# and move to the next file in 0.0. The subsequent call to SeekPrefixGE(d@1,
# TrySeekUsingNext=true) would incorrectly use the current position within the
# 0.0 file metadata (nil), and miss the d@1 key.

combined-iter
seek-prefix-ge b@3
seek-prefix-ge c@5
seek-prefix-ge d@1
----
b@3: (b@3, .)
.
d@1: (d@1, .)
