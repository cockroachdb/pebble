reset
----

# Use the key string as the value so that it's easy to tell when we surface the
# wrong value.

batch
set a a
set b b
set c c
set d d
range-key-set b   c   @5 boop
range-key-set cat dog @3 beep
----
wrote 6 keys

# Scan forward

combined-iter
seek-ge a
next
next
next
next
next
----
a: (a, .)
b: (b, [b-c) @5=boop)
c: (c, .)
cat: (., [cat-dog) @3=beep)
d: (d, [cat-dog) @3=beep)
.

# Do the above forward iteration but with a mask suffix. The results should be
# identical despite range keys serving as masks, because none of the point keys
# have suffixes.

combined-iter mask-suffix=@9
seek-ge a
next
next
next
next
next
----
a: (a, .)
b: (b, [b-c) @5=boop)
c: (c, .)
cat: (., [cat-dog) @3=beep)
d: (d, [cat-dog) @3=beep)
.

# Scan backward

combined-iter
seek-lt z
prev
prev
prev
prev
prev
----
d: (d, [cat-dog) @3=beep)
cat: (., [cat-dog) @3=beep)
c: (c, .)
b: (b, [b-c) @5=boop)
a: (a, .)
.

combined-iter
seek-ge ace
seek-ge b
seek-ge c
seek-ge cab
seek-ge cat
seek-ge d
seek-ge day
seek-ge dog
----
b: (b, [b-c) @5=boop)
b: (b, [b-c) @5=boop)
c: (c, .)
cat: (., [cat-dog) @3=beep)
cat: (., [cat-dog) @3=beep)
d: (d, [cat-dog) @3=beep)
day: (., [cat-dog) @3=beep)
.

combined-iter
seek-lt 1
seek-lt ace
seek-lt b
seek-lt c
seek-lt cab
seek-lt cat
seek-lt d
seek-lt day
seek-lt dog
seek-lt zebra
----
.
a: (a, .)
a: (a, .)
b: (b, [b-c) @5=boop)
c: (c, .)
c: (c, .)
cat: (., [cat-dog) @3=beep)
d: (d, [cat-dog) @3=beep)
d: (d, [cat-dog) @3=beep)
d: (d, [cat-dog) @3=beep)

rangekey-iter
first
next
next
set-bounds lower=bat upper=catatonic
first
next
next
----
b [b-c) @5=boop
cat [cat-dog) @3=beep
.
.
bat [bat-c) @5=boop
cat [cat-catatonic) @3=beep
.

rangekey-iter
seek-ge bat
----
bat [b-c) @5=boop

# Delete 'b': The Iterator should still stop at b because of the range key
# with a start boundary at b.

batch
del b
----
wrote 1 keys

combined-iter
seek-ge b
seek-ge ace
----
b: (., [b-c) @5=boop)
b: (., [b-c) @5=boop)

rangekey-iter
seek-ge b
seek-ge ace
----
b [b-c) @5=boop
b [b-c) @5=boop

# Delete the b-c range key and the beginning of the cat-dog range key,
# truncating it to now begin at 'd'.

batch
range-key-del b d
----
wrote 1 keys

combined-iter
seek-ge b
next
----
c: (c, .)
d: (d, [d-dog) @3=beep)

reset
----

batch
range-key-set c d @1 boop
range-key-set apple c @3 beep
range-key-set ace apple @3 beep
set a a1
set b b1
set c c1
del a
set b b2
set c c2
----
wrote 9 keys

# Test that reverse iteration surfaces range key start boundaries alongside
# point keys at the same key.

combined-iter
last
prev
prev
prev
prev
----
c: (c2, [c-d) @1=boop)
b: (b2, [apple-c) @3=beep)
apple: (., [apple-c) @3=beep)
ace: (., [ace-apple) @3=beep)
.

# Test that forward iteration surfaces range key start boundaries alongside
# point keys at the same key.

combined-iter
first
next
next
next
next
----
ace: (., [ace-apple) @3=beep)
apple: (., [apple-c) @3=beep)
b: (b2, [apple-c) @3=beep)
c: (c2, [c-d) @1=boop)
.

combined-iter
seek-prefix-ge b
next
----
b: (b2, [apple-c) @3=beep)
.

reset
----

batch
range-key-set a d @8 boop
set a@2 a@2
set a@3 a#3
set a@9 a@9
set a@10 a@10
set b b
----
wrote 6 keys

combined-iter
seek-prefix-ge a
next
next
next
next
next
----
a: (., [a-d) @8=boop)
a@10: (a@10, [a-d) @8=boop)
a@9: (a@9, [a-d) @8=boop)
a@3: (a#3, [a-d) @8=boop)
a@2: (a@2, [a-d) @8=boop)
.

# Perform the above iteration with range-key masking enabled at a suffix equal
# to the range key's. The [a,d)@8 range key should serve as a masking, obscuring
# the points a@3 and a@2.

combined-iter mask-suffix=@8
seek-prefix-ge a
next
next
next
----
a: (., [a-d) @8=boop)
a@10: (a@10, [a-d) @8=boop)
a@9: (a@9, [a-d) @8=boop)
.

# Perform the same thing but with a mask suffix below the range key's. All the
# points should be visible again.

combined-iter mask-suffix=@7
seek-prefix-ge a
next
next
next
next
next
----
a: (., [a-d) @8=boop)
a@10: (a@10, [a-d) @8=boop)
a@9: (a@9, [a-d) @8=boop)
a@3: (a#3, [a-d) @8=boop)
a@2: (a@2, [a-d) @8=boop)
.

reset
----

# For all prefixes a, aa, ab, ... zz, write 3 keys at timestamps @1, @10, @100.
# This populates a total of (26**2 + 26) * 3 = 2106 keys.

populate keylen=2 timestamps=(1, 10, 100)
----
wrote 2106 keys

batch
range-key-set   b c @5 beep
range-key-unset c d @1
range-key-del   d e
----
wrote 3 keys

combined-iter
seek-ge az
next
next
next
next
next
seek-ge bz@10
next
next
----
az@100: (az@100, .)
az@10: (az@10, .)
az@1: (az@1, .)
b: (., [b-c) @5=beep)
b@100: (b@100, [b-c) @5=beep)
b@10: (b@10, [b-c) @5=beep)
bz@10: (bz@10, [b-c) @5=beep)
bz@1: (bz@1, [b-c) @5=beep)
c@100: (c@100, .)

# Perform the same iteration with all range keys serving as masks. The bz@1
# point key should be elided.

combined-iter mask-suffix=@100
seek-ge az
next
next
next
next
next
seek-ge bz@10
next
next
----
az@100: (az@100, .)
az@10: (az@10, .)
az@1: (az@1, .)
b: (., [b-c) @5=beep)
b@100: (b@100, [b-c) @5=beep)
b@10: (b@10, [b-c) @5=beep)
bz@10: (bz@10, [b-c) @5=beep)
c@100: (c@100, .)
c@10: (c@10, .)

# Ensure that a cloned iterator includes range keys.

combined-iter
seek-ge bz@10
clone
seek-ge bz@10
----
bz@10: (bz@10, [b-c) @5=beep)
.
bz@10: (bz@10, [b-c) @5=beep)

# Within a batch, later writes overwrite earlier writes. Here, the range-key-del
# of [bat, bus) overwrites the earlier writes of [b,c) and [b,e).

batch
range-key-set   b c @5 beep
range-key-set   b e @1 bop
range-key-set   c z @1000 boop
range-key-del   bat bus
----
wrote 4 keys

scan-rangekeys
----
[b, bat)
 @5=beep, @1=bop
[bus, c)
 @5=beep, @1=bop
[c, d)
 @1000=boop, @1=bop
[d, e)
 @1000=boop, @1=bop
[e, z)
 @1000=boop

combined-iter
seek-prefix-ge ca
next
seek-prefix-ge ca@100
----
ca: (., [c-d) @1000=boop, @1=bop)
ca@100: (ca@100, [c-d) @1000=boop, @1=bop)
ca@100: (ca@100, [c-d) @1000=boop, @1=bop)

# Perform the same iteration as above, but with @1000 range-key masking. The
# previously encountered point keys should be elided.

combined-iter mask-suffix=@1000
seek-prefix-ge ca
next
seek-prefix-ge ca@100
----
ca: (., [c-d) @1000=boop, @1=bop)
.
ca@100: (., [c-d) @1000=boop, @1=bop)

# Test masked, non-prefixed iteration. We should see the range keys, but all the
# points should be masked except those beginning with z which were excluded by
# the range key's exclusive z end bound.

combined-iter mask-suffix=@1000
seek-ge ca
next
next
next
next
next
----
ca: (., [c-d) @1000=boop, @1=bop)
d: (., [d-e) @1000=boop, @1=bop)
e: (., [e-z) @1000=boop)
z@100: (z@100, .)
z@10: (z@10, .)
z@1: (z@1, .)

reset
----

batch
range-key-set x z @5 boop
----
wrote 1 keys

combined-iter
last
next
prev
----
x: (., [x-z) @5=boop)
.
x: (., [x-z) @5=boop)

# Test limited reverse iteration. The seek-lt-limit z y must see the [x-z) range
# key because it covers a key within the range [y, z). The range key start
# boundary isn't until x.

combined-iter
seek-lt-limit z y
next
prev-limit y
----
x: valid (., [x-z) @5=boop)
.
x: valid (., [x-z) @5=boop)

# Test limited forward iteration. Since range keys are interleaved at the start
# boundaries, the iterator is guaranteed to encounter covering range keys
# without any special casing in the implementation.

combined-iter
seek-ge-limit w y
prev
next-limit y
----
x: valid (., [x-z) @5=boop)
.
x: valid (., [x-z) @5=boop)

# Test another limited backward iteration case where there exists a deleted
# point key and the underlying internalIterator is Prev'd to a key beyond the
# limit. This should still surface the covering range key.

batch
del yy
----
wrote 1 keys

combined-iter
seek-lt-limit z y
next
prev-limit y
----
x: valid (., [x-z) @5=boop)
.
x: valid (., [x-z) @5=boop)
