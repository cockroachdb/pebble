reset
----

# Use the key string as the value so that it's easy to tell when we surface the
# wrong value.

batch
set a a
set b b
set c c
set d d
range-key-set b   c   @5 boop
range-key-set cat dog @3 beep
----
wrote 6 keys

# Scan forward

combined-iter
seek-ge a
next
next
next
next
next
----
a: (a, .)
b: (b, [b-c) @5=boop UPDATED)
c: (c, . UPDATED)
cat: (., [cat-dog) @3=beep UPDATED)
d: (d, [cat-dog) @3=beep)
.

# Do the above forward iteration but with a mask suffix. The results should be
# identical despite range keys serving as masks, because none of the point keys
# have suffixes.

combined-iter mask-suffix=@9
seek-ge a
next
next
next
next
next
----
a: (a, .)
b: (b, [b-c) @5=boop UPDATED)
c: (c, . UPDATED)
cat: (., [cat-dog) @3=beep UPDATED)
d: (d, [cat-dog) @3=beep)
.

# Scan backward

combined-iter
seek-lt z
prev
prev
prev
prev
prev
----
d: (d, [cat-dog) @3=beep UPDATED)
cat: (., [cat-dog) @3=beep)
c: (c, . UPDATED)
b: (b, [b-c) @5=boop UPDATED)
a: (a, . UPDATED)
.

combined-iter
seek-ge ace
seek-ge b
seek-ge c
seek-ge cab
seek-ge cat
seek-ge d
seek-ge day
seek-ge dog
----
b: (b, [b-c) @5=boop UPDATED)
b: (b, [b-c) @5=boop)
c: (c, . UPDATED)
cat: (., [cat-dog) @3=beep UPDATED)
cat: (., [cat-dog) @3=beep)
d: (d, [cat-dog) @3=beep)
day: (., [cat-dog) @3=beep)
.

combined-iter
seek-lt 1
seek-lt ace
seek-lt b
seek-lt c
seek-lt cab
seek-lt cat
seek-lt d
seek-lt day
seek-lt dog
seek-lt zebra
----
.
a: (a, .)
a: (a, .)
b: (b, [b-c) @5=boop UPDATED)
c: (c, . UPDATED)
c: (c, .)
cat: (., [cat-dog) @3=beep UPDATED)
d: (d, [cat-dog) @3=beep)
d: (d, [cat-dog) @3=beep)
d: (d, [cat-dog) @3=beep)

rangekey-iter
first
next
next
set-bounds lower=bat upper=catatonic
first
next
next
----
b [b-c) @5=boop UPDATED
cat [cat-dog) @3=beep UPDATED
.
.
bat [bat-c) @5=boop UPDATED
cat [cat-catatonic) @3=beep UPDATED
.

rangekey-iter
seek-ge bat
----
bat [b-c) @5=boop UPDATED

# Delete 'b': The Iterator should still stop at b because of the range key
# with a start boundary at b.

batch
del b
----
wrote 1 keys

combined-iter
seek-ge b
seek-ge ace
----
b: (., [b-c) @5=boop UPDATED)
b: (., [b-c) @5=boop)

rangekey-iter
seek-ge b
seek-ge ace
----
b [b-c) @5=boop UPDATED
b [b-c) @5=boop

# Delete the b-c range key and the beginning of the cat-dog range key,
# truncating it to now begin at 'd'.

indexed-batch
range-key-del b d
----
created indexed batch with 1 keys

# Reading through the indexed batch, we should see the beginning of the cat-dog
# range key now beginning at 'd'.

combined-iter
seek-ge b
next
----
c: (c, .)
d: (d, [d-dog) @3=beep UPDATED)

commit-batch
----
wrote 1 keys

# Reading through the database after applying the batch, we should still see the
# beginning of the cat-dog range key now beginning at 'd'.

combined-iter
seek-ge b
next
----
c: (c, .)
d: (d, [d-dog) @3=beep UPDATED)

# Reading through the database after flushing, we should still see the
# beginning of the cat-dog range key now beginning at 'd'.

flush
----

combined-iter
seek-ge b
next
----
c: (c, .)
d: (d, [d-dog) @3=beep UPDATED)

reset
----

batch
range-key-set c d @1 boop
range-key-set apple c @3 beep
range-key-set ace apple @3 beep
set a a1
set b b1
set c c1
del a
set b b2
set c c2
----
wrote 9 keys

# Test that reverse iteration surfaces range key start boundaries alongside
# point keys at the same key, and defragments logically equivalent ranges.

combined-iter
last
prev
prev
prev
----
c: (c2, [c-d) @1=boop UPDATED)
b: (b2, [ace-c) @3=beep UPDATED)
ace: (., [ace-c) @3=beep)
.

# Test that forward iteration surfaces range key start boundaries alongside
# point keys at the same key, and defragments logically equivalent ranges.

combined-iter
first
next
next
next
----
ace: (., [ace-c) @3=beep UPDATED)
b: (b2, [ace-c) @3=beep)
c: (c2, [c-d) @1=boop UPDATED)
.

# NB: seek-prefix-ge truncates bounds to the prefix.

combined-iter
seek-prefix-ge b
next
----
b: (b2, [b-"b\x00") @3=beep UPDATED)
.

reset
----

batch
range-key-set a d @8 boop
set a@2 a@2
set a@3 a@3
set a@9 a@9
set a@10 a@10
set b b
----
wrote 6 keys

combined-iter
seek-prefix-ge a
next
next
next
next
next
----
a: (., [a-"a\x00") @8=boop UPDATED)
a@10: (a@10, [a-"a\x00") @8=boop)
a@9: (a@9, [a-"a\x00") @8=boop)
a@3: (a@3, [a-"a\x00") @8=boop)
a@2: (a@2, [a-"a\x00") @8=boop)
.



# Perform the above iteration with range-key masking enabled at a suffix equal
# to the range key's. The [a,d)@8 range key should serve as a masking, obscuring
# the points a@3 and a@2.

combined-iter mask-suffix=@8
seek-prefix-ge a
next
next
next
----
a: (., [a-"a\x00") @8=boop UPDATED)
a@10: (a@10, [a-"a\x00") @8=boop)
a@9: (a@9, [a-"a\x00") @8=boop)
.

# Perform the same thing but with a mask suffix below the range key's. All the
# points should be visible again.
#
# Then use SetOptions to raise the mask. The masked points should disappear.

combined-iter mask-suffix=@7
seek-prefix-ge a
next
next
next
next
next
set-options key-types=both mask-suffix=@8
seek-prefix-ge a
next
next
next
----
a: (., [a-"a\x00") @8=boop UPDATED)
a@10: (a@10, [a-"a\x00") @8=boop)
a@9: (a@9, [a-"a\x00") @8=boop)
a@3: (a@3, [a-"a\x00") @8=boop)
a@2: (a@2, [a-"a\x00") @8=boop)
.
.
a: (., [a-"a\x00") @8=boop UPDATED)
a@10: (a@10, [a-"a\x00") @8=boop)
a@9: (a@9, [a-"a\x00") @8=boop)
.

# Test that switching out of prefix iteration correctly expands the bounds
# beyond the scope of the previous prefix.

combined-iter
seek-prefix-ge a
next
seek-ge a@3
----
a: (., [a-"a\x00") @8=boop UPDATED)
a@10: (a@10, [a-"a\x00") @8=boop)
a@3: (a@3, [a-d) @8=boop UPDATED)

reset
----

# For all prefixes a, aa, ab, ... zz, write 3 keys at timestamps @1, @10, @100.
# This populates a total of (26**2 + 26) * 3 = 2106 keys.

populate keylen=2 timestamps=(1, 10, 100)
----
wrote 2106 keys

batch
range-key-set   b c @5 beep
range-key-unset c d @1
range-key-del   d e
----
wrote 3 keys

flush
----

metrics
----
Metrics.Keys.RangeKeySetsCount = 1

combined-iter
seek-ge az
next
next
next
next
next
seek-ge bz@10
next
next
----
az@100: (az@100, .)
az@10: (az@10, .)
az@1: (az@1, .)
b: (., [b-c) @5=beep UPDATED)
b@100: (b@100, [b-c) @5=beep)
b@10: (b@10, [b-c) @5=beep)
bz@10: (bz@10, [b-c) @5=beep)
bz@1: (bz@1, [b-c) @5=beep)
c@100: (c@100, . UPDATED)

# Perform the same iteration with all range keys serving as masks. The bz@1
# point key should be elided.

combined-iter mask-suffix=@100
seek-ge az
next
next
next
next
next
seek-ge bz@10
next
next
----
az@100: (az@100, .)
az@10: (az@10, .)
az@1: (az@1, .)
b: (., [b-c) @5=beep UPDATED)
b@100: (b@100, [b-c) @5=beep)
b@10: (b@10, [b-c) @5=beep)
bz@10: (bz@10, [b-c) @5=beep)
c@100: (c@100, . UPDATED)
c@10: (c@10, .)

# Ensure that a cloned iterator includes range keys.

combined-iter
seek-ge bz@10
clone
seek-ge bz@10
----
bz@10: (bz@10, [b-c) @5=beep UPDATED)
.
bz@10: (bz@10, [b-c) @5=beep UPDATED)

# Within a batch, later writes overwrite earlier writes. Here, the range-key-del
# of [bat, bus) overwrites the earlier writes of [b,c) and [b,e).

batch
range-key-set   b c @5 beep
range-key-set   b e @1 bop
range-key-set   c z @1000 boop
range-key-del   bat bus
----
wrote 4 keys

flush
----

lsm
----
0.1:
  000008:[b#2111,RANGEKEYSET-z#72057594037927935,RANGEKEYSET]
0.0:
  000006:[a@100#3,SET-zz@1#2104,SET]

scan-rangekeys
----
[b, bat)
 @5=beep, @1=bop
[bus, c)
 @5=beep, @1=bop
[c, e)
 @1000=boop, @1=bop
[e, z)
 @1000=boop

# NB: There are now 8 range key sets in the database. See the 7 range keys in
# the above scan-rangekeys. Additionally, the sstable flushed earlier up above
# included a rangekeyset [b,c) @5=beep.

metrics
----
Metrics.Keys.RangeKeySetsCount = 8


combined-iter
seek-prefix-ge ca
next
seek-prefix-ge ca@100
----
ca: (., [ca-"ca\x00") @1000=boop, @1=bop UPDATED)
ca@100: (ca@100, [ca-"ca\x00") @1000=boop, @1=bop)
ca@100: (ca@100, [ca-"ca\x00") @1000=boop, @1=bop)


# Perform the same iteration as above, but with @1000 range-key masking. The
# previously encountered point keys should be elided.

combined-iter mask-suffix=@1000
seek-prefix-ge ca
next
seek-prefix-ge ca@100
----
ca: (., [ca-"ca\x00") @1000=boop, @1=bop UPDATED)
.
ca@100: (., [ca-"ca\x00") @1000=boop, @1=bop UPDATED)

# Test masked, non-prefixed iteration. We should see the range keys, but all the
# points should be masked except those beginning with z which were excluded by
# the range key's exclusive z end bound.

combined-iter mask-suffix=@1000
seek-ge ca
next
next
next
next
next
----
ca: (., [c-e) @1000=boop, @1=bop UPDATED)
e: (., [e-z) @1000=boop UPDATED)
z@100: (z@100, . UPDATED)
z@10: (z@10, .)
z@1: (z@1, .)
za@100: (za@100, .)

reset
----

batch
range-key-set x z @5 boop
----
wrote 1 keys

combined-iter
last
next
prev
----
x: (., [x-z) @5=boop UPDATED)
.
x: (., [x-z) @5=boop UPDATED)

# Test limited reverse iteration. The seek-lt-limit z y must see the [x-z) range
# key because it covers a key within the range [y, z). The range key start
# boundary isn't until x.

combined-iter
seek-lt-limit z y
next
prev-limit y
----
x: valid (., [x-z) @5=boop UPDATED)
.
x: valid (., [x-z) @5=boop UPDATED)

# Test limited forward iteration. Since range keys are interleaved at the start
# boundaries, the iterator is guaranteed to encounter covering range keys
# without any special casing in the implementation.

combined-iter
seek-ge-limit w y
prev
next-limit y
----
x: valid (., [x-z) @5=boop UPDATED)
.
x: valid (., [x-z) @5=boop UPDATED)

# Test another limited backward iteration case where there exists a deleted
# point key and the underlying internalIterator is Prev'd to a key beyond the
# limit. This should still surface the covering range key.

batch
del yy
----
wrote 1 keys

combined-iter
seek-lt-limit z y
next
prev-limit y
----
x: valid (., [x-z) @5=boop UPDATED)
.
x: valid (., [x-z) @5=boop UPDATED)

# Applying range keys to a DB running with a version that doesn't support them
# results in an error. Range keys were added in version 7.
reset format-major-version=6
----

batch
range-key-set a   z   @5 boop
----
pebble: range keys require at least format major version 8 (current: 6)

# Constructing iterator over range keys on a DB that doesn't support them
# results in an error.

reset format-major-version=6
----

combined-iter
----
pebble: range keys require at least format major version 8 (current: 6)

# Test iterator bounds provided via IterOptions.

reset
----

batch
set a a
set b b
set c c
set d d
set f f
range-key-set a   ap  @6 foo
range-key-set ap  c   @5 bar
range-key-set cat zoo @3 bax
----
wrote 8 keys

# Ensure bounds provided at initialization are respected, and propagated to
# cloned iterators.

combined-iter lower=b upper=e
first
next
next
next
next
clone
first
next
next
next
next
----
b: (b, [b-c) @5=bar UPDATED)
c: (c, . UPDATED)
cat: (., [cat-e) @3=bax UPDATED)
d: (d, [cat-e) @3=bax)
.
.
b: (b, [b-c) @5=bar UPDATED)
c: (c, . UPDATED)
cat: (., [cat-e) @3=bax UPDATED)
d: (d, [cat-e) @3=bax)
.

# Ensure bounds provided during clone are propagated to cloned iterators.

combined-iter lower=b upper=e
first
next
next
next
next
clone lower=a upper=cat key-types=both
first
next
next
next
clone lower=a upper=cat key-types=point
first
next
next
next
----
b: (b, [b-c) @5=bar UPDATED)
c: (c, . UPDATED)
cat: (., [cat-e) @3=bax UPDATED)
d: (d, [cat-e) @3=bax)
.
.
a: (a, [a-ap) @6=foo UPDATED)
ap: (., [ap-c) @5=bar UPDATED)
b: (b, [ap-c) @5=bar)
c: (c, . UPDATED)
.
a:a
b:b
c:c
.

# Ensure bounds and key-types provided through SetOptions are respected.

combined-iter lower=b upper=e
first
next
next
next
next
set-options lower=a upper=cat key-types=both
first
next
next
next
set-options lower=a upper=cat key-types=point
first
next
next
next
----
b: (b, [b-c) @5=bar UPDATED)
c: (c, . UPDATED)
cat: (., [cat-e) @3=bax UPDATED)
d: (d, [cat-e) @3=bax)
.
.
a: (a, [a-ap) @6=foo UPDATED)
ap: (., [ap-c) @5=bar UPDATED)
b: (b, [ap-c) @5=bar)
c: (c, . UPDATED)
.
a:a
b:b
c:c
.

flush
----

metrics
----
Metrics.Keys.RangeKeySetsCount = 3

# Test Prev-ing back over a synthetic range key marker. Synthetic range-key
# markers (the keys interleaved at 'c' during a SeekGE(c) when there's a
# straddling range key) are ephemeral, and Prev-ing back must move back the
# appropriate number of times.

reset
----

batch
set a a
range-key-set b e @1 foo
----
wrote 2 keys

flush
----

combined-iter
seek-ge b
prev
seek-ge c
prev
----
b: (., [b-e) @1=foo UPDATED)
a: (a, . UPDATED)
c: (., [b-e) @1=foo UPDATED)
b: (., [b-e) @1=foo)

# Test a case during limited reverse iteration where a range key covers a
# portion of the keyspace within the limit. The iterator should NOT pause and
# should surface the range key.

reset
----

batch
del b
range-key-set a d @1 foo
----
wrote 2 keys

flush
----

combined-iter
seek-ge z
prev-limit c
----
.
a: valid (., [a-d) @1=foo UPDATED)

# Test a case during limited reverse iteration where there exists a range key
# but it ends before the limit. The iterator should pause.

reset
----

batch
del b
range-key-set a c @1 foo
----
wrote 2 keys

combined-iter
seek-ge z
prev-limit c
----
.
. at-limit

# Test a lazy-combined iteration edge. Consider the LSM:
#
#   L5:  000003:[bar.DEL.3, foo.RANGEKEYSET.4]
#   L6:  000001:[bar.SET.1] 000002:[bax.RANGEKEYSET.2]
#
# A call to First() seeks the levels to files L5.000003 and L6.000001.
# The L5 levelIter observes that L5.000003 contains the range key with
# start key `foo`, and triggers a switch to combined iteration, setting
# `combinedIterState.key` = `foo`. While switching to combined iteration, the
# iterator must recognize that `foo` > `bar`, and there may yet exist range keys
# that begin before `foo` (in this case `bax`).

reset
----

batch
set bar bar
----
wrote 1 keys

flush
----

batch
range-key-set bax zoo @1 foo
----
wrote 1 keys

flush
----

batch
del bar
range-key-set foo zoo @2 bar
----
wrote 2 keys

flush
----

lsm
----
0.1:
  000009:[bar#3,DEL-zoo#72057594037927935,RANGEKEYSET]
0.0:
  000005:[bar#1,SET-bar#1,SET]
  000007:[bax#2,RANGEKEYSET-zoo#72057594037927935,RANGEKEYSET]

# Assert that First correctly finds [bax,zoo), despite the discovery of
# [foo,zoo) triggering the switch to combined iteration.

combined-iter
first
next
----
bax: (., [bax-foo) @1=foo UPDATED)
foo: (., [foo-zoo) @2=bar, @1=foo UPDATED)

# Test seeking into the middle of a range key during lazy-combined iteration.
# The iterator should surface Key() = the seek key.

combined-iter
seek-ge bop
----
bop: (., [bax-foo) @1=foo UPDATED)

combined-iter
last
----
foo: (., [foo-zoo) @2=bar, @1=foo UPDATED)


# Test a lazy combined iterator that must next/prev through fileMetdata when
# skipping through a RANGEDEL.
#
# L5
#     b-----------------------y RANGEDEL
# L6
#  [a]   [[d,e)@1]  [[l,m)@1]   [z]
#
# A SeekGE(k) must surface [l,m)@1 and a SeekLT(k) must surface [d,e)@1.

reset
----

batch
set a a
----
wrote 1 keys

flush
----

batch
set z z
----
wrote 1 keys

flush
----

batch
range-key-set d e @1 foo
----
wrote 1 keys

flush
----

batch
range-key-set l m @1 foo
----
wrote 1 keys

flush
----

batch
del-range b y
----
wrote 1 keys

flush
----

lsm
----
0.1:
  000013:[b#5,RANGEDEL-y#72057594037927935,RANGEDEL]
0.0:
  000005:[a#1,SET-a#1,SET]
  000009:[d#3,RANGEKEYSET-e#72057594037927935,RANGEKEYSET]
  000011:[l#4,RANGEKEYSET-m#72057594037927935,RANGEKEYSET]
  000007:[z#2,SET-z#2,SET]

combined-iter
seek-ge k
next
----
l: (., [l-m) @1=foo UPDATED)
z: (z, . UPDATED)

combined-iter
seek-lt k
prev
----
d: (., [d-e) @1=foo UPDATED)
a: (a, . UPDATED)

# Test a range key masking case where the range key is not immediately
# masking point keys, but masks point keys once positioned beneath it.

reset
----

batch
range-key-set d e @5 boop
set a@1 a1
set b@3 b3
set d@3 d3
----
wrote 4 keys

combined-iter mask-suffix=@9
first
next
next
next
----
a@1: (a1, .)
b@3: (b3, .)
d: (., [d-e) @5=boop UPDATED)
.

# Try a broad range key that masks all the point keys.

reset block-size=20
----

batch
range-key-set a z @5 boop
set a@1 foo
set b@3 foo
set c@3 foo
set d@1 foo
set e@3 foo
set f@3 foo
set g@2 foo
set h@2 foo
set i@2 foo
set j@2 foo
set k@0 foo
set l@2 foo
set m@1 foo
set n@3 foo
set o@4 foo
set p@2 foo
set q@2 foo
set r@1 foo
set s@2 foo
set t@3 foo
set u@2 foo
set v@0 foo
set w@0 foo
set x@2 foo
set y@4 foo
----
wrote 26 keys

flush
----

combined-iter mask-suffix=@9
first
next
stats
----
a: (., [a-z) @5=boop UPDATED)
.
stats: (interface (dir, seek, step): (fwd, 1, 1), (rev, 0, 0)), (internal (dir, seek, step): (fwd, 1, 1), (rev, 0, 0)),
(internal-stats: (block-bytes: (total 625 B, cached 0 B)), (points: (count 25, key-bytes 75, value-bytes 75, tombstoned: 0))

# Repeat the above test, but with an iterator that uses a block-property filter
# mask. The internal stats should reflect fewer bytes read and fewer points
# visited by the internal iterators.

combined-iter mask-suffix=@9 mask-filter
first
next
stats
----
a: (., [a-z) @5=boop UPDATED)
.
stats: (interface (dir, seek, step): (fwd, 1, 1), (rev, 0, 0)), (internal (dir, seek, step): (fwd, 1, 1), (rev, 0, 0)),
(internal-stats: (block-bytes: (total 50 B, cached 50 B)), (points: (count 2, key-bytes 6, value-bytes 6, tombstoned: 0))

# Perform a similar comparison in reverse.

combined-iter mask-suffix=@9
last
prev
stats
----
a: (., [a-z) @5=boop UPDATED)
.
stats: (interface (dir, seek, step): (fwd, 0, 0), (rev, 1, 1)), (internal (dir, seek, step): (fwd, 0, 0), (rev, 1, 1)),
(internal-stats: (block-bytes: (total 625 B, cached 625 B)), (points: (count 25, key-bytes 75, value-bytes 75, tombstoned: 0))

combined-iter mask-suffix=@9 mask-filter
last
prev
stats
----
a: (., [a-z) @5=boop UPDATED)
.
stats: (interface (dir, seek, step): (fwd, 0, 0), (rev, 1, 1)), (internal (dir, seek, step): (fwd, 0, 0), (rev, 1, 1)),
(internal-stats: (block-bytes: (total 50 B, cached 50 B)), (points: (count 2, key-bytes 6, value-bytes 6, tombstoned: 0))

# Perform similar comparisons with seeks.

combined-iter mask-suffix=@9
seek-ge m
next
stats
----
m: (., [a-z) @5=boop UPDATED)
.
stats: (interface (dir, seek, step): (fwd, 1, 1), (rev, 0, 0)), (internal (dir, seek, step): (fwd, 1, 1), (rev, 0, 0)),
(internal-stats: (block-bytes: (total 325 B, cached 325 B)), (points: (count 13, key-bytes 39, value-bytes 39, tombstoned: 0))

combined-iter mask-suffix=@9 mask-filter
seek-ge m
next
stats
----
m: (., [a-z) @5=boop UPDATED)
.
stats: (interface (dir, seek, step): (fwd, 1, 1), (rev, 0, 0)), (internal (dir, seek, step): (fwd, 1, 1), (rev, 0, 0)),
(internal-stats: (block-bytes: (total 50 B, cached 50 B)), (points: (count 2, key-bytes 6, value-bytes 6, tombstoned: 0))

combined-iter mask-suffix=@9
seek-lt m
prev
stats
----
a: (., [a-z) @5=boop UPDATED)
.
stats: (interface (dir, seek, step): (fwd, 0, 0), (rev, 1, 1)), (internal (dir, seek, step): (fwd, 0, 0), (rev, 1, 1)),
(internal-stats: (block-bytes: (total 325 B, cached 325 B)), (points: (count 12, key-bytes 36, value-bytes 36, tombstoned: 0))

combined-iter mask-suffix=@9 mask-filter
seek-lt m
prev
stats
----
a: (., [a-z) @5=boop UPDATED)
.
stats: (interface (dir, seek, step): (fwd, 0, 0), (rev, 1, 1)), (internal (dir, seek, step): (fwd, 0, 0), (rev, 1, 1)),
(internal-stats: (block-bytes: (total 75 B, cached 75 B)), (points: (count 2, key-bytes 6, value-bytes 6, tombstoned: 0))

# Test repeated seeks into the same range key, while TrySeekUsingNext=true.
# Test for regression fixed in #1849.

reset
----

batch
range-key-set a c @5 boop
range-key-set c e @5 beep
----
wrote 2 keys

combined-iter
seek-ge a
seek-ge b
----
a: (., [a-c) @5=boop UPDATED)
b: (., [a-c) @5=boop)

# Test a few cases around when a combined iterator should be lazy or not.

reset
----

batch
set a a
set b b
set c c
set e e
range-key-del a f
range-key-unset a f @5
----
wrote 6 keys

flush
----

wait-table-stats
----

# The lazy iterator shouldn't switch to combined iteration when it encounters a
# file that is known to only contain RANGEKEYDELs and RANGEKEYUNSETs.

combined-iter
is-using-combined
seek-ge a
seek-ge b
is-using-combined
----
using lazy iterator
a: (a, .)
b: (b, .)
using lazy iterator

# Write a range key to the memtable. The combined iterator should be forced to
# use non-lazy iteration.

batch
range-key-set m z @5 foo
set s s
----
wrote 2 keys

combined-iter
is-using-combined
seek-ge a
is-using-combined
seek-ge n
is-using-combined
----
using combined (non-lazy) iterator
a: (a, .)
using combined (non-lazy) iterator
n: (., [m-z) @5=foo UPDATED)
using combined (non-lazy) iterator

flush
----

# Now that the range key is flushed, a switch to combined iteration should only
# happen once the sstable containing the set is encountered.

combined-iter
is-using-combined
seek-ge a
is-using-combined
seek-ge n
is-using-combined
----
using lazy iterator
a: (a, .)
using lazy iterator
n: (., [m-z) @5=foo UPDATED)
using combined (non-lazy) iterator

# Regression test for a bug discovered in #1878.
# A lazy-combined iterator triggers combined iteration during an initial
# seek-prefix-ge call. The initial seek-prefix-ge call avoids defragmenting
# fragments beyond the initial fragment [c,f). A subsequent seek-ge that seeks
# within the bounds of the initial fragment [c,f) must not fall into the
# optimization that reuses the span without reseeking the keypsan iterator,
# because the span is not defragmented.
#
# In the bug surfaced by #1878, the initial seek-prefix-ge that switched to
# combined iteration failed to record that the iterator was now in prefix mode,
# allowing the subsequent seek-ge to incorrectly reuse the existing span.

reset
----

batch
range-key-set a c @5 foo
----
wrote 1 keys

flush
----

batch
range-key-set c f @5 foo
----
wrote 1 keys

flush
----

batch
range-key-set f m @5 foo
----
wrote 1 keys

flush
----

lsm
----
0.0:
  000005:[a#1,RANGEKEYSET-c#72057594037927935,RANGEKEYSET]
  000007:[c#2,RANGEKEYSET-f#72057594037927935,RANGEKEYSET]
  000009:[f#3,RANGEKEYSET-m#72057594037927935,RANGEKEYSET]

combined-iter
seek-prefix-ge d@5
seek-ge d
----
d@5: (., [d-"d\x00") @5=foo UPDATED)
d: (., [a-m) @5=foo UPDATED)

# Test that repeated SeekPrefixGEs correctly return truncated spans with
# RangeKeyChanged() -> UPDATED.

combined-iter
seek-prefix-ge c@5
seek-prefix-ge d@5
seek-ge d@7
seek-prefix-ge d@7
----
c@5: (., [c-"c\x00") @5=foo UPDATED)
d@5: (., [d-"d\x00") @5=foo UPDATED)
d@7: (., [a-m) @5=foo UPDATED)
d@7: (., [d-"d\x00") @5=foo UPDATED)

# Test a LSM with range keys fragmented within a prefix.
# This is a regression test for cockroachdb/cockroach#86102.

reset target-file-size=1
----

batch
range-key-set a c @1 bar
range-key-set c e @1 foo
set c@9 c@9
set c@8 c@8
set c@7 c@7
set c@6 c@6
set c@5 c@5
set c@4 c@4
set c@3 c@3
set c@2 c@2
set d@0 d@0
range-key-set y z @1 foo
set z z
----
wrote 13 keys

flush
----

lsm
----
0.0:
  000005:[a#1,RANGEKEYSET-c@8#72057594037927935,RANGEKEYSET]
  000006:[c@8#4,SET-c@7#72057594037927935,RANGEKEYSET]
  000007:[c@7#5,SET-c@6#72057594037927935,RANGEKEYSET]
  000008:[c@6#6,SET-c@5#72057594037927935,RANGEKEYSET]
  000009:[c@5#7,SET-c@4#72057594037927935,RANGEKEYSET]
  000010:[c@4#8,SET-c@3#72057594037927935,RANGEKEYSET]
  000011:[c@3#9,SET-c@2#72057594037927935,RANGEKEYSET]
  000012:[c@2#10,SET-d@0#72057594037927935,RANGEKEYSET]
  000013:[d@0#11,SET-e#72057594037927935,RANGEKEYSET]
  000014:[y#12,RANGEKEYSET-z#13,SET]

# The first seek-prefix-ge y@1 converts the iterator from lazy combined iterator
# to combined iteration.
#
# The second seek-prefix-ge d@1 does not fully defragment the range key. The
# underlying range key is defragmented to [c@2,e). This incomplete
# defragmentation is still hidden from the user at this point, since the range
# key is truncated to [d,d\x00).
#
# The third seek-prefix-ge c@0 seeks to a key that falls within the
# range key currently defragmented on interleaving iterator. A previous bug
# would use this span without defragmenting the span to include the full
# span of the prefix [c,c\x00).

combined-iter
seek-prefix-ge y@1
seek-prefix-ge d@1
seek-prefix-ge c@0
----
y@1: (., [y-"y\x00") @1=foo UPDATED)
d@1: (., [d-"d\x00") @1=foo UPDATED)
c@0: (., [c-"c\x00") @1=foo UPDATED)

# Test a LSM with range keys fragmented within a prefix.
# This is a regression test for cockroachdb/cockroach#86102.

reset
----

ingest ext1
range-key-set a c@8 @1 bar
set c@9 c@9
----

ingest ext2
range-key-set c@8 e @1 bar
set c@8 c@8
set c@7 c@7
set c@6 c@6
set c@5 c@5
set c@4 c@4
set c@3 c@3
set c@2 c@2
----

ingest ext2
range-key-set y z @1 foo
set z z
----

lsm
----
6:
  000004:[a#1,RANGEKEYSET-c@8#72057594037927935,RANGEKEYSET]
  000005:[c@8#2,RANGEKEYSET-e#72057594037927935,RANGEKEYSET]
  000006:[y#3,RANGEKEYSET-z#3,SET]


# The first seek-prefix-ge y@1 converts the iterator from lazy combined iterator
# to combined iteration.
#
# The second seek-prefix-ge d@1 does not fully defragment the range key. The
# underlying range key is defragmented to [a,c@8). This incomplete
# defragmentation is still hidden from the user at this point, since the range
# key is truncated to [a,a\x00).
#
# The third seek-prefix-ge c@10 seeks to a key that falls within the
# range key currently defragmented on interleaving iterator. A previous bug
# would use this span without defragmenting the span to include the full
# span of the prefix [c,c\x00).

combined-iter
seek-prefix-ge y@1
seek-prefix-ge a@1
seek-prefix-ge c@10
----
y@1: (., [y-"y\x00") @1=foo UPDATED)
a@1: (., [a-"a\x00") @1=bar UPDATED)
c@10: (., [c-"c\x00") @1=bar UPDATED)

# Ensure that no-op optimizations do not reuse range key iterator state across
# SetOptions calls. No-op optimizations have the potential to fail to update
# RangeKeyChanged().

reset
----

batch
range-key-set p s @1 foo
----
wrote 1 keys

combined-iter lower=n@9 upper=x@5
seek-lt y@3
set-options lower=n@9 upper=x@5
seek-lt-limit t o
----
p: (., [p-s) @1=foo UPDATED)
.
p: valid (., [p-s) @1=foo UPDATED)

combined-iter lower=n@9 upper=x@5
seek-ge o
set-options lower=n@9 upper=x@5
seek-ge oat
----
p: (., [p-s) @1=foo UPDATED)
.
p: (., [p-s) @1=foo UPDATED)

combined-iter lower=n@9 upper=x@5
seek-prefix-ge p@5
set-options lower=n@9 upper=x@5
seek-prefix-ge p
----
p@5: (., [p-"p\x00") @1=foo UPDATED)
.
p: (., [p-"p\x00") @1=foo UPDATED)

# Regression test for an invariant violation in the range key defragmenting
# iterator during prefix iteration. [Related to #1893]. There is a lot of
# subtlety here. Do not modify this test case without verifying that it still
# exercises the right conditions.
#
# Normally during forward iteration, if a switch to lazy-combined iteration is
# triggered, the lazy-combined iterator establishes a seek key for the range key
# iterator such that the seek key is:
#   1. greater than or equal to the key at previous iterator position.
#   2. less than or equal to the first range key with a start key greater than
#       or equal to the previous iterator position.
# These invariants are important so that the range key iterator is positioned
# appropriately after the switch to combined iteration and no range keys are
# missed.
#
# Parts of the iterator stack depend on the above invariants. For example,
# during forward iteration the BoundedIter only checks span start keys against
# iterator bounds and the configured prefix, with the expectation that the seek
# is always already greater than or equal to the lower bound. In turn, the
# DefragmentingIter indirectly relies on the same invariant, because it requires
# a consistent view of the fragments. If the BoundedIter returns a span in one
# direction, but skips it when iterating back, the defragmenting iterator will
# end up on a different fragment.
#
# This test exercises a case in which previously, during prefix iteration, it
# was possible for the switch to lazy-combined iteration to trigger using a seek
# key k, such that there exist range key fragments between the current iterator
# position and k (violating the 2nd invariant up above).
#
# The sequence of events is:
#   1. SeekPrefixGE("b@9") = 'b@4':
#      a. This seek positions the two levels, L0 and L6. The L0 iterator seeks
#         to file 000006. This file does not contain any keys with the prefix
#         "b", and the bloom filter must succeed in excluding the file. Since the
#         file contains a range deletion, SeekPrefixGE returns the level's
#         largest point key (`d#inf,RANGEDEL`) to ensure the file stays open until
#         the iterator advances past the range deletion.
#      b. In L6, the level iterator seeks to 000004 which contains a key with
#         the prefix, returning 'b@4'.
#   2. Next():
#      a. Next advances the the L6 iterator to file 000005. This file contains a
#         range key [e,f)@1=bar, which updates the lazy-combined iterator's
#         state, recording the earliest observed range key as 'e'. The L6 level
#         iterator then returns the file single point key 'c'.
#      b. The merging iterator checks whether point key 'c' is deleted by any
#         range key deletions. It is. It's deleted by L0's [c,d) range deletion.
#         The merging iterator then seeks the iterator to the tombstone's end
#         key 'd'.
#      c. After seeking, the range deletion sentinel d is at the top of the
#         heap. At this point, the merging iterator checks whether the keyspace
#         of the prefix has been exceeded, and it has. It returns nil.
#   3. Switch to combined iteration:
#      a. The Next has completed and triggered combined iteration. The only file
#         containing range keys that was observed was 000005, containing the
#         range key [e,f). The switch to combined iteration seeks the keyspan
#         iterator to 'e'. Note that the iterator never observed L0's [d,e)
#         range key that precedes [e,f) in the keyspace.
#      b. Seeking the keyspan iterator calls DefragmentingIter.SeekLT('e'),
#         which lands on the [d,e) fragment. This fragment does NOT check to see
#         if the span starts at a prefix greater than the current prefix 'b',
#         because only bounds in the direction of iteration are check.
#      c. The DefragmentingIter observes disappearing range key fragments when
#         it switches directions, as a result of (b).
#

# Use 100-bits per key to ensure the bloom filter provides total recall.
reset bloom-bits-per-key=100
----

# Ingest L6 files:
#
# 000004: b@4
# 000005: c, [e,f)@1=bar

ingest ext1
set b@4 b@4
----

ingest ext1
set c c
range-key-set e f @1 bar
----

# Ingest L0 files:
#
# 000006: a, del-range(c, d)
# 000007: [d,e)@1=bar

ingest ext2
set a a
del-range c d
----

ingest ext3
range-key-set d e @1 bar
----

lsm
----
0.0:
  000006:[a#3,SET-d#72057594037927935,RANGEDEL]
  000007:[d#4,RANGEKEYSET-e#72057594037927935,RANGEKEYSET]
6:
  000004:[b@4#1,SET-b@4#1,SET]
  000005:[c#2,SET-f#72057594037927935,RANGEKEYSET]

combined-iter
seek-prefix-ge b@9
next
----
b@4: (b@4, .)
.

# Regression test for #1947 — Test a no-op call to SetBounds. Even if the
# underlying iterator doesn't need to be invalidated because the bounds didn't
# change, a subsequent Seek that finds the same range key must still report
# RangeKeyChanged() -> true.

reset
----

batch
range-key-set a d @1 foo
----
wrote 1 keys

combined-iter lower=a upper=z
last
set-bounds lower=a upper=z
last
set-bounds lower=a upper=z
first
set-bounds lower=a upper=z
seek-ge a
set-bounds lower=a upper=z
seek-lt z
set-bounds lower=a upper=z
seek-prefix-ge a
set-bounds lower=a upper=z
seek-prefix-ge a
----
a: (., [a-d) @1=foo UPDATED)
.
a: (., [a-d) @1=foo UPDATED)
.
a: (., [a-d) @1=foo UPDATED)
.
a: (., [a-d) @1=foo UPDATED)
.
a: (., [a-d) @1=foo UPDATED)
.
a: (., [a-"a\x00") @1=foo UPDATED)
.
a: (., [a-"a\x00") @1=foo UPDATED)

# Regression test for #1950 — Test a no-op call to SeekGE/SeekLT after a
# SetBounds/SetOptions noop. The SetBounds/SetOptions noop made the iterator
# appear to be invalidated, but the internal iterator state was preserved.
# However, if the previous iterator state had a range key, this range key must
# be considered changed for the purpose of calculating RangeKeyChanged().

combined-iter lower=a upper=z
seek-lt z
set-bounds lower=a upper=z
seek-lt y
seek-ge 1
set-bounds lower=a upper=z
seek-ge a
----
a: (., [a-d) @1=foo UPDATED)
.
a: (., [a-d) @1=foo UPDATED)
a: (., [a-d) @1=foo)
.
a: (., [a-d) @1=foo UPDATED)

# Similar to the above regression, test that a no-op correctly returns
# RangeKeyChanged()=false if there's no intervening SetOptions/SetBounds call.

combined-iter lower=a upper=z
seek-lt z
seek-lt y
set-bounds lower=a upper=z
seek-ge 1
seek-ge a
----
a: (., [a-d) @1=foo UPDATED)
a: (., [a-d) @1=foo)
.
a: (., [a-d) @1=foo UPDATED)
a: (., [a-d) @1=foo)
