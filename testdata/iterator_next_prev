build ext1
merge a 1
set c 2
----

ingest ext1
----
6:
  000004:[a#1,MERGE-c#1,SET]

build ext2
del-range b c
----

ingest ext2
----
0.0:
  000005:[b#2,RANGEDEL-c#72057594037927935,RANGEDEL]
6:
  000004:[a#1,MERGE-c#1,SET]

# Regression test for a bug where range tombstones were not properly
# ignored by Iterator.prevUserKey when switching from forward to
# reverse iteration. In the forward direction, the Iterator sees the
# keys:
#
#   a#1,MERGE
#   c#1,SET
#
# Due to the synthetic boundary key generated for sstable 5, in the
# reverse direction Iterator sees the keys:
#
#   c#1,SET
#   b#2,RANGEDEL
#   a#1,MERGE
#
# Normally the record b#2,RANGEDEL is skipped by Iterator during
# iteration, but logic to do so was missing from Iterator.prevUserKey.
# The result was that prev could return the same key that iterator was
# currently pointed at.

iter
first
prev
----
a:1
.

reset
----

build ext1
set t 1
merge z 2
----

ingest ext1
----
6:
  000004:[t#1,SET-z#1,MERGE]

build ext2
del-range x y
----

ingest ext2
----
0.0:
  000005:[x#2,RANGEDEL-y#72057594037927935,RANGEDEL]
6:
  000004:[t#1,SET-z#1,MERGE]

# Regression test for a bug where range tombstones were not properly
# ignored by Iterator.nextUserKey when switching from reverse to
# forward iteration. In the reverse direction, the Iterator sees the
# keys:
#
#   z#1,MERGE
#   t#1,SET
#
# Due to the synthetic boundary key generated for sstable 5, in the
# forward direction Iterator sees the keys:
#
#   t#1,SET
#   y#72057594037927935,RANGEDEL
#   z#1,MERGE
#
# Normally the record y#72057594037927935,RANGEDEL is skipped by
# Iterator during iteration, but logic to do so was missing from
# Iterator.nextUserKey. The result was that next could return the same
# key that iterator was currently pointed at.

iter
last
next
----
z:2
.

# Verify that switching from reverse iteration to forward iteration
# properly skips over range tombstones at the start of forward
# iteration.

reset
----

build ext1
set e e
----

ingest ext1
----
6:
  000004:[e#1,SET-e#1,SET]

build ext2
set b b
del-range c d
----

ingest ext2
----
6:
  000005:[b#2,SET-d#72057594037927935,RANGEDEL]
  000004:[e#1,SET-e#1,SET]

# The scenario requires iteration at a snapshot. The "last" operation
# will exhaust the mergingIter looking backwards for visible
# records. The subsequent "next" will seek-ge(lower) which will skip
# over the "b" record and find the boundary key due to the range
# deletion sentinel.

iter seq=2
set-bounds lower=c upper=f
last
next
----
.
e:e
.

# Test that the cloned iterator sees all the keys.
iter
set-bounds lower=a upper=f
first
next
next
clone
seek-ge a
next
next
----
.
b:b
e:e
.
.
b:b
e:e
.

# Test that the cloned iterator respects the original bounds.
iter
set-bounds lower=a upper=d
first
next
clone
seek-ge a
next
----
.
b:b
.
.
b:b
.

# Test that the cloned iterator respects the seq num.
iter seq=2
set-bounds lower=a upper=f
first
next
clone
last
prev
----
.
e:e
.
.
e:e
.

# Verify that switching from forward iteration to reverse iteration
# properly skips over range tombstones at the end of reverse
# iteration.

reset
----

build ext1
merge a a
----

ingest ext1
----
6:
  000004:[a#1,MERGE-a#1,MERGE]

build ext2
set e e
del-range c d
----

ingest ext2
----
6:
  000004:[a#1,MERGE-a#1,MERGE]
  000005:[c#2,RANGEDEL-e#2,SET]

iter seq=2
set-bounds lower=a upper=e
first
prev
----
.
a:a
.
