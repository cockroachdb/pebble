# We create multiple SSTs, one of which overlaps with the memtable (scheduling a flush).
# Check that the SSTs get ingested to the lowest levels possible.

batch
set a 0
----

# The SST below overlaps with memtable and thus should be placed in L0 post-flush.
build ext1
set a 1
----

# The SST below overlaps with L0 and thus should be placed in L0 post-flush.
build ext2
set b 1
----

# The SST below doesn't overlap with any SSTs in the LSM and thus can be placed in L6 post-flush.
build ext3
set d 1
----

# We block the flush, so the SSTs should still be in the flushable queue.
blockFlush
----

ingest ext1 ext2 ext3
----

allowFlush
----

lsm
----

get
a
b
----
a:1
b:1

# Test WAL replay, ingested SSTs should be added back into the flushable queue.
# TODO(bananabrick): redo this test after implementing WAL replay.

# close
# ----

# ls
# ----
# 000002.log
# 000004.sst
# 000005.sst
# 000006.sst
# 000007.log
# 000008.log
# CURRENT
# LOCK
# MANIFEST-000001
# OPTIONS-000003
# ext
# marker.format-version.000008.009
# marker.manifest.000001.MANIFEST-000001

# open
# ----

# ls
# ----
# 000004.sst
# 000005.sst
# 000006.sst
# 000009.log
# 000010.sst
# CURRENT
# LOCK
# MANIFEST-000001
# MANIFEST-000011
# OPTIONS-000012
# ext
# marker.format-version.000008.009
# marker.manifest.000002.MANIFEST-000011

# lsm
# ----
# 0.1:
#   000004:[a#2,SET-a#2,SET]
# 0.0:
#   000010:[a#1,SET-a#1,SET]
# 6:
#   000005:[b#3,SET-b#3,SET]
#   000006:[d#4,SET-d#4,SET]

# get
# a
# b
# ----
# a:1
# b:1

reset
----

# Repeat the steps above without closing Pebble. LSM should match.
batch
set a 0
----

build ext1
set a 1
----

build ext2
set b 1
----

build ext3
set d 1
----

ingest ext1 ext2 ext3
----

lsm
----
0.1:
  000004:[a#2,SET-a#2,SET]
0.0:
  000009:[a#1,SET-a#1,SET]
6:
  000005:[b#3,SET-b#3,SET]
  000006:[d#4,SET-d#4,SET]

reset
----

# Test multiple overlapping ingests interleaving batch sets, and then flushing.
batch
set a 0
----

build ext4
set a 1
----

build ext5
set a 2
----

# Should get ingested into L6 as it's the first SST in the LSM.
blockFlush
----

ingest ext4
----

allowFlush
----

get
a
----
a:1

batch
set b 1
----

get
a
b
----
a:1
b:1

# Should get ingested into L0 above the memtable flush.
blockFlush
----

ingest ext5
----

allowFlush
----

get
a
b
----
a:2
b:1

batch
set c 1
----

flush
----

lsm
----
0.2:
  000007:[a#4,SET-a#4,SET]
0.1:
  000004:[a#2,SET-a#2,SET]
0.0:
  000010:[a#1,SET-a#1,SET]
  000011:[b#3,SET-b#3,SET]

# Value of a should be the second ingested SST.
get
a
b
c
----
a:2
b:1
c:1

# Test that non-overlapping ingest still works normally.
reset
----

batch
set a 0
----

build ext1
set b 1
----

build ext2
set d 1
----

ingest ext1 ext2
----

lsm
----
6:
  000004:[b#2,SET-b#2,SET]
  000005:[d#3,SET-d#3,SET]


# Verify target level of ingestedSStable flushable.
reset
----

batch
set a 0
----

build ext1
set a 1
----

build ext2
set b 1
----

build ext3
set d 1
----

ingest ext1 ext2 ext3
----

lsm
----
0.1:
  000004:[a#2,SET-a#2,SET]
0.0:
  000009:[a#1,SET-a#1,SET]
6:
  000005:[b#3,SET-b#3,SET]
  000006:[d#4,SET-d#4,SET]


batch
set a 3
----

build ext4
set a 4
----

build ext5
set b 5
----

ingest ext4 ext5
----

# Looking for the sstable with the key a to go into 0.3, and the sstable with
# key b to go into 0.0. The sstable doesn't go into L5, because L5 isn't open
# yet.
lsm
----
0.3:
  000010:[a#6,SET-a#6,SET]
0.2:
  000014:[a#5,SET-a#5,SET]
0.1:
  000004:[a#2,SET-a#2,SET]
0.0:
  000009:[a#1,SET-a#1,SET]
  000011:[b#7,SET-b#7,SET]
6:
  000005:[b#3,SET-b#3,SET]
  000006:[d#4,SET-d#4,SET]
