define
a-b:{(#10,RANGEKEYSET,@5,apples)}
d-e:{(#4,RANGEKEYSET,@3,coconut)}
g-h:{(#20,RANGEKEYSET,@5,pineapple) (#20,RANGEKEYSET,@3,guava)}
----

# Nothing out of bounds.

iter lower=a upper=z
first
next
next
next
last
prev
prev
prev
----
a-b:{(#10,RANGEKEYSET,@5,apples)}
d-e:{(#4,RANGEKEYSET,@3,coconut)}
g-h:{(#20,RANGEKEYSET,@5,pineapple) (#20,RANGEKEYSET,@3,guava)}
<nil>
g-h:{(#20,RANGEKEYSET,@5,pineapple) (#20,RANGEKEYSET,@3,guava)}
d-e:{(#4,RANGEKEYSET,@3,coconut)}
a-b:{(#10,RANGEKEYSET,@5,apples)}
<nil>

# Test out of upper bound, but undiscovered until we Next.

iter lower=a upper=f
first
next
next
prev
----
a-b:{(#10,RANGEKEYSET,@5,apples)}
d-e:{(#4,RANGEKEYSET,@3,coconut)}
<nil>
d-e:{(#4,RANGEKEYSET,@3,coconut)}

# Test out of upper bound, but discovered before we Next.

iter lower=a upper=dog
first
next
next
prev
----
a-b:{(#10,RANGEKEYSET,@5,apples)}
d-e:{(#4,RANGEKEYSET,@3,coconut)}
<nil>
d-e:{(#4,RANGEKEYSET,@3,coconut)}

# Test out of lower bound, but undiscovered until we Prev.

iter lower=c upper=z
last
prev
prev
next
----
g-h:{(#20,RANGEKEYSET,@5,pineapple) (#20,RANGEKEYSET,@3,guava)}
d-e:{(#4,RANGEKEYSET,@3,coconut)}
<nil>
d-e:{(#4,RANGEKEYSET,@3,coconut)}

# Test out of lower bound, but discovered before we Prev.

iter lower=d upper=z
last
prev
prev
next
----
g-h:{(#20,RANGEKEYSET,@5,pineapple) (#20,RANGEKEYSET,@3,guava)}
d-e:{(#4,RANGEKEYSET,@3,coconut)}
<nil>
d-e:{(#4,RANGEKEYSET,@3,coconut)}

# Test a single span ([b-g)) within the bounds, overlapping on both ends.

define
a-b:{(#10,RANGEKEYSET,@5)}
b-g:{(#4,RANGEKEYSET,@3)}
g-h:{(#20,RANGEKEYSET,@5)}
----

iter lower=c upper=f
seek-ge b
next
next
seek-ge b
prev
prev
seek-lt f
prev
prev
seek-lt f
next
next
prev
prev
----
b-g:{(#4,RANGEKEYSET,@3)}
<nil>
<nil>
b-g:{(#4,RANGEKEYSET,@3)}
<nil>
<nil>
b-g:{(#4,RANGEKEYSET,@3)}
<nil>
<nil>
b-g:{(#4,RANGEKEYSET,@3)}
<nil>
<nil>
b-g:{(#4,RANGEKEYSET,@3)}
<nil>
