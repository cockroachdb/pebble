define
L0
  0009:a.SET.10-b.SET.10
  0007:b.SET.6-j.SET.8
  0003:e.SET.5-j.SET.7
----
file count: 3, sublevels: 3, intervals: 5
flush split keys(3): [b, e, j]
0.2: file count: 1, bytes: 256, width (mean, max): 2.0, 2, interval range: [0, 1]
	000009:a#10,1-b#10,1
0.1: file count: 1, bytes: 256, width (mean, max): 3.0, 3, interval range: [1, 3]
	000007:b#6,1-j#8,1
0.0: file count: 1, bytes: 256, width (mean, max): 1.0, 1, interval range: [3, 3]
	000003:e#5,1-j#7,1
compacting file count: 0, base compacting intervals: 

define no_initialize
L0.2
  0009:a.SET.10-b.SET.10
L0.1
  0003:e.SET.5-j.SET.7
L0.0
  0007:b.SET.6-j.SET.8
----
file count: 3, sublevels: 3, intervals: 0
flush split keys(0): []
0.2: file count: 1, bytes: 256, width (mean, max): 1.0, 1, interval range: [0, 0]
	000009:a#10,1-b#10,1
0.1: file count: 1, bytes: 256, width (mean, max): 1.0, 1, interval range: [0, 0]
	000003:e#5,1-j#7,1
0.0: file count: 1, bytes: 256, width (mean, max): 1.0, 1, interval range: [0, 0]
	000007:b#6,1-j#8,1
compacting file count: 0, base compacting intervals: 

l0-check-ordering
----
OK

define no_initialize
L0.1
  0009:a.SET.10-b.SET.10
L0.0
  0007:b.SET.6-j.SET.8
  0003:e.SET.5-j.SET.7
----
file count: 3, sublevels: 2, intervals: 0
flush split keys(0): []
0.1: file count: 1, bytes: 256, width (mean, max): 1.0, 1, interval range: [0, 0]
	000009:a#10,1-b#10,1
0.0: file count: 2, bytes: 512, width (mean, max): 1.0, 1, interval range: [0, 0]
	000007:b#6,1-j#8,1
	000003:e#5,1-j#7,1
compacting file count: 0, base compacting intervals: 

l0-check-ordering
----
L0.0 files 000007 and 000003 have overlapping ranges: [b#6,SET-j#8,SET] vs [e#5,SET-j#7,SET]

define
L0
  0001:a.SET.2-b.SET.3
  0002:c.SET.3-d.SET.5
  0003:e.SET.5-f.SET.7
  0005:f.SET.6-h.SET.9
  0006:f.SET.4-g.SET.5
  0009:f.SET.10-i.SET.10
  0010:f.SET.11-g.SET.11
L6
  0007:a.SET.0-f.SET.0
  0008:g.SET.0-z.SET.0
----
file count: 7, sublevels: 5, intervals: 10
flush split keys(5): [b, d, f, g, h]
0.4: file count: 1, bytes: 256, width (mean, max): 2.0, 2, interval range: [5, 6]
	000010:f#11,1-g#11,1
0.3: file count: 1, bytes: 256, width (mean, max): 4.0, 4, interval range: [5, 8]
	000009:f#10,1-i#10,1
0.2: file count: 1, bytes: 256, width (mean, max): 3.0, 3, interval range: [5, 7]
	000005:f#6,1-h#9,1
0.1: file count: 1, bytes: 256, width (mean, max): 2.0, 2, interval range: [4, 5]
	000003:e#5,1-f#7,1
0.0: file count: 3, bytes: 768, width (mean, max): 1.3, 2, interval range: [0, 6]
	000001:a#2,1-b#3,1
	000002:c#3,1-d#5,1
	000006:f#4,1-g#5,1
compacting file count: 0, base compacting intervals: 

max-depth-after-ongoing-compactions
----
5

# Extend one of the SSTables (0009) to the right, and place an SSTable "under"
# the extension (0011).

define
L0
  0005:f.SET.6-h.SET.9
  0006:f.SET.4-g.SET.5
  0009:f.SET.10-p.SET.10
  0010:f.SET.11-g.SET.11
  0011:n.SET.8-p.SET.10
L6
  0007:a.SET.0-f.SET.0
  0008:g.SET.0-z.SET.0
----
file count: 5, sublevels: 4, intervals: 5
flush split keys(3): [g, h, p]
0.3: file count: 1, bytes: 256, width (mean, max): 1.0, 1, interval range: [0, 0]
	000010:f#11,1-g#11,1
0.2: file count: 1, bytes: 256, width (mean, max): 4.0, 4, interval range: [0, 3]
	000009:f#10,1-p#10,1
0.1: file count: 1, bytes: 256, width (mean, max): 2.0, 2, interval range: [0, 1]
	000005:f#6,1-h#9,1
0.0: file count: 2, bytes: 512, width (mean, max): 1.0, 1, interval range: [0, 3]
	000006:f#4,1-g#5,1
	000011:n#8,1-p#10,1
compacting file count: 0, base compacting intervals: 

# Assume a base compaction from the above files is chosen. This should reduce
# max-depth-after-ongoing-compactions.

define
L0
  0005:f.SET.6-h.SET.9 base_compacting
  0006:f.SET.4-g.SET.5 base_compacting
  0009:f.SET.12-p.SET.12
  0010:f.SET.11-g.SET.11 base_compacting
  0011:n.SET.8-p.SET.10 base_compacting
L6
  0007:a.SET.0-f.SET.0
  0008:g.SET.0-z.SET.0
----
file count: 5, sublevels: 4, intervals: 5
flush split keys(3): [g, h, p]
0.3: file count: 1, bytes: 256, width (mean, max): 4.0, 4, interval range: [0, 3]
	000009:f#12,1-p#12,1
0.2: file count: 1, bytes: 256, width (mean, max): 1.0, 1, interval range: [0, 0]
	000010:f#11,1-g#11,1
0.1: file count: 1, bytes: 256, width (mean, max): 2.0, 2, interval range: [0, 1]
	000005:f#6,1-h#9,1
0.0: file count: 2, bytes: 512, width (mean, max): 1.0, 1, interval range: [0, 3]
	000006:f#4,1-g#5,1
	000011:n#8,1-p#10,1
compacting file count: 4, base compacting intervals: [0, 1], [3, 4], 

max-depth-after-ongoing-compactions
----
1

read-amp
----
4

define flush_split_max_bytes=32
L0
  0001:a.SET.2-e.SET.5 size=64
  0002:c.SET.6-g.SET.8 size=16
  0003:f.SET.9-j.SET.11 size=16
L6
  0007:a.SET.0-f.SET.0
  0008:g.SET.0-z.SET.0
----
file count: 3, sublevels: 3, intervals: 6
flush split keys(1): [e]
0.2: file count: 1, bytes: 16, width (mean, max): 2.0, 2, interval range: [3, 4]
	000003:f#9,1-j#11,1
0.1: file count: 1, bytes: 16, width (mean, max): 3.0, 3, interval range: [1, 3]
	000002:c#6,1-g#8,1
0.0: file count: 1, bytes: 64, width (mean, max): 2.0, 2, interval range: [0, 1]
	000001:a#2,1-e#5,1
compacting file count: 0, base compacting intervals: 

# Check that read amplification is the sublevel height of the tallest key
# interval, not the overall count of sublevels.

read-amp
----
2

# The comparison of a cumulative count of interpolated bytes and
# flushSplitMaxBytes is a <, so even though the cumulative count equals 32 after
# a-c, we do not emit a flush split key until the end of the next interval, c-e.

flush-split-keys
----
flush user split keys: e

# Reduce flush_split_max_bytes by 1, and there should also be a split key at c.

define flush_split_max_bytes=31
L0
  0001:a.SET.2-e.SET.5 size=64
  0002:c.SET.6-g.SET.8 size=16
  0003:f.SET.9-j.SET.11 size=16
L6
  0007:a.SET.0-f.SET.0
  0008:g.SET.0-z.SET.0
----
file count: 3, sublevels: 3, intervals: 6
flush split keys(2): [c, e]
0.2: file count: 1, bytes: 16, width (mean, max): 2.0, 2, interval range: [3, 4]
	000003:f#9,1-j#11,1
0.1: file count: 1, bytes: 16, width (mean, max): 3.0, 3, interval range: [1, 3]
	000002:c#6,1-g#8,1
0.0: file count: 1, bytes: 64, width (mean, max): 2.0, 2, interval range: [0, 1]
	000001:a#2,1-e#5,1
compacting file count: 0, base compacting intervals: 

flush-split-keys
----
flush user split keys: c, e

# Reduce flush_split_max_bytes by 1, and there should also be a split key at c.

define flush_split_max_bytes=31
L0
  0001:a.SET.2-e.SET.5 size=64
  0002:c.SET.6-g.SET.8 size=16
  0003:f.SET.9-j.SET.11 size=16
L6
  0007:a.SET.0-f.SET.0
  0008:g.SET.0-z.SET.0
----
file count: 3, sublevels: 3, intervals: 6
flush split keys(2): [c, e]
0.2: file count: 1, bytes: 16, width (mean, max): 2.0, 2, interval range: [3, 4]
	000003:f#9,1-j#11,1
0.1: file count: 1, bytes: 16, width (mean, max): 3.0, 3, interval range: [1, 3]
	000002:c#6,1-g#8,1
0.0: file count: 1, bytes: 64, width (mean, max): 2.0, 2, interval range: [0, 1]
	000001:a#2,1-e#5,1
compacting file count: 0, base compacting intervals: 

flush-split-keys
----
flush user split keys: c, e

max-depth-after-ongoing-compactions
----
2
