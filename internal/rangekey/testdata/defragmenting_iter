define
a-c:{(#3,RANGEKEYUNSET,@5) (#2,RANGEKEYSET,@5,apples) (#1,RANGEKEYSET,@3,bananas)}
c-d:{(#4,RANGEKEYSET,@3,bananas)}
d-e:{(#4,RANGEKEYSET,@3,bananas) (#4,RANGEKEYSET,@1,pineapple)}
----

# Iterating with logical defragmentation should combine [a,c) and [c,d)
# fragments.

iter method=logical
first
next
next
last
prev
prev
----
first     [a, d): "@3" = "bananas"
next      [d, e): "@3" = "bananas", "@1" = "pineapple"
next      .
last      [d, e): "@3" = "bananas", "@1" = "pineapple"
prev      [a, d): "@3" = "bananas"
prev      .

iter method=internal
first
next
next
next
last
prev
prev
prev
----
first     [a, c): "@5" = <unset>, "@3" = "bananas"
next      [c, d): "@3" = "bananas"
next      [d, e): "@3" = "bananas", "@1" = "pineapple"
next      .
last      [d, e): "@3" = "bananas", "@1" = "pineapple"
prev      [c, d): "@3" = "bananas"
prev      [a, c): "@5" = <unset>, "@3" = "bananas"
prev      .

# Test a scenario that SHOULD result in internal defragmentation ([a,c) and
# [c,d) should be merged.

define
a-c:{(#3,RANGEKEYUNSET,@5) (#2,RANGEKEYSET,@5,apples) (#1,RANGEKEYSET,@3,bananas)}
c-d:{(#3,RANGEKEYUNSET,@5) (#2,RANGEKEYSET,@3,bananas)}
d-e:{(#3,RANGEKEYSET,@3,bananas)}
----

iter method=internal
first
next
next
----
first     [a, d): "@5" = <unset>, "@3" = "bananas"
next      [d, e): "@3" = "bananas"
next      .

# Test defragmenting in both directions at seek keys.

define
a-f:{(#3,RANGEKEYUNSET,@5) (#2,RANGEKEYSET,@5,apples) (#1,RANGEKEYSET,@3,bananas)}
f-h:{(#3,RANGEKEYSET,@3,bananas)}
h-p:{(#3,RANGEKEYSET,@3,bananas)}
p-t:{(#3,RANGEKEYSET,@3,bananas)}
----

iter method=logical
seekge b
prev
seekge b
next
seeklt d
next
seeklt d
prev
----
seekge b  [a, t): "@3" = "bananas"
prev      .
seekge b  [a, t): "@3" = "bananas"
next      .
seeklt d  [a, t): "@3" = "bananas"
next      .
seeklt d  [a, t): "@3" = "bananas"
prev      .

iter method=logical
seeklt d
next
prev
----
seeklt d  [a, t): "@3" = "bananas"
next      .
prev      [a, t): "@3" = "bananas"

# Test next-ing and prev-ing around seek keys.

define
a-f:{(#3,RANGEKEYUNSET,@5) (#2,RANGEKEYSET,@5,apples) (#1,RANGEKEYSET,@3,bananas)}
f-h:{(#3,RANGEKEYSET,@3,bananas)}
h-p:{(#3,RANGEKEYSET,@3,bananas)}
p-t:{(#3,RANGEKEYSET,@3,bananas)}
t-z:{(#4,RANGEKEYSET,@2,oranges)}
----

iter method=logical
seekge r
prev
next
next
----
seekge r  [a, t): "@3" = "bananas"
prev      .
next      [a, t): "@3" = "bananas"
next      [t, z): "@2" = "oranges"
